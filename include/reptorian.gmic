#@gmic
#
#  File        : reptorian.gmic
#                ( G'MIC commands file )
#
#  Description : The author of these filters is simply experimenting with G'MIC coding. Sometimes, inspired by existing filters.
#
#  Copyright   : Reptorian
#                ( https://discuss.pixls.us/u/reptorian/summary )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#-------------------------------
#
#@cli :: Reptorian's CLI Commands
#
#-------------------------------

#@cli rep_sdaxy: (eq. to rep_shift_angle_distance)
rep_sdaxy: rep_shift_distance_angle_xy $*
#@cli rep_shift_angle_distance_xy: _distance>0,0<=_angle<=360,0<=_boundary_conditions<=3,_interpolation={ 0=nearest_neighbor | 1=linear }
#@cli : Default value: 'boundary_conditions=3','interpolation=1'
rep_shift_distance_angle_xy:
skip ${3=3},${4=1}
rad_ang={(abs(360+$2)%360)*(pi/180)}
Dis=$1
DisX={cos($rad_ang)*$Dis}
DisY={sin($rad_ang)*$Dis}
shift $DisX,$DisY,0,0,$3,$4
#@cli rep_dupsdaxy: (eq. to rep_duplicate_by_shift_angle_distance_xy)
rep_dupsdaxy: rep_duplicate_by_shift_distance_angle_xy $*
#@cli rep_duplicate_by_shift_distance_angle_xy: keep_original={ 0 = remove_original | 1 = keep_original },_duplicates_count>=2,_distance>0,0<=_angle<=360,0<=_boundary_conditions<=3,_interpolation={ 0=nearest_neighbor | 1=linear }
#@cli : Default value: 'keep_original=0','boundary_conditions=3','interpolation=1'
rep_duplicate_by_shift_distance_angle_xy:
skip ${1=0},${5=3},${6=1}
if {$2<2} v + error "Invalid duplicate numbers!" fi
aang={360/$2}
repeat $2 +rep_sdaxy[0] $3,{$>*$aang+$4},$5,$6 done if {$1==0} rm[0] fi
#@cli rep_ncee: _distance>0,0<=_angle<=360,0<=_boundary_conditions<=3,_interpolation={ 0=nearest_neighbor | 1=linear },_contrast>=0,_process_alpha={ 0=do_not_process_alpha | 1=process_alpha },_color_space,_blend_mode,0<=_blend_opacity[%]<=1
#@cli : Default value: 'boundary_conditions=3','interpolation=1','contrast=1','process_alpha=1','color_space=0','blend_mode=1','blend_opacity=100%'
rep_ncee:
skip ${3=3},${4=1},${5=1},${6=1},${7=0},${8=1},${9=1}
-m "MergeChoice : $""=_mode" -MergeChoice "add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor","edges","error"
to_a
split_opacity
l[0]
if {$7==1} rgb2ryb
elif {$7==2} rgb2cmy
elif {$7==3} rgb2cmyk
elif {$7==4} rgb2hsi8
elif {$7==5} rgb2hsl8
elif {$7==6} rgb2hsv8
elif {$7==7} rgb2lab8
elif {$7==8} rgb2lch8
elif {$7==9} rgb2yiq8
elif {$7==10} rgb2yuv8
elif {$7==11} rgb2xyz8
fi
[0] l[1]
rep_dupsdaxy 0,2,$1,$2,$3,$4 tci={$!} f. "255-i"  add / $tci - 127.5 * {2*$5} + 127.5 cut 0,255
endl
if {$7!=3}
blend ${_mode{$8+1}},$9
if {$7==1} ryb2rgb
elif {$7==2} cmy2rgb
elif {$7==4} hsi82rgb
elif {$7==5} hsl82rgb
elif {$7==6} hsv82rgb
elif {$7==7} lab82rgb
elif {$7==8} lch82rgb
elif {$7==9} yiq82rgb
elif {$7==10} yuv82rgb
elif {$7==11} xyz82rgb
fi
elif {$7==3}
s c repeat 4 l[$>,{$!-1}] to_rgb blend ${_mode{$8+1}},$9 endl done a c cmyk2rgb
fi
endl
l[1]
if $6 rep_dupsdaxy 0,2,$1,$2,$3,$4 tai={$!} add / $tai fi
endl a c
#@cli rep_frblur : (eq. to rep_fragment_blur)
rep_frblur : rep_fragment_blur $*
#@cli rep_fragment_blur: color_space,keep_original={ 0 = remove_original | 1 = keep_original },_duplicates_count>=2,_distance>0,0<=_angle<=360,0<=_boundary_conditions<=3,_interpolation={ 0=nearest_neighbor | 1=linear }
#@cli : Default value: 'keep_original=0','boundary_conditions=3','interpolation=1'
rep_fragment_blur:
Op_F=$1
Op_SIO=$2
Op_D=$3
Op_Di={$4/100}
Op_A=$5
Op_B={$6+1}
Op_I=$7

repeat $! l[$>]
iw={w}
ih={h}
hypo={sqrt($iw*$iw+$ih*$ih)}
Op_NDi={($Op_Di*$hypo)/4}

to_a

split_opacity .

l[0-1]

if {$Op_F==1} rgb2ryb..
elif {$Op_F==2} rgb2cmyk..
elif {$Op_F==3} rgb2hsi8..
elif {$Op_F==4} rgb2hsl8..
elif {$Op_F==5} rgb2hsv8..
elif {$Op_F==6} rgb2lab8..
elif {$Op_F==7} rgb2lch8..
fi

/. {$Op_SIO+$Op_D} rv +f "0" rv


a[0,1] c
a[1,2] c

rep_dupsdaxy[1] $Op_SIO,$Op_D,$Op_NDi,$Op_A,$Op_B,$Op_I

ti=$!

rv
repeat {$ti-1} l[0,1] / 255 is={s} l[1] s c a[0-{$!-2}] c endl l[0] s c a[0-{$!-2}] c endl repeat 2 l[{$>*2+1}] repeat {$is-2} . done a c endl done f[2] "srcC=i#2;srcA=i#3;dstC=i#0;dstA=i#1;outA=srcA+dstA*(1-srcA);(!outA==0)?(srcC*srcA+dstC*dstA*(1-srcA))/outA:0" f[3] "srcA=i#3;dstA=i#1;srcA+dstA*(1-srcA)" to_gray[3] a[2,3] c k[2] * 255 endl
done

if {$Op_F==1} split_opacity ryb2rgb.. a c
elif {$Op_F==2} s c a[0-3] c  cmyk2rgb.. a c
elif {$Op_F==3} split_opacity hsi82rgb.. a c
elif {$Op_F==4} split_opacity hsl82rgb.. a c
elif {$Op_F==5} split_opacity hsv82rgb.. a c
elif {$Op_F==6} split_opacity lab82rgb.. a c
elif {$Op_F==7} split_opacity lch82rgb.. a c
fi

endl

l[1] rep_dupsdaxy $Op_SIO,$Op_D,$Op_NDi,$Op_A,$Op_B,$Op_I tai=$! add / $tai endl

split_opacity..
a[0,2] c k..
endl done
#@cli pal :
#@cli : Creates pre-made user-made palette or palette that are based off older system.
pal:
v - _gmic_s="$?" v +
_$0 $"*"
_pal:
v - mode="$1"
if {isnum("$1")} if {isint("$1")}
if {$1!=abs($1)} mode="i" else
mode=${arg\ 1+$1,bw,rgb,b_rgb,bw_rgb,cmy,cmyk,wcmyk,rgbcmy,1bitrgb,aurora,playpal,kens16,kens32,kens54,aap12,aap16,aap64,aap128,db8,db16,db32,db_iso22,edg8,edg16,edg32,edg36,edg64,xaiue,15pdx,cabana64,fant16,fant24,tf23,tfp39,faraway48,fleja_m,koni32,linearbasic,arcade29,arq16,blk36,cdbac,cgarne,cpcboy,dimwid23,4l,fzteth16,gzxp,island16,journey,nature55,nauris16,pear36,pineapple32,rosy42,sft15,spec12,starmancer,sup8,sweetie16,taffy16,todayland,zu32,enos16,equpix15,night16,simjpc16,acid15,battery24,crimso11,drz15,eggy15,jewel,polar11,boomboom,g8,matriax8c,nt1h,au15,au15y,jerrypie22,naji16,blessing,fairy,fuzz4,pastel,tui15,cave,psygnosia,marshmellow32,rabbit7,finlal11,ykb22,graveyard,steamlords,aaprad,daruda,rust6,xaiue_rad,firestorm,supernova7,nyx8,oil6,fornaxvoidi,fornaxvoidii,pixelwave,moon39,autochrome3,autochrome5,gb_d_1,gb_d_2,gb_bz,gb_easy,gb_arne,gb_pj,gb_kirokaze,gb_cyber,gb_grapefruit,gb_forest,gb_ice_cream,gb_rb,gb_choco,arne4,hal4,amiga2600ntsc,amiga2600pal,amiga2600secam,amiga7800mess,amiga7800,amstrad_cpc,apple2,cga,cga00,cga01,cga10,cga11,cga20,cga21,c64_pepto,c64_colodore,com_vic_20,colecovision,jmp,mac2,nes,pico_8,risc,samcoupe,mo5,vga,zx,gnome32,elc22,chip16,msx,deluxepaint,lms,msxp,vis}
fi fi fi
v + e[^-1] "Create palette '"$mode"' for pixel art or effect."$_gmic_s"." v -
_pal_$mode
_pal_i: if {$!==2} if {w#1==1||h#1==1} if {w#1>256||h#1>256} v + error "ERROR: There are no palette!" fi to_rgb. elif {w#0==1||h#0==1} if {w#0>256||h#0>256} v + error "ERROR: There are no palette!" fi rv to_rgb. else +autocrop _ia={w#2*h#2}  _ib={w#3*h#3} _ic={$_ia>$_ib} rm[^0-1] if {!$_ic} rv fi fx_extract_objects. 0,0,0,0,0,0,1 rm. if {h#1*w#1>255} v + error "ERROR: There are no palette!" fi if {h#1>w#1} rotate. 90 fi s. y,{h#1} autocrop. 0,0,0,0 a[^0] x to_rgb. fi else v + error "ERROR: You must have use only two images to use this command!" fi
_pal_autochrome3:(88,31,223^66,106,85^147,56,41)
_pal_autochrome5:(88,31,223,126,13^66,106,85,141,203^147,56,41,227,163)
_pal_rabbit7:(212,232,236,79,170,59,92^117,196,236,164,211,50,97^100,152,224,165,149,74,130)
_pal_nt1h:(255,172,70,21,34,66,101,143,189,171,139,86,56,255,237,222,194,75,138,188,228,255,156,94,57,25^255,246,198,137,47,93,144,185,223,209,171,106,58,241,198,153,94,0,0,19,54,154,216,150,83,21^255,147,87,104,70,105,139,172,204,210,191,137,99,141,96,60,34,59,71,52,54,112,252,221,192,127)
_pal_moon39:(126,159,188,42,42,44,38,131,52,36,54,33,40,26,54,32,71,125,88,76,61,56,63,21,113,112,104,127,101,53,128,103,66,40,36,17,104,137,39^177,211,221,129,106,90,103,204,166,75,105,65,79,51,61,63,71,219,110,103,104,96,112,84,184,181,172,205,169,119,209,178,129,98,84,54,179,221,72^213,249,244,152,152,122,103,194,196,103,73,89,107,70,84,86,76,206,103,108,110,98,122,80,161,157,156,173,154,105,174,155,124,107,103,82,156,181,97)
_pal_koni32:(0,11,22,34,43,48,52,73,164,255,242,204,245,166,153,115,77,70,140,242,255,179,112,64,31,33,39,65,109,137,187,255^0,10,21,38,64,101,168,242,255,242,165,122,64,58,83,55,42,52,46,97,168,223,165,124,80,62,47,69,112,139,189,255^0,13,36,64,87,102,112,90,99,64,63,71,37,58,72,88,73,106,184,218,212,255,250,255,204,166,102,88,120,140,191,255)
_pal_15pdx:(110,187,223,236,131,39,23,4,23,129,253,199,135,70,32^50,87,146,210,168,114,59,104,161,219,249,178,113,63,23^50,53,69,116,22,36,71,148,169,205,241,149,91,60,8)
_pal_island16:(13,79,130,197,240,251,255,190,123,116,65,50,42,125,193,232^8,43,91,145,189,223,249,187,178,173,128,83,35,56,108,153^13,36,49,84,119,155,228,178,78,187,160,95,73,64,91,115)
_pal_arcade29:(241,255,159,255,240,241,201,151,87,114,35,10,48,47,105,51,50,40,201,108,255,229,23,150,88,42,185,126,65^240,77,30,196,108,194,126,63,20,203,133,75,197,126,222,165,89,35,92,52,170,93,25,165,108,55,165,99,47^238,77,49,56,0,132,79,63,46,37,49,77,173,131,255,255,226,123,209,157,188,172,27,171,121,71,136,82,47)
_pal_cabana64:(0,167,103,71,48,58,90,195,241,253,255,255,240,224,178,130,255,255,169,109,69,104,149,218,242,255,255,255,221,192,144,96,74,210,163,97,51,63,97,143,210,242,218,150,57,34,52,34,16,105,162,113,67,44,8,27,91,182,209,170,76,28,13,10^0,154,84,53,32,22,38,104,110,164,226,216,157,105,78,51,255,252,128,71,45,11,28,72,118,175,245,118,57,34,12,1,74,204,146,84,47,13,24,75,145,237,255,218,174,116,58,20,16,132,188,159,86,50,67,116,190,255,255,255,212,131,57,37^0,95,31,19,26,3,11,10,3,20,44,135,81,38,44,20,255,219,90,52,37,118,188,221,255,252,246,147,57,20,71,25,74,243,212,118,58,118,148,236,255,255,254,255,255,255,241,120,16,156,197,147,85,51,57,74,97,140,204,216,148,147,111,99)
_pal_journey:(5,17,59,105,156,212,245,255,255,255,214,148,66,34,16,37,61,115,189,237,255,255,198,119,66,44,21,5,14,12,3,20,72,120,176,250,199,146,91,57,36,14,19,26,16,40,61,248,240,207,143,82,15,53,100,155,212,237,255,212,156,105,69,45^9,5,6,23,50,100,161,207,122,65,26,0,0,0,7,8,17,38,64,123,184,245,216,176,144,100,60,33,4,11,39,68,139,215,255,255,212,143,83,41,20,15,34,70,144,192,255,255,194,150,87,41,2,0,0,14,30,76,151,102,52,27,12,0^20,36,58,73,71,83,93,142,125,125,136,122,78,41,38,44,50,61,53,57,74,64,49,42,88,94,74,55,33,66,105,145,212,255,241,255,225,184,125,70,44,44,67,107,142,116,110,184,151,140,101,75,46,59,76,62,60,64,87,47,26,34,40,46)
_pal_nauris16:(140,88,62,154,215,245,192,100,228,157,210,112,126,52,23,31^143,69,33,99,155,237,199,125,148,48,100,55,196,133,67,14^174,99,55,72,125,186,65,52,58,59,113,127,193,157,75,28)
_pal_nature55:(27,254,226,168,105,255,231,190,122,208,151,90,255,235,205,104,37,27,123,56,41,37,94,32,38,48,163,120,84,239,182,116,67,255,234,175,117,235,177,227,177,116,62,223,156,97,42,184,117,82,253,204,145,93,56^20,147,83,36,27,191,130,83,50,128,78,48,201,138,224,178,125,78,236,170,119,68,215,150,98,51,204,141,88,161,108,68,47,178,109,64,34,113,65,196,142,100,63,221,170,123,78,216,157,106,245,193,134,91,56^30,90,34,36,40,137,90,64,28,88,73,63,92,6,66,41,44,68,191,145,126,108,239,205,171,134,255,222,192,206,190,141,101,178,157,127,74,113,92,176,142,127,100,154,116,71,50,209,169,152,241,190,146,110,76)
_pal_colecovision:(0,33,66,41,90,156,57,214,255,222,214,24,214,206,255^0,173,214,49,115,41,231,57,115,231,214,123,49,206,255^0,24,90,214,255,24,247,33,90,41,123,16,231,206,255)
_pal_fornaxvoidi:(122,117,112,108,103,99,94,89,85,80,76,71,66,62,57,53,47,55,63,70,78,86,93,101,109,116,124,132,139,147,155,162,0,7,13,20,26,32,39,45,52,58,64,71,77,84,90,96,240,224,208,192,176,160,144,128,112,96,80,64,48,32,16,0,255,242,230,218,206,194,181,169,157,145,133,120,108,96,84,72,243,231,219,208,196,185,173,161,150,138,127,115,103,92,80,69,255,255,255,255,255,255,255,255,224,192,160,128,96,64,48,32,216,196,176,157,137,117,98,78,58,39,19,0,0,0,0,0,255,238,221,204,187,170,153,136,119,102,85,68,51,34,17,0,0,5,9,13,18,22,26,30,35,39,43,47,52,56,60,64,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,238,221,204,187,170,153,136,119,102,85,68,51,34,17,0,0,16,31,46,61,76,91,106,122,137,152,167,182,197,212,227,255,242,229,217,204,192,176,160,128,96,80,64,48,40,32,16,166,178,189,200,211,222,233,244,255,218,182,145,109,72,36,0,227,211,196,181,166,151,136,121,105,90,75,60,45,30,15,0^37,42,47,51,56,60,65,70,74,79,83,88,93,97,102,106,222,214,206,198,190,182,174,166,158,150,142,134,126,118,110,102,204,195,186,177,168,160,151,142,133,124,116,107,98,89,80,72,240,233,226,220,213,206,200,193,186,180,173,166,160,153,146,140,255,242,230,218,206,194,181,169,157,145,133,120,108,96,84,72,142,136,130,124,118,112,106,100,94,88,82,76,70,64,58,53,216,194,172,150,128,96,64,0,0,0,0,0,0,0,0,0,216,196,176,157,137,117,98,78,58,39,19,0,0,0,0,0,43,40,38,36,34,32,30,28,25,23,21,19,17,15,13,11,0,5,9,13,18,22,26,30,35,39,43,47,52,56,60,64,255,240,225,210,195,180,165,150,136,121,106,91,76,61,46,32,160,157,155,153,151,149,147,145,142,140,138,136,134,132,130,128,0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,134,192,172,153,134,115,96,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,211,196,181,166,151,136,121,105,90,75,60,45,30,15,0^255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,235,242,249,255,255,255,255,255,255,255,255,255,255,255,255,255,204,208,211,215,218,221,225,228,232,235,238,242,245,249,252,255,240,233,226,220,213,206,200,193,186,180,173,166,160,153,146,140,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,224,192,160,128,96,64,48,32,255,247,240,232,225,217,210,202,195,187,180,173,145,118,91,64,255,246,238,229,221,212,204,195,187,178,170,161,153,144,136,128,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,240,225,210,195,180,165,150,136,121,106,91,76,61,46,32,255,246,238,229,221,212,204,195,187,178,170,161,153,144,136,128,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,255,255,255,255,255,255,255,232,208,192,128,96,80,64,48,255,223,191,159,127,95,63,31,0,10,19,28,37,46,55,64,255,240,225,210,195,180,165,150,136,121,106,91,76,61,46,32)
_pal_fornaxvoidii:(32,48,64,96,128,160,192,224,255,255,255,255,255,255,255,255,16,32,40,48,64,80,96,128,160,176,192,204,217,229,242,255,69,80,92,103,115,127,138,150,161,173,185,196,208,219,231,243,255,238,221,204,187,170,153,136,119,102,85,68,51,34,17,0,32,64,128,192,255,255,255,255,0,0,0,0,1,128,192,232,0,0,0,0,32,64,128,160,192,216,36,72,109,145,182,218,0,0,0,0,0,1,32,64,128,192,224,255,0,0,0,0,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255^0,0,0,0,0,0,0,0,0,64,96,128,150,172,194,216,0,0,0,0,0,0,0,0,0,48,96,115,134,153,172,192,53,58,64,70,76,82,88,94,100,106,112,118,124,130,136,142,154,155,156,158,159,161,162,163,165,166,168,169,170,172,173,175,0,0,0,0,0,128,192,232,32,64,128,192,255,255,255,255,0,0,0,0,32,64,128,160,192,216,0,0,0,0,0,0,32,64,128,192,224,255,32,64,128,192,224,255,25,51,76,102,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255^32,48,64,96,128,160,192,224,255,255,255,255,255,255,255,255,48,64,80,96,128,192,208,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,250,244,238,233,227,221,216,210,204,199,193,187,182,176,170,0,0,0,0,0,128,192,232,0,0,0,0,0,128,192,232,64,128,192,255,255,255,255,255,255,255,219,183,146,110,73,37,32,64,128,192,224,255,0,0,0,0,0,0,230,205,179,154,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255)
_pal_vga:(0,0,0,0,170,170,170,170,85,85,85,85,255,255,255,255,16,32,53,69,101,117,138,154,186,202,223,239,0,65,130,190,255,255,255,255,255,255,255,255,255,190,130,65,1,1,1,1,1,0,0,0,130,158,190,223,255,255,255,255,255,255,255,255,255,223,190,158,130,130,130,130,130,130,130,130,186,202,223,239,255,255,255,255,255,255,255,255,255,239,223,202,186,186,186,186,186,186,186,186,0,28,57,85,113,113,113,113,113,113,113,113,113,85,57,28,0,0,0,0,0,0,0,0,57,69,85,97,113,113,113,113,113,113,113,113,113,97,85,69,57,57,57,57,57,57,57,57,81,89,97,105,113,113,113,113,113,113,113,113,113,105,97,89,81,81,81,81,81,81,81,81,0,16,32,49,65,65,65,65,65,65,65,65,65,49,32,16,0,0,0,0,0,0,0,0,32,40,49,57,65,65,65,65,65,65,65,65,65,57,49,40,32,32,32,32,32,32,32,32,45,49,53,61,65,65,65,65,65,65,65,65,65,61,53,49,45,45,45,45,45,45,45,45^0,0,170,170,0,0,85,170,85,85,255,255,85,85,255,255,16,32,53,69,101,117,138,154,186,202,223,239,0,0,0,0,0,0,0,0,0,65,130,190,255,255,255,255,255,255,255,255,255,190,130,65,130,130,130,130,130,130,130,130,130,158,190,223,255,255,255,255,255,255,255,255,255,223,190,158,186,186,186,186,186,186,186,186,186,202,223,239,255,255,255,255,255,255,255,255,255,239,223,202,0,0,0,0,0,0,0,0,0,28,57,85,113,113,113,113,113,113,113,113,113,85,57,28,57,57,57,57,57,57,57,57,57,69,85,97,113,113,113,113,113,113,113,113,113,97,85,69,81,81,81,81,81,81,81,81,81,89,97,105,113,113,113,113,113,113,113,113,113,105,97,89,0,0,0,0,0,0,0,0,0,16,32,49,65,65,65,65,65,65,65,65,65,49,32,16,32,32,32,32,32,32,32,32,32,40,49,57,65,65,65,65,65,65,65,65,65,57,49,40,45,45,45,45,45,45,45,45,45,49,53,61,65,65,65,65,65,65,65,65,65,61,53,49^0,170,0,170,0,170,0,170,85,255,85,255,85,255,85,255,16,32,53,69,101,117,138,154,186,202,223,239,255,255,255,255,255,190,130,65,0,0,0,0,0,0,0,0,0,65,130,190,255,255,255,255,255,255,255,255,255,223,190,158,130,130,130,130,130,130,130,130,130,158,190,223,255,255,255,255,255,255,255,255,255,239,223,202,186,186,186,186,186,186,186,186,186,202,223,239,255,255,255,255,113,113,113,113,113,85,57,28,0,0,0,0,0,0,0,0,0,28,57,85,113,113,113,113,113,113,113,113,113,97,85,69,57,57,57,57,57,57,57,57,57,69,85,97,113,113,113,113,113,113,113,113,113,105,97,89,81,81,81,81,81,81,81,81,81,89,97,105,113,113,113,113,65,65,65,65,65,49,32,16,0,0,0,0,0,0,0,0,0,16,32,49,65,65,65,65,65,65,65,65,65,57,49,40,32,32,32,32,32,32,32,32,32,40,49,57,65,65,65,65,65,65,65,65,65,61,53,49,45,45,45,45,45,45,45,45,45,49,53,61,65,65,65,65)
_pal_amiga7800mess:(1,46,61,89,119,132,160,183,205,216,221,224,234,240,246,255,255,254,255,254,255,255,255,255,255,255,216,187,153,119,84,65,71,114,160,179,200,228,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,243,231,212,191,176,157,122,95,75,127,179,200,223,237,251,252,254,255,255,255,255,255,255,255,254,255,255,255,255,251,239,228,215,202,187,170,149,129,103,74,73,92,101,122,146,157,166,177,188,196,206,213,218,222,225,230,205,192,176,159,152,144,128,113,101,90,79,68,37,9,6,5,12,32,54,70,87,97,109,123,137,145,157,167,178,187,195,211,208,195,175,155,147,141,112,86,77,73,51,29,29,30,29,29,2,2,1,2,2,2,1,1,27,62,101,118,138,155,177,199,208,200,182,162,134,125,115,82,78,55,40,25,15,4,0,0,22,28,35,40,46,58,71,81,93,113,133,141,151,165,184,185,242,232,219,206,194,184,171,158,139,121,108,96,72,69,57,44,70,76,85,109,144,172,194,209,223,231,238,247,253,255,255,255,254,254,254,254,252,249,237,225,208,191,181,171,141,113,88,65^1,46,61,89,119,132,160,183,205,216,221,224,234,240,246,255,255,255,249,244,230,216,208,197,171,145,128,104,79,55,40,32,25,30,37,57,81,106,130,140,153,174,196,197,198,214,228,231,218,209,194,178,164,152,138,121,110,98,78,54,47,43,36,31,23,26,29,33,37,60,82,96,112,127,144,158,170,185,200,202,184,175,165,157,141,126,114,103,90,77,61,45,24,3,1,1,3,4,14,35,59,69,79,90,101,109,118,131,144,156,170,182,211,203,190,178,170,160,146,131,117,104,90,76,61,48,38,30,8,28,49,66,83,93,105,119,133,141,152,164,175,184,193,209,237,233,228,223,220,216,198,182,169,154,134,113,92,73,56,41,76,93,112,132,153,171,188,207,220,225,231,234,237,240,243,246,255,255,255,255,236,227,217,205,186,164,147,127,117,107,84,72,64,83,102,120,140,152,165,175,187,207,227,235,245,255,255,255,255,252,239,225,214,204,191,178,159,141,127,113,86,82,68,53,58,63,70,88,118,140,161,176,190,198,205,218,230,242,249,249,212,203,198,193,183,173,160,147,133,119,100,81,58,37,31,26^1,46,61,89,119,132,160,183,205,216,221,224,234,240,246,255,172,153,120,86,81,77,60,29,29,30,23,24,16,6,1,0,4,17,30,33,34,32,31,37,45,56,84,89,109,136,162,171,209,196,179,158,139,125,105,85,75,63,43,36,15,16,13,14,4,13,23,25,28,57,85,97,99,126,143,159,173,190,206,222,236,234,232,230,226,218,206,195,182,169,154,137,116,96,75,55,109,136,145,166,190,201,210,221,232,240,249,255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,237,222,213,202,165,131,121,141,163,179,196,207,218,232,247,254,255,255,254,255,255,255,255,254,254,254,254,255,254,255,236,217,207,199,172,147,119,92,90,111,132,156,182,202,221,244,255,254,255,254,255,255,255,254,208,200,182,162,134,125,115,82,77,55,39,25,15,4,0,0,0,0,1,1,0,12,25,35,47,67,87,95,105,150,151,151,171,121,108,84,83,73,60,47,28,10,1,0,0,0,0,0,9,10,9,9,8,11,32,47,61,69,77,101,125,164,197,212,152,131,113,96,92,89,78,68,58,48,39,31,19,8,5,3)
_pal_amiga7800:(0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,255,247,230,213,196,179,162,145,128,111,94,77,60,43,26,49,66,83,100,117,134,151,168,185,202,219,236,253,255,255,255,255,255,255,255,249,232,215,198,181,164,147,130,113,96,79,62,63,80,97,114,131,148,165,182,199,216,233,250,255,255,255,255,255,255,255,255,238,221,204,187,170,153,136,119,102,85,68,51,29,46,64,81,98,115,132,149,166,183,200,217,233,251,255,255,255,240,223,206,189,172,155,138,121,104,87,70,53,36,19,2,0,0,8,25,42,59,76,93,110,127,144,161,178,195,212,229,206,189,172,155,138,121,104,87,70,53,36,19,2,0,0,0,0,0,0,0,6,23,40,57,74,91,108,125,142,159,176,193,192,175,158,141,124,107,90,73,56,39,22,5,0,0,0,0,0,0,0,0,16,33,50,67,84,101,118,135,152,169,186,203,225,208,191,174,157,140,123,106,89,72,55,38,21,4,0,0,0,14,31,48,65,82,99,116,133,150,167,184,201,218,235,252,255,255,246,229,212,195,178,161,144,127,110,93,76,59,42,25^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,247,245,228,211,194,177,160,143,126,109,92,75,58,41,24,7,0,6,23,40,57,74,91,108,125,142,159,176,193,210,227,244,229,212,195,178,161,144,127,110,93,76,59,42,25,8,0,0,0,0,0,15,32,49,66,83,100,117,134,151,168,185,202,219,216,199,182,165,148,131,114,97,80,63,46,29,12,0,0,0,0,0,0,16,33,50,67,84,101,118,135,152,169,186,203,220,232,215,198,181,164,147,130,113,96,79,62,45,28,11,0,0,0,10,27,44,61,78,95,112,129,146,163,180,197,214,231,248,255,248,231,214,197,180,163,146,129,112,95,78,61,44,27,10,26,43,60,77,94,111,128,145,162,179,196,213,230,247,255,255,255,255,255,240,223,206,189,172,155,138,121,104,87,70,53,36,39,56,73,90,107,124,141,158,175,192,209,226,243,255,255,255,255,255,255,239,222,205,188,171,154,137,120,103,86,69,52,35,23,40,57,74,91,108,125,142,159,176,193,210,227,244,255,255,255,245,228,211,194,177,160,143,126,109,92,75,58,41,24,7^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,151,131,111,94,77,60,43,26,9,0,0,0,0,0,0,0,0,0,0,0,0,0,10,27,44,61,78,95,112,133,156,178,218,196,174,152,131,115,98,81,64,47,30,13,0,0,0,0,3,15,27,43,60,77,94,111,128,145,162,179,200,222,239,244,243,238,233,228,228,211,194,177,160,143,126,109,92,76,65,53,92,104,116,132,149,166,183,200,217,234,235,235,236,235,239,244,248,247,247,247,247,247,247,242,225,208,191,174,157,140,125,113,104,124,144,161,178,195,212,229,246,255,255,255,255,255,255,255,255,255,255,255,255,255,245,228,211,194,177,160,143,121,99,77,38,60,82,104,124,141,158,175,192,209,226,243,255,255,255,255,253,241,229,213,196,179,162,145,128,111,94,77,56,34,16,11,12,17,22,27,27,44,61,78,95,112,129,146,163,179,191,203,163,151,139,122,105,88,71,54,37,20,19,19,19,19,16,10,7,8,8,8,8,8,8,13,30,47,64,81,98,115,130,142,150,130,111,94,77,60,43,26,9,0,0,0,0,0,0,0)
_pal_deluxepaint:(0,170,101,223,207,223,207,138,81,65,32,0,0,0,0,0,48,69,69,48,138,69,207,223,211,178,146,113,81,65,32,0,227,195,178,146,130,0,0,0,0,0,113,81,65,48,32,0,0,0,0,0,0,243,227,211,195,178,162,243,227,211,211,195,178,178,162,146,130,113,97,81,65,146,130,113,97,81,65,48,32,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,227,195,178,146,227,195,178,146,130,97,81,65,243,243,243,243,243,243,243,243,243,243,227,227,211,211,195,227,195,178,146,130,113,81,65,178,178,162,162,146,211,195,178,162,146,130,113,97,130,130,113,113,97,97,81,211,178,146,130,97,65,32,1,65,48,32,1,0,0,0,0,243,243,130,130,130,178,243,0,0,0,0,0,0,195,195,195,195,195,146,113,65,211,178,146,113,81,65,32,1,32,32,32,32,32,32,32,32,1,0,0,0,0,0,0,0,81,130,178,195,195,195,243^0,170,101,223,48,138,223,138,178,178,162,146,130,113,97,81,138,223,223,138,138,48,48,138,211,178,146,130,97,65,32,0,227,195,178,146,130,0,0,0,0,0,113,81,65,48,32,0,0,0,0,0,0,0,0,0,0,0,0,211,178,146,113,81,65,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,178,146,113,81,65,32,178,146,113,81,65,32,0,162,146,130,113,97,97,81,65,0,0,0,0,0,0,0,0,243,243,243,243,243,243,243,243,227,211,195,178,178,162,146,211,195,162,146,130,97,81,65,130,113,113,97,81,243,243,243,243,227,195,178,146,65,48,48,32,32,16,16,243,243,243,243,243,243,243,243,16,0,0,227,211,195,178,162,178,243,243,243,130,130,130,146,130,113,97,81,65,32,65,113,146,195,195,195,195,243,243,243,243,243,243,243,243,195,195,195,195,162,113,81,32,227,195,178,146,130,113,81,65,32,32,32,32,32,32,243^0,170,101,223,69,69,69,48,243,243,243,243,227,195,178,146,69,69,207,207,223,207,207,207,243,243,243,243,243,243,243,243,227,195,178,146,130,227,211,195,178,162,113,81,65,48,32,146,130,113,97,81,65,0,0,0,0,0,0,243,243,243,243,243,243,243,243,0,0,0,0,0,0,227,195,178,146,130,113,81,65,211,178,146,113,81,65,32,243,243,243,243,243,243,243,81,65,32,0,0,0,0,0,227,195,178,146,130,113,81,65,211,178,146,113,81,65,32,0,211,195,178,162,146,146,130,0,0,0,0,0,0,0,0,113,97,97,81,65,81,65,32,0,0,0,0,0,48,48,32,32,16,16,16,211,178,146,113,81,65,32,0,0,0,0,0,0,0,0,0,130,130,130,243,243,243,243,0,0,0,0,0,0,32,32,32,32,32,32,32,32,243,243,243,243,243,243,243,243,48,81,130,178,195,195,195,195,227,195,178,146,130,113,81,65,195,195,195,162,130,81,243)
_pal_samcoupe: (0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255,0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255^0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255^0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255,0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255,0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255,0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255)
_pal_polar11: (10,171,209,245,245,135,153,95,51,45,47^10,41,105,202,241,140,194,148,157,98,43^10,41,31,47,237,129,78,72,181,150,107)
_pal_rust6: (35,113,165,225,240,255^0,47,73,136,187,226^0,48,50,102,156,198)
_pal_cave: (0,16,54,68,143,199,156,245^0,0,29,63,86,144,228,245^0,41,35,79,179,101,199,245)
_pal_fairy: (14,210,77,255,75,131,112,173^48,0,217,230,49,96,143,184^166,0,40,0,89,111,77,112)
_pal_mo5: (0,187,255,221,238,255,221,0,119,0,187,255,255,221,0,119^0,187,0,119,187,255,221,255,221,255,255,255,0,119,0,119^0,187,0,119,0,0,119,0,119,255,255,255,255,238,255,221)
_pal_xaiue: (252,135,8,55,91,159,107,179,175,77,75,181,229,224,112,61,43,29,109,182,206,243^250,116,6,46,77,126,205,214,176,140,76,69,139,218,176,127,64,24,67,102,152,215^228,105,11,35,33,43,99,239,233,211,183,55,55,44,60,79,75,62,105,166,155,189)
_pal_pixelwave: (28,82,136,166,145,117,90,82,123,171,213,255^5,14,23,37,59,82,105,131,163,196,225,255^41,117,194,249,255,255,255,255,255,255,255,255)
_pal_arne4: (0,0,184,175^0,81,75,216^0,156,18,79)
_pal_aaprad: (7,33,82,138,193,234,160,83,66,89,107,184,121,87,148^5,25,58,107,156,219,179,124,60,111,185,170,112,98,91^5,25,42,62,77,116,53,68,86,175,182,176,126,122,40)
_pal_daruda: (222,15,35,64,86,112,109,129,146,159,176,185,191,207,213,224,232,232,231,231,232,231^229,14,10,0,0,13,41,50,61,74,83,105,129,146,166,188,207,227,232,160,169,181^217,19,41,45,44,26,28,33,19,20,2,21,9,19,39,37,80,111,141,121,163,198)
_pal_xaiue_rad: (241,222,199,140,124,108,69,44,106,173,222,163,204,123,73,22,45,62,118,169,161,95^239,215,164,123,90,71,56,30,103,139,213,121,188,108,71,18,47,79,130,172,148,102^183,92,57,38,38,43,29,18,58,69,170,99,142,92,63,18,59,128,158,183,143,121)
_pal_bw: (0,255^0,255^0,255)
_pal_rgb: (255,0,0^0,255,0^0,0,255)
_pal_rgbcmy: (255,0,0,0,255,255^0,255,0,255,255,0^0,0,255,255,0,255)
_pal_b_rgb: (0,255,0,0^0,0,255,0^0,0,0,255)
_pal_bw_rgb: (0,255,255,0,0^0,255,0,255,0^0,255,0,0,255)
_pal_cmy: (255,0,255^0,255,255^255,255,0)
_pal_cmyk: (0,255,0,255^0,0,255,255^0,255,255,0)
_pal_wcmyk: (0,255,0,255,255^0,255,255,0,255^0,255,255,255,0)
_pal_1bitrgb: (255,0,255,0,0,0,255,255^255,0,0,255,0,255,0,255^255,0,0,0,255,255,255,0)
_pal_aurora:(0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,0,63,0,191,129,0,63,0,15,127,191,245,253,255,255,255,191,127,85,127,191,255,255,255,255,191,127,0,63,0,175,0,0,75,188,203,166,126,110,126,160,192,208,225,235,245,246,245,127,87,115,142,171,199,227,248,227,196,143,115,59,65,115,143,162,181,199,218,237,199,171,142,115,88,70,25,35,59,80,59,87,115,100,143,162,225,180,171,135,80,15,30,35,59,100,143,171,199,190,171,168,143,87,87,59,15,31,59,73,87,115,118,143,171,208,227,171,143,115,87,60,70,114,143,171,171,235,255,227,225,215,199,200,195,75,50,40,64,98,165,218,213,255,245,255,246,255,215,218,180,160,95,83,98,140,172,177,230,255,255,200,155,150,115,106,60,40,32,12,20,10,20,125,75,0,5,28,18,18,6,0,45,60,106,145,85,125,8,16,5,22,15,0,50,0,24,35,105,74,144,90,190,120,74,98,60,16,0,35,12,80,96,135,156,189,185,215,215,248,230,255,218,189,189,140,90,100,65,50,85,160,200,255,255,250,252,230,189,152,145^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,127,191,255,255,129,0,63,0,15,0,63,0,129,192,129,0,63,0,20,63,127,127,191,255,255,191,127,127,191,255,255,191,127,125,175,170,160,148,130,110,105,120,138,155,170,185,200,225,0,59,65,85,115,143,171,210,199,158,115,87,45,65,115,143,162,181,199,218,237,227,199,190,143,125,80,30,80,87,100,115,143,171,192,199,216,248,238,227,180,125,105,45,65,115,171,199,227,241,210,199,185,171,143,115,87,25,31,59,73,87,110,118,143,171,218,227,143,87,87,59,35,50,64,87,87,115,172,220,199,185,160,143,125,90,40,22,10,24,24,20,32,82,60,90,98,189,165,155,110,90,75,50,80,98,128,148,177,213,213,234,255,240,220,200,168,110,52,70,92,150,215,230,255,240,197,180,140,56,152,196,222,235,254,255,235,230,215,222,156,90,44,55,74,100,82,106,120,157,164,176,197,185,110,90,65,60,28,16,16,33,16,16,50,65,98,145,165,195,198,115,82,32,41,16,20,24,20,0,10,25,25,0,80,106,160,58,30,16,52,20^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,127,191,255,255,255,255,191,127,80,127,191,245,255,203,129,0,63,0,20,0,63,0,129,191,0,63,0,0,63,0,175,255,255,200,192,137,144,148,135,96,95,114,116,125,140,155,175,210,255,59,60,85,115,143,171,218,171,115,87,59,31,35,59,87,85,114,143,171,199,171,143,85,87,62,50,15,55,59,80,73,87,115,130,143,162,250,202,197,142,95,70,35,70,115,171,199,227,241,240,227,220,199,199,143,115,45,59,87,115,143,170,202,199,227,248,255,199,199,143,115,60,70,114,143,171,171,225,245,227,210,190,185,160,145,55,35,30,17,0,10,16,74,10,50,98,49,60,15,10,0,5,20,10,0,90,0,10,90,16,74,65,70,25,5,5,20,5,8,12,5,10,10,115,90,20,80,78,50,128,145,106,168,165,205,255,255,240,213,222,92,82,125,156,150,246,189,220,195,255,255,255,250,240,255,246,245,218,189,148,72,176,208,210,255,255,255,255,250,252,255,255,224,255,197,190,123,100,98,70,55,130,120,191,197,185,140,120,57,77,55)
_pal_playpal: (0,31,23,75,255,27,19,11,7,47,35,23,15,79,71,63,255,247,243,235,231,223,219,211,203,199,191,187,179,175,167,163,155,151,143,139,131,127,119,115,107,103,95,91,83,79,71,67,255,255,255,255,255,255,255,255,255,247,239,231,223,215,207,203,191,179,171,163,155,143,135,127,119,107,95,83,75,63,51,43,239,231,223,219,211,203,199,191,183,179,171,167,159,151,147,139,131,127,119,111,107,99,91,87,79,71,67,59,55,47,39,35,119,111,103,95,91,83,75,67,63,55,47,39,31,23,19,11,191,183,175,167,159,155,147,139,131,123,119,111,103,95,87,83,159,143,131,119,103,91,79,67,123,111,103,91,83,71,63,55,255,235,215,195,175,155,135,115,255,255,255,255,255,255,255,255,239,227,215,203,191,179,167,155,139,127,115,103,91,231,199,171,143,115,83,55,27,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,243,235,223,215,203,195,183,175,255,255,255,255,255,255,255,167,159,147,135,79,67,55,47,0,0,0,0,0,0,255,255,255,255,207,159,111,167^0,23,15,75,255,27,19,11,7,55,43,31,23,59,51,43,183,171,163,151,143,135,123,115,107,99,91,87,79,71,63,59,51,47,43,35,31,27,23,19,15,11,7,7,7,0,0,0,235,227,219,211,207,199,191,187,179,171,163,155,147,139,131,127,123,115,111,107,99,95,87,83,79,71,67,63,55,47,43,35,239,231,223,219,211,203,199,191,183,179,171,167,159,151,147,139,131,127,119,111,107,99,91,87,79,71,67,59,55,47,39,35,255,239,223,207,191,175,159,147,131,115,99,83,67,51,35,23,167,159,151,143,135,127,123,115,107,99,95,87,83,75,67,63,131,119,107,95,83,71,59,51,127,115,107,99,87,79,71,63,255,219,187,155,123,91,67,43,219,187,155,123,95,63,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,199,171,143,115,83,55,27,0,0,0,0,0,0,0,0,235,215,199,179,163,143,127,115,111,103,95,87,79,71,67,255,255,255,255,255,255,255,63,55,47,35,59,47,35,27,0,0,0,0,0,0,159,231,123,0,0,0,0,107^0,11,7,75,255,27,19,11,7,31,15,7,0,43,35,27,183,171,163,151,143,135,123,115,107,99,91,87,79,71,63,59,51,47,43,35,31,27,23,19,15,11,7,7,7,0,0,0,223,211,199,187,179,167,155,147,131,123,115,107,99,91,83,79,75,71,67,63,59,55,51,47,43,39,35,31,27,23,19,15,239,231,223,219,211,203,199,191,183,179,171,167,159,151,147,139,131,127,119,111,107,99,91,87,79,71,67,59,55,47,39,35,111,103,95,87,79,71,63,55,47,43,35,27,23,15,11,7,143,135,127,119,111,107,99,91,87,79,75,67,63,55,51,47,99,83,75,63,51,43,35,27,99,87,79,71,59,51,43,39,115,87,67,47,31,19,7,0,219,187,155,123,95,63,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,227,203,179,155,131,107,83,219,187,155,123,91,59,27,23,15,15,11,7,0,0,0,215,179,143,107,71,35,0,0,0,0,0,39,27,19,11,71,59,47,35,23,11,67,75,255,255,207,155,107,107)
_pal_db8: (0,85,100,215,80,100,230,220^0,65,105,115,140,185,200,245^0,95,100,85,215,100,110,255)
_pal_db16: (20,68,48,78,133,52,208,117,89,210,133,109,210,109,218,222^12,36,52,74,76,101,70,113,125,125,149,170,170,194,212,238^28,52,109,78,48,36,72,97,206,44,161,44,153,202,94,214)
_pal_db32: (0,34,69,102,143,223,217,238,251,153,106,55,75,82,50,63,48,91,99,95,203,255,155,132,105,89,118,172,217,215,143,138^0,32,40,57,86,113,160,195,242,229,190,148,105,75,60,63,96,110,155,205,219,255,173,126,106,86,66,50,87,123,151,111^0,52,60,49,59,38,102,154,54,80,48,110,47,36,57,116,130,225,255,228,252,255,183,135,106,82,138,50,99,186,74,48)
_pal_db_iso22: (12,76,112,188,206,228,144,105,77,38,44,60,85,116,240,207,182,132,85,116,107,147^8,65,80,95,145,218,196,142,97,50,75,115,141,186,250,182,124,90,84,102,123,147^22,56,58,78,72,108,70,52,60,60,115,115,222,234,255,144,116,120,97,88,137,136)
_pal_edg8: (253,211,218,230,40,45,123,27^253,39,125,218,198,147,83,28^248,52,34,41,65,221,173,51)
_pal_edg16: (228,184,116,63,158,229,251,255,99,50,25,79,175,255,44,4^166,111,63,40,40,59,146,231,198,115,61,103,191,255,232,132^114,80,57,50,53,68,43,98,77,69,63,129,210,255,244,209)
_pal_edg32: (190,215,234,228,184,115,62,162,228,247,254,254,99,62,38,25,18,0,44,255,192,139,90,58,38,24,255,104,181,246,232,194^74,118,212,166,111,62,39,38,59,118,174,231,199,137,92,60,78,153,232,255,203,155,105,68,43,20,0,56,80,117,183,133^47,67,170,114,80,57,49,51,68,34,52,97,77,72,66,62,137,219,245,255,220,180,136,102,68,37,68,108,136,122,150,105)
_pal_edg36: (219,163,103,78,57,38,20,123,80,46,26,15,13,15,14,19,65,240,229,197,148,98,70,151,229,247,251,254,237,196,120,53,77,127,180,227^224,172,112,83,58,36,16,207,155,106,69,39,47,77,130,178,243,210,174,129,85,53,33,67,112,172,223,151,82,44,31,20,35,59,94,141^231,190,139,113,86,58,32,92,75,66,59,56,109,163,206,242,252,175,120,88,66,48,31,42,40,55,107,155,89,54,44,40,82,134,179,214)
_pal_edg64:
(255,19,27,39,61,93,133,180,255,199,146,101,66,42,26,14,28,57,93,138,191,230,246,249,237,224,198,142,255,237,255,255,255,211,153,90,51,30,19,12,0,0,0,0,12,148,253,243,219,122,48,12,3,59,98,147,202,200,246,245,234,196,137,87^0,19,27,39,61,93,133,180,255,207,161,115,76,47,25,7,18,31,44,72,111,156,202,230,171,116,69,37,80,118,162,200,235,252,230,197,152,111,76,46,57,105,152,205,241,253,210,137,63,9,3,2,25,20,36,56,82,80,129,85,50,36,30,28^64,19,27,39,61,93,133,180,255,221,185,146,110,78,50,27,28,33,40,54,74,105,159,207,80,56,36,29,0,20,20,37,87,126,95,79,75,80,76,68,109,170,220,249,255,255,237,245,253,250,217,147,63,67,97,143,201,134,135,93,60,48,43,39)
_pal_graveyard: (133,163,190,138,118,27,48,69,91,117,143,166,141,118,101,79,108,123,131,159,189^122,138,181,105,91,26,45,60,77,99,122,147,127,116,104,85,111,132,135,168,201^104,121,144,102,98,31,51,73,94,118,141,160,152,136,111,79,101,122,152,179,206)
_pal_marshmellow32:
(43,58,87,140,63,85,118,164,89,115,140,184,193,175,144,113,60,84,161,182,226,178,124,75,60,78,110,143,32,35,45,94^63,83,121,166,62,87,127,171,50,65,80,122,188,164,123,85,60,74,98,130,181,178,124,80,58,60,77,97,65,91,128,179^65,86,125,151,32,53,69,121,52,65,77,102,172,145,103,74,60,68,59,65,95,178,124,83,63,92,126,154,91,124,166,188)
_pal_psygnosia: (0,27,54,68,82,100,115,119,158,203,224,162,0,8,84,81^0,30,39,63,82,100,97,120,164,232,139,50,51,74,106,108^0,41,71,65,76,124,80,91,167,247,121,78,8,60,0,191)
_pal_blessing: (116,150,247,255,216^86,251,255,179,191^155,199,174,203,216)
_pal_steamlords:  (33,58,79,161,119,119,96,59,23,47,67,79,101,124,160,192^59,96,119,159,116,92,59,33,14,33,58,82,115,148,185,209^37,74,84,124,79,79,58,55,25,59,96,119,140,161,186,204)
_pal_starmancer: (27,41,31,37,42,46,50,29,43,71,105,136,170,222,52,81,120,162,190,233,250,77,128,186,228,234,255,255,10,13,7,10,14,8,8,16,21,18,14,12,18,33,38,64,101,132,168,200,221,9,25,83^32,51,68,97,129,162,187,24,32,45,60,70,86,115,19,25,32,40,53,69,106,36,66,95,137,178,227,245,35,64,97,128,158,200,231,32,50,76,112,157,203,233,41,65,106,141,176,205,227,7,26,85^55,98,125,165,203,235,248,38,55,88,129,160,185,223,26,34,41,40,34,37,57,22,39,28,20,8,69,108,31,53,70,87,94,116,123,48,66,93,121,148,175,193,51,76,115,144,179,207,227,17,35,94)
_pal_matriax8c:  (240,250,16,0,210,160,115,16^240,200,200,160,64,105,100,24^220,0,64,200,64,75,100,32)
_pal_equpix15:  (82,42,62,132,56,92,16,178,212,85,128,236,139,255,255^60,42,84,84,96,122,16,126,78,168,172,138,208,204,248^78,58,66,92,124,86,36,86,82,148,64,75,186,104,192)
_pal_linearbasic:  (14,95,153,220,247,159,98,143,197,238,252,218,250,151,75,61,49,65,73,114,86,89,71,129,194,240,253,211,170,119,72^12,45,57,74,134,41,35,64,96,142,203,78,203,218,167,115,65,112,167,214,152,86,53,86,120,179,247,191,141,92,59^12,86,112,123,151,78,47,41,37,46,163,56,62,63,71,79,82,137,144,206,204,189,121,170,208,221,237,169,122,85,58)
_pal_oil6: (39,73,139,198,242,251^39,77,109,159,211,245^68,126,156,165,171,239)
_pal_pear36:  (94,140,186,242,255,207,143,60,61,50,50,71,75,77,102,255,194,126,96,67,39,62,87,150,227,255,255,235,176,115,66,90,128,189,255,255^49,63,97,166,228,255,222,163,110,62,41,59,91,166,255,255,194,126,96,67,39,35,41,66,105,181,145,86,48,39,36,38,54,72,107,181^91,93,86,94,120,112,93,112,112,79,71,120,171,255,227,235,209,143,112,79,54,71,75,83,86,112,102,75,92,92,69,94,107,130,151,181)
_pal_nes:  (0,252,248,188,124,164,60,0,0,184,104,0,0,216,152,104,68,248,248,216,148,248,248,228,168,240,248,248,168,252,252,228,136,248,248,172,80,216,184,0,0,184,88,0,0,184,88,0,0,0,0,0,0,248,120^0,252,248,188,124,228,188,120,0,184,136,88,0,184,120,68,40,184,120,0,0,164,88,0,0,208,120,56,16,224,160,92,20,216,184,124,48,248,248,184,120,248,216,168,104,248,248,168,88,252,232,136,64,216,120^0,252,248,188,124,252,252,248,252,248,252,248,188,248,248,252,188,248,248,204,132,192,152,88,32,176,88,0,0,168,68,16,0,120,0,0,0,120,24,0,0,184,84,0,0,216,152,68,0,252,216,136,88,248,120)
_pal_boomboom: (0,36,255,190,68,49,27^0,36,255,38,137,162,38^0,35,255,51,26,242,50)
_pal_fuzz4: (48,255,0,255^35,55,250,253^135,150,172,175)
_pal_supernova7: (26,61,84,119,167,207,255^8,32,50,58,82,120,206^14,59,70,77,82,98,156)
_pal_rosy42:  (33,59,125,171,207,240,255,200,99,59,47,40,27,43,58,76,79,146,245,223,163,104,64,44,20,75,105,156,204,255,255,255,230,173,120,79,41,61,82,143,189,255^24,32,56,81,117,181,238,212,171,125,87,53,31,43,63,104,164,232,255,224,167,111,73,53,24,29,36,42,47,82,194,137,69,47,29,29,29,41,51,77,106,174^27,39,51,48,43,65,131,93,63,79,83,64,33,69,94,133,184,192,232,232,194,153,115,77,46,82,100,112,123,119,161,51,57,69,79,76,43,54,63,87,98,112)
_pal_blk36:  (0,18,41,70,107,144,193,255,255,229,193,140,102,63,41,65,100,140,185,165,90,65,53,54,10,15,20,34,66,140,255,255,204,135,216,255^0,23,50,75,116,158,217,255,204,149,106,75,51,35,23,40,52,81,145,230,185,133,74,39,42,74,102,137,188,255,224,150,82,42,56,104^0,61,104,140,178,221,242,255,208,159,125,99,75,60,76,102,153,204,242,255,229,216,178,127,51,76,91,110,127,155,145,95,80,56,67,102)
_pal_lms:  (0,126,190,255,126,254,4,6,255,126,0,0,126,254,4,6^0,126,190,255,0,0,126,255,255,126,0,0,0,0,126,255^0,126,190,255,0,0,0,4,4,0,126,255,126,255,126,255)
_pal_vis: (0,70,120,180,220,255,153,156,237,255,255,229,255,245,255,255,168,211,34,157,0,153,77,112,47,84,111,181^0,70,120,180,220,255,0,90,28,163,126,170,194,228,242,249,230,249,177,187,183,217,109,154,54,109,49,165^0,70,120,180,220,255,48,60,36,177,0,122,14,156,0,189,29,188,76,97,239,234,243,209,153,142,152,213)
_pal_gnome32:  (234,186,128,86,197,131,93,68,224,193,136,102,173,136,98,73,157,117,75,49,239,224,179,130,223,153,238,209,70,38,255,0^232,181,125,82,210,166,117,86,182,102,70,56,167,127,91,64,184,144,105,78,224,195,145,102,66,0,214,148,160,119,255,0^227,171,116,72,200,127,85,50,175,90,49,34,200,163,129,102,210,174,131,108,205,158,105,71,30,0,128,12,70,38,255,0)
_pal_taffy16:  (34,98,163,250,255,255,220,63,68,43,167,255,245,219,166,54^37,117,192,255,171,108,67,72,141,219,245,235,137,75,61,53^51,186,230,252,123,122,91,194,231,114,71,51,49,61,87,77)
_pal_enos16:  (250,212,157,75,249,234,249,231,154,88,141,68,195,149,186,148^250,212,157,75,211,175,147,89,209,174,237,197,167,105,181,142^250,212,157,75,129,77,138,82,249,238,167,91,225,200,170,130)
_pal_ammo8: (4,17,30,48,77,137,190,238^12,35,58,93,128,162,220,255^6,24,41,66,97,87,127,204)
_pal_firestorm:  (27,70,249,253,236,255,255,253,255^32,52,94,75,103,132,161,222,236^50,74,62,53,86,95,95,133,179)
_pal_arq16: (255,255,174,77,233,16,81,5,241,130,255,90,255,125,235,30^255,209,181,128,56,8,30,68,137,62,169,225,233,62,108,138^255,157,189,201,65,32,67,148,45,44,169,80,71,191,130,76)
_pal_msx:  (0,202,255,183,217,254,202,221,60,64,115,89,126,100,181^0,202,255,94,100,135,193,206,160,182,206,85,117,218,101^0,202,255,81,89,124,94,133,66,74,124,223,240,238,179)
_pal_faraway48:  (13,34,61,173,217,255,255,214,143,22,28,13,13,0,0,0,0,8,89,170,69,37,2,25,16,9,21,46,86,160,200,237,247,247,241,231,209,158,115,77,36,28,16,32,88,169,210,241^7,9,5,24,79,152,249,246,250,158,93,56,29,25,49,100,141,196,223,232,197,149,89,58,20,13,21,38,46,58,101,175,200,243,228,204,158,109,50,38,23,18,17,34,97,176,214,242^9,21,24,24,12,14,89,104,55,38,42,34,31,31,56,87,109,159,176,202,217,207,153,145,56,25,56,77,115,158,143,185,217,206,175,147,113,79,46,48,32,22,18,35,98,176,215,241)
_pal_battery24:  (248,51,87,120,143,166,217,224,230,232,232,226,252,118,58,201,181,65,70,76,73,70,66,48^255,36,55,68,71,76,87,70,99,152,203,237,255,232,224,250,242,196,179,144,119,98,74,48^186,49,82,101,106,108,124,70,76,81,88,130,222,86,86,117,107,124,142,161,145,135,112,66)
_pal_g8: (28,237,161,243,238,45,64,37^17,236,59,127,150,83,169,166^33,233,59,154,26,101,51,197)
_pal_todayland:  (20,49,90,148,237,94,174,227,244,69,126,198,240,27,33,52,152,33,38,30,108,68,142,228,242^20,56,103,168,239,22,36,112,191,35,66,119,183,56,103,176,232,35,75,143,213,28,48,98,180^20,61,108,170,239,50,50,23,66,35,58,66,132,69,95,111,138,99,164,222,228,92,127,154,183)
_pal_simjpc16:  (5,34,84,155,225,245,254,139,124,103,49,64,161,165,154,234^4,31,53,110,176,238,254,225,194,143,111,74,77,104,147,145^3,49,22,45,71,155,254,224,100,203,35,104,63,212,183,130)
_pal_night16:  (15,255,12,72,121,176,101,63,185,255,221,154,100,51,118,197^15,248,33,88,160,206,127,69,157,221,148,81,75,48,112,163^30,188,51,109,176,157,73,54,106,145,91,66,72,51,136,179)
_pal_fzteth16:  (243,249,184,94,162,194,143,193,108,0,0,221,0,7,0,5^243,194,112,13,158,89,39,0,96,71,168,180,73,134,195,28^243,164,14,36,180,223,184,43,111,237,243,17,82,92,125,37)
_pal_ykb22:  (207,156,40,72,128,184,210,210,231,128,116,104,74,83,165,141,71,64,174,207,138,169^207,156,37,46,74,146,183,194,229,120,91,74,104,161,199,169,126,72,134,157,95,119^201,151,42,43,62,134,174,174,209,104,65,69,93,112,135,174,136,89,178,185,103,119)
_pal_crimso11:  (255,243,191,118,203,142,122,94,142,134,69,61,53,35,65,17^255,215,150,154,94,57,73,69,195,118,110,98,61,46,41,11^227,98,81,85,49,61,98,49,207,150,81,134,90,50,45,17)
_pal_cpcboy:  (0,27,53,102,85,127,188,192,223,27,27,30,121,128,145,201,227,248,53,53,53,127,173,141,225,228,255,238,172,118,63,36^0,27,53,30,51,53,53,70,109,101,110,121,95,128,148,127,155,120,175,183,193,201,200,225,198,221,255,234,181,132,80,49^0,101,201,37,97,201,53,110,155,27,131,229,27,128,223,53,141,248,53,143,215,53,170,199,67,154,255,224,107,72,63,55)
_pal_jerrypie22:  (30,36,55,156,220,196,147,121,82,157,118,41,52,64,114,83,207,224,210,53,25,85^36,81,150,198,239,215,121,65,60,125,68,71,119,213,178,137,190,110,57,41,23,46^49,104,155,217,248,164,70,34,32,174,110,45,80,142,69,71,91,54,28,29,22,65)
_pal_cgarne:  (0,94,34,76,12,108,68,123,138,235,92,226,170,255,181,255^0,96,52,129,126,217,170,226,54,138,46,61,92,217,181,255^0,110,209,251,69,71,204,249,34,96,120,105,61,63,181,255)
_pal_naji16:  (16,61,100,72,63,106,116,89,183,141,100,192,200,220,242,230^26,14,17,46,66,52,67,85,62,109,150,113,146,162,201,209^58,38,61,105,90,101,74,121,98,156,124,159,108,134,102,213)
_pal_apple2:  (0,81,132,234,81,232,245,0,0,145,201,0,152,200,255^0,92,61,125,72,93,183,103,200,145,209,166,219,193,255^0,22,82,39,136,239,201,82,44,145,153,240,201,247,255)
_pal_risc:  (255,220,185,151,118,85,54,0,0,237,5,220,237,85,255,4^255,220,185,151,118,85,54,0,69,237,202,0,237,134,185,185^255,220,185,151,118,85,54,0,151,4,0,0,185,0,0,255)
_pal_arne4: (0,0,184,175^0,81,75,216^0,156,18,79)
_pal_spec12:  (15,145,214,217,219,168,120,142,50,47,48,217^8,140,217,209,110,45,28,217,186,99,24,190^8,137,208,93,59,45,38,89,59,189,143,147)
_pal_drz15:  (20,57,102,165,216,242,255,255,81,83,128,133,164,255,207^20,47,72,93,114,154,227,255,90,127,130,171,219,191,238^25,71,81,82,114,128,91,238,142,59,126,221,114,252,247)
_pal_gzxp:  (0,173,243,159,218,170,232,0,14,31,68^0,155,234,37,98,124,202,106,175,29,88^0,168,215,63,82,20,0,20,3,175,214)
_pal_finlal11:  (23,83,34,175,59,35,159,136,189,203,228^20,12,53,52,102,132,132,158,160,201,229^25,30,85,81,136,51,116,183,188,144,241)
_pal_sft15:  (217,241,34,62,190,208,156,14,159,189,101,153,21,64,92^246,218,23,201,211,168,179,168,184,102,113,17,96,19,52^234,4,44,238,220,65,26,74,174,102,64,156,144,109,17)
_pal_au15: (102,0,51,85,136,170,187,255,255,85,153,102,187,68,17^102,17,17,0,34,102,153,221,255,85,153,119,221,51,34^119,34,17,0,17,34,119,187,238,51,68,170,255,68,68)
_pal_au15y:  (85,136,204,221,255,221,153,85,255,187,102,102,68,34,17^0,34,136,187,221,204,153,85,255,221,119,102,51,51,17^0,17,68,153,187,119,68,51,238,255,170,119,68,85,34)
_pal_dimwid23:  (0,250,224,226,186,185,235,195,228,187,113,81,137,203,166,58,56,158,171,24,93,30,7^0,232,205,225,183,171,167,190,114,102,137,154,127,70,72,109,102,31,44,55,32,22,6^0,233,242,92,169,250,80,33,81,227,229,75,127,103,135,105,44,113,41,118,62,71,13)
_pal_acid15:  (23,64,143,211,128,55,227,244,28,9,28,33,201,181,192^3,7,30,96,128,190,218,249,13,68,81,151,130,215,248^38,61,64,54,128,161,120,210,89,64,130,59,155,55,175)
_pal_elc22:  (0,85,168,255,168,254,168,254,254,168,255,4,6,4,6,0,0,0,118,168,254,254^0,69,168,255,0,0,85,118,168,168,255,168,255,168,255,118,0,0,0,0,0,0^0,85,168,255,0,0,0,0,118,0,4,0,4,168,255,255,168,255,255,168,255,118)
_pal_eggy15:  (46,14,70,73,240,202,60,196,158,246,43,234,175,221,249^64,12,9,82,242,30,155,27,126,52,207,157,216,212,217^61,27,161,102,208,15,135,227,116,104,242,24,126,203,85)
_pal_sup8: (246,238,237,61,8,119,230,0^250,234,196,156,145,107,40,8^255,24,149,9,205,125,0,0)
_pal_chip16: (214,58,0,83,112,6,99,142,89,124,86,234,196,111,229,216^75,35,0,140,198,62,114,55,142,182,83,200,133,26,229,162^97,51,20,193,229,76,114,55,51,73,73,121,78,113,229,162)
_pal_4l: (250,70,92,87,97,107,153,181,135,166,180,13,18,78,113,76,22,173,227,235,255,248^249,59,87,98,115,151,11,97,135,164,180,13,22,64,96,126,156,101,102,148,193,226^249,82,90,122,81,85,45,114,116,156,180,13,130,166,186,216,120,95,37,136,146,0)
_pal_tui15: (29,19,23,70,120,16,21,162,43,240,178,197,240,124,226^13,34,55,58,77,66,112,109,161,176,162,180,194,219,231^13,66,39,49,48,172,155,61,195,63,131,208,152,207,249)
_pal_cdbac: (0,218,127,196,244,199,119,49,55,142,214,245,253,206,93,48^0,131,55,196,251,240,226,152,54,100,151,206,245,63,9,20^0,92,16,102,74,220,142,63,141,227,255,230,249,80,41,33)
_pal_kens16: (0,255,201,110,232,239,106,25,22,50,5,63,186,255,227,122^0,255,143,78,2,227,137,86,237,193,127,50,170,148,14,36^0,255,76,35,0,5,39,72,117,195,193,174,255,157,194,61)
_pal_kens32: (214,254,161,250,251,230,153,71,5,79,45,0,111,8,42,6,0,74,142,183,255,172,130,90,174,247,244,155,86,17,81,8^160,59,44,47,159,28,47,1,17,2,105,166,235,162,102,54,0,73,123,192,255,190,124,59,101,170,234,149,98,150,225,253^144,30,50,122,218,247,124,31,85,236,203,238,255,154,106,25,0,87,164,255,255,156,112,28,7,48,92,0,4,59,19,204)
_pal_kens54: (5,50,56,0,28,42,45,0,80,162,132,170,205,5,73,47,56,120,187,142,31,37,114,164,245,223,168,54,36,127,71,147,151,229,213,221,242,238,158,78,91,94,126,162,224,255,255,223,171,238,193,248,234,161^254,175,114,0,51,82,132,183,254,209,146,186,255,220,159,109,148,206,198,140,100,71,98,141,184,111,49,16,18,35,26,39,104,126,48,56,128,41,40,33,80,77,117,175,245,251,255,185,140,193,144,203,121,94^193,135,97,0,42,25,48,22,52,142,108,179,241,221,170,130,215,248,236,253,244,126,159,181,244,241,238,227,103,135,58,78,119,163,157,90,113,17,31,26,88,40,26,34,63,198,255,186,118,145,41,26,36,48)
_pal_aap12:
(4,28,71,108,227,216,161,78,154,240,249,138^3,22,65,140,210,128,61,40,64,212,245,143^3,24,107,80,69,56,59,46,126,114,239,196)
_pal_aap16:
(7,51,119,204,153,221,255,255,85,17,68,51,85,85,170,255^7,34,68,136,51,119,221,255,170,85,238,136,68,85,187,255^8,34,51,85,17,17,85,51,68,34,187,221,170,119,187,255)
_pal_aap64: (6,20,59,115,180,223,250,249,255,255,214,156,89,20,26,36,18,20,40,36,32,166,255,254,250,245,232,188,121,64,36,34,50,113,187,219,244,218,179,139,109,74,51,66,91,142,186,233,227,185,132,88,71,35,50,93,146,205,228,199,160,121,90,66^6,16,23,23,32,62,106,163,213,252,242,219,193,160,122,82,32,52,92,159,214,252,255,243,214,160,106,74,58,51,34,28,43,65,117,164,210,224,185,147,117,84,57,36,49,82,117,181,230,191,155,141,125,103,132,175,220,247,210,176,134,103,78,57^8,19,37,45,42,35,10,27,65,64,100,67,53,46,62,59,32,100,196,222,199,219,255,192,184,151,115,155,128,83,52,26,40,59,71,99,156,234,209,175,141,98,65,51,56,82,106,163,255,251,228,190,133,78,100,141,186,226,170,139,98,85,68,52)
_pal_aap128: (5,14,45,97,185,241,252,255,255,255,248,232,176,103,39,76,133,211,248,213,173,127,88,51,24,41,71,97,143,196,208,151,89,66,61,39,20,27,43,39,66,115,241,201,138,69,73,120,156,206,250,238,212,144,23,55,105,178,226,246,252,236,203,166,128,89,50,79,140,198,214,180,114,69,97,147,198,239,181,134,93,72,44,23,44,70,100,138,175,220,184,136,94,72,40,70,105,154,197,230,238,227,191,135,86,50,54,101,150,192,212,234,241,221,189,136,89,51,178,225,248,255,253,246,226,178,100,42^4,12,27,39,69,100,165,224,255,240,197,138,91,57,31,61,95,151,246,220,184,142,99,60,28,63,114,165,208,241,255,237,207,164,111,65,18,36,78,137,191,239,242,212,161,114,65,100,139,170,214,181,128,82,21,51,91,139,178,216,247,235,198,158,123,87,50,52,91,133,168,117,75,42,104,148,184,221,231,198,155,104,59,24,52,84,135,196,233,234,204,163,113,82,44,71,102,151,199,231,230,205,165,115,79,47,40,73,104,144,184,224,235,206,164,110,77,39,148,191,227,233,201,162,114,82,54,30^3,12,30,33,29,31,112,183,255,137,58,54,44,49,27,46,57,65,68,29,52,68,53,36,25,33,56,63,50,41,234,202,147,89,67,45,29,71,149,205,232,232,255,253,246,227,130,198,219,237,255,156,187,188,22,52,89,120,126,150,190,231,193,154,122,87,50,47,62,86,81,56,44,27,58,70,88,145,203,154,121,89,57,25,56,86,140,195,223,238,216,188,142,98,60,98,130,185,221,240,234,223,201,143,91,53,43,86,136,169,184,221,219,191,153,106,77,42,118,137,152,227,201,168,133,102,75,35)
_pal_fant16: (142,81,51,20,70,166,211,231,238,217,117,20,4,28,67,96^109,58,39,19,24,60,123,188,238,213,115,33,4,27,80,161^52,24,16,12,32,30,30,79,250,91,32,15,5,47,99,143)
_pal_fant24: (31,57,165,239,239,171,24,239,239,165,119,114,42,57,104,146,39,239,69,60,155,54,85,48^36,87,140,172,216,92,63,105,183,98,52,65,29,42,76,126,100,58,35,159,26,23,15,15^10,28,39,40,161,28,57,47,117,67,33,19,13,28,60,106,104,12,13,156,10,12,10,10)
_pal_tf23: (165,201,209,162,131,99,65,40,58,95,134,172,212,151,101,58,34,80,133,223,172,124,76^45,109,202,157,107,73,51,34,59,99,149,194,237,181,132,89,58,59,91,185,220,168,110^39,69,128,107,63,44,37,31,61,103,152,195,237,138,92,65,48,104,105,202,241,213,173)
_pal_tfp39: (82,120,165,201,204,207,227,247,217,199,141,87,40,65,99,131,162,151,101,58,32,32,58,95,134,172,212,172,124,76,62,55,51,88,114,133,177,223,234^30,24,45,109,165,194,231,225,182,151,91,50,34,51,73,107,157,181,132,89,55,44,59,99,149,194,237,220,168,110,61,42,20,38,64,91,139,185,220^46,38,39,69,98,129,171,188,145,125,87,34,31,37,44,63,107,138,92,65,45,17,61,103,152,195,237,241,213,173,138,94,77,79,74,105,154,202,230)
_pal_fleja_m: (31,43,65,104,144,182,255,252,181,138,92,201,222,255,255,252,180,81,48,35,38,35,65,76,99,148,184,60,70,130,247,194,133^24,46,72,113,161,203,255,191,128,80,58,48,106,173,229,249,214,196,156,109,79,54,114,147,194,210,253,41,39,100,164,113,45^51,66,89,122,168,207,255,138,87,62,65,56,56,59,150,96,69,63,99,122,110,99,145,173,201,212,255,64,92,129,139,130,102)
_pal_pastel:
(252,252,250,255,247,163,128,87,81,112,109,88,132,190,222^153,189,230,247,246,217,217,207,192,165,116,68,89,87,118^119,144,170,213,166,106,155,201,219,212,207,120,201,194,165)
_pal_pineapple32: (67,137,217,255,255,199,115,52,3,39,69,156,255,255,209,124,49,131,235,255,255,191,109,41,4,3,28,119,255,255,192,96^0,0,36,97,183,110,57,17,7,59,130,185,216,130,64,25,12,63,156,218,255,195,138,59,21,62,146,214,224,136,59,23^42,39,60,87,98,70,46,31,16,45,57,59,50,59,31,26,27,52,110,172,228,198,141,73,40,94,167,193,220,169,148,97)
_pal_sweetie16: (26,87,177,238,255,160,56,39,41,64,79,134,244,147,85,50^28,41,65,123,208,240,184,110,54,91,164,236,244,182,113,64^44,86,86,88,121,114,110,123,111,208,247,248,244,193,133,86)
_pal_nyx8: (8,15,32,246,195,153,129,78^20,42,57,214,163,117,98,73^30,63,79,189,138,119,113,95)
_pal_zu32: (71,94,122,160,191,238,244,182,113,57,60,48,90,125,160,207,223,138,40,57,57,57,86,142,205,255,244,244,230,169,130,79^45,54,68,91,121,161,204,213,170,123,89,44,83,112,147,198,246,235,204,120,71,49,64,71,96,174,180,126,72,59,112,84^60,67,74,83,88,96,161,60,52,68,86,46,83,113,142,184,245,241,223,168,120,75,100,140,147,182,27,27,46,59,148,107)
_pal_gb_d_1: (51,166,214,247^30,55,142,231^80,37,73,198)
_pal_gb_d_2: (8,52,136,224^24,104,192,248^32,86,112,208)
_pal_gb_bz: (46,56,87,126^70,93,123,132^61,73,70,22)
_pal_gb_arne: (36,63,118,172^49,80,132,181^55,63,72,107)
_pal_gb_easy: (0,13,161,235^67,136,188,221^51,51,0,119)
_pal_gb_pj: (31,77,139,196^31,83,149,207^31,60,109,161)
_pal_gb_kirokaze: (51,70,148,226^44,135,227,243^80,143,68,228)
_pal_gb_cyber: (16,66,111,206^37,103,158,206^51,142,223,206)
_pal_gb_grapefruit: (101,183,244,255^41,101,178,245^108,145,107,221)
_pal_gb_forest: (90,107,123,255^57,140,198,255^33,66,123,181)
_pal_gb_ice_cream: (124,235,249,255^63,107,168,246^88,111,117,211)
_pal_gb_rb: (24,132,247,255^16,115,181,239^16,156,140,255)
_pal_gb_choco: (255,220,169,66^228,164,96,41^194,86,76,54)
_pal_hal4: (48,96,248,248^0,40,144,240^48,120,32,136)
_pal_amstrad_cpc: (0,128,255,128,255,255,255,255,255,128,0,0,128,128,0,0,0,128,0,0,128,128,255,255,255,128,0^0,128,255,0,0,128,128,255,255,128,128,255,255,255,255,128,255,255,128,0,0,128,128,0,0,0,0^0,128,255,0,0,128,0,128,0,0,0,0,0,128,128,128,255,255,255,128,255,255,255,255,128,128,255)
_pal_amiga2600ntsc:
(252,232,208,184,160,132,100,68,44,76,104,132,156,180,204,224,200,180,156,132,108,80,52,20,0,32,64,92,116,140,164,184,164,144,124,104,80,56,28,0,0,28,56,80,104,124,144,164,164,144,124,104,80,56,28,0,0,28,56,80,104,124,144,164,188,168,148,124,104,76,48,20,72,96,120,140,160,180,196,212,236,220,208,192,176,160,140,120,136,156,176,192,208,224,236,252,252,236,224,208,192,172,152,132,112,132,152,172,188,204,220,232,252,232,208,184,160,132,100,68,0,64,108,144,176,200,220,236^224,204,180,156,132,104,72,40,48,80,112,140,168,192,212,236,252,228,204,180,152,124,92,56,60,92,124,156,180,208,228,252,252,228,208,180,156,124,92,64,44,76,104,132,156,180,204,224,200,180,156,136,112,84,56,24,0,32,64,92,116,140,164,184,180,160,136,112,88,60,32,0,0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,32,60,88,112,136,160,180,188,168,148,128,104,80,52,24,40,68,92,120,140,160,180,204,252,232,208,184,160,132,100,68,0,64,108,144,176,200,220,236^140,124,108,88,68,48,24,0,0,28,52,76,100,120,136,156,164,144,124,104,80,56,28,0,0,32,64,92,116,140,164,184,212,192,172,148,128,100,72,44,92,120,144,172,192,212,232,252,252,236,220,204,188,168,144,124,136,156,176,192,208,224,236,252,252,236,224,208,192,172,152,132,120,144,164,184,204,220,236,252,224,208,192,176,156,136,116,92,0,32,60,88,112,136,160,180,148,128,112,92,72,48,24,0,0,20,40,60,76,92,104,124,104,92,80,64,52,36,16,0,0,64,108,144,176,200,220,236)
_pal_amiga2600pal:
(112,136,160,180,200,220,236,252,224,208,196,180,168,148,132,112,88,108,128,148,164,180,196,212,200,184,168,148,128,108,84,60,0,32,60,88,112,132,156,176,164,144,124,104,80,56,28,0,0,28,56,80,104,124,144,164,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,212,192,176,160,140,116,92,68,128,148,168,188,204,220,236,252,252,236,220,200,180,160,136,112,0,64,108,144,176,200,220,236^0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,200,180,160,136,116,88,60,32,60,88,116,140,164,184,204,224,236,220,200,184,164,140,116,92,100,128,152,176,196,216,232,252,252,232,212,192,172,144,120,92,88,112,132,156,172,192,208,224,212,192,172,152,132,104,80,52,0,64,108,144,176,200,220,236^20,52,80,108,132,156,180,200,224,208,192,176,156,136,116,92,112,136,160,180,200,220,236,252,252,236,220,204,188,168,148,128,136,156,176,192,208,224,236,252,252,236,220,200,180,160,136,112,112,136,160,180,200,220,236,252,236,220,200,184,164,140,116,92,20,52,80,108,132,156,180,200,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,64,108,144,176,200,220,236)
_pal_amiga2600secam: (0,33,240,255,127,127,255,255^0,33,60,80,255,255,255,255^0,255,121,255,0,255,63,255)
_pal_cga: (0,85,170,255,0,85,0,85,0,85,170,255,170,255,170,255^0,85,170,255,0,85,170,255,170,255,0,85,0,85,85,255^0,85,170,255,170,255,0,85,170,255,0,85,170,255,0,85)
_pal_cga00: (0,0,170,170^0,170,0,85^0,0,0,0)
_pal_cga01: (0,85,255,255^0,255,85,255^0,85,85,85)
_pal_cga10: (0,170,0,170^0,0,170,170^0,170,170,170)
_pal_cga11: (0,255,85,255^0,85,255,255^0,255,255,255)
_pal_cga20: (0,170,0,170^0,0,170,170^0,0,170,170)
_pal_cga21: (0,255,85,255^0,85,255,255^0,85,255,255)
_pal_c64_colodore:(0,74,123,178,255,129,196,85,142,237,169,86,117,112,46,142^0,74,123,178,255,51,108,56,80,241,255,172,206,109,44,60^0,74,123,178,255,56,113,0,41,113,159,77,200,235,155,151)
_pal_c64_pepto: (0,98,137,173,255,159,203,109,161,201,154,92,106,136,80,160^0,98,137,173,255,78,126,84,104,212,226,171,191,126,69,87^0,98,137,173,255,68,117,18,60,135,155,94,198,203,155,163)
_pal_com_vic_20: (0,255,168,233,119,182,133,197,168,233,85,146,66,126,189,255^0,255,115,178,45,104,212,255,95,157,158,223,52,112,204,255^0,255,74,135,38,98,220,255,180,245,74,135,139,202,113,176)
_pal_zx: (0,255,255,0,0,255,255,0,192,0,0,192,192,0,192^0,255,0,255,0,255,0,255,0,192,0,192,0,192,192^0,255,0,0,255,0,255,255,0,0,192,0,192,192,192)
_pal_pico_8: (0,95,194,255,255,255,255,171,255,255,131,126,41,29,0,0^0,87,195,241,236,163,204,82,119,0,118,37,173,43,135,228^0,79,199,232,39,0,170,54,168,77,156,83,255,83,81,54)
_pal_msxp:(0,128,192,255,128,255,128,255,0,0,0,0,0,0,128,255,128,255,0,0,0,128,0,128,128,255,128,255^0,128,192,255,0,0,128,255,128,255,128,255,0,0,0,0,128,255,64,255,128,255,64,128,0,0,64,128^0,128,192,255,0,0,0,0,0,0,128,255,128,255,128,255,64,128,64,128,255,255,128,255,255,128,0,64)
_pal_jmp:
(0,25,70,161,69,118,131,158,220,225,214,233,33,211,175,245^0,16,175,214,62,100,49,194,83,141,185,216,108,101,170,244^0,40,69,133,120,254,41,232,75,121,123,161,75,200,185,235)
_pal_mac2: (255,255,255,220,255,54,0,0,0,0,101,151,185,134,69,0^255,255,101,0,0,0,0,151,168,101,54,101,185,134,69,0^255,0,0,0,151,151,202,255,0,0,0,54,185,134,69,0)
_pal_jewel: (50,102,184,210,242,240,223,188,121,86,74,77,115,116,156^30,36,40,106,197,232,183,123,65,96,143,193,227,130,172^45,49,28,18,60,156,127,98,107,148,169,179,123,161,186)
#@cli pal_t : eq. to 'palette_transfer'
pal_t: palette_transfer $*
#@cli palette_transfer : 0<=_palette_id<=142,0<=_indexing_style<=4,0<=_color_dithering[%]<=1,_transfer_rgb={0=No | 1=Yes },0<=_alpha_count,0<=_alpha_dithering<=1,_special_effect_factor>=0,0<=_initial_resize_method<=5,_activate_upscaling_stimulation={ 0=Does not activate | 1=Activate Upscale},_pixel_width>=1,_pixel_height>=1,_activate_hardware_stimulation={ 0=Does not activate | 1= Stimulate hardware restriction },1<=_color_section_of_hardware_restriction_precision_factor,_hardware_restriction_by_tile_width>0,_hardware_restriction_by_tile_height>0,_hardware_color_precision>2,_hardware_color_mapping_method={0=Median Cut | Median Cut and K-Means},alpha_precion_factor>2,alpha_mapping_method_for_hardware_stimulation={0=Median Cut | Median Cut and K-Means}
#@cli : Transfer Colors to images using a palette. If using negative number or "i" for first variable, there must be exactly two layers.
#@cli : Default value: 'transfer_rgb=0', 'alpha_count=0', 'alpha_dithering=0%', 'special_effect_factor=.5', 'initial_resize_method=0','activate_upscaling_stimulation=0','pixel_width=1','pixel_height=1','activate_hardware_stimulation=0','color_section_of_hardware_restriction_precision_factor=10','hardware_restriction_by_tile_width=5','hardware_restriction_by_tile_height=5','_hardware_color_precision=4','hardware_color_mapping_method=1','alpha_precion_factor=10','alpha_mapping_method_for_hardware_stimulation=1'
#@cli : For 2 layers where one is a palette - $ palette_transfer -1,0,.5 ,
#@cli : To apply palette colors to multiple layers - $ repeat $! l[$<] palette_transfer db32,0,.5 endl done ,
palette_transfer:
_iw={w}
_ih={h}
skip ${4=0},${5=2},${6=0},${7=.5},${8=0}${9=0},${10=1},${11=1},${12=0},${13=10},${14=5},${15=5},${16=4},${17=1},${18=10},${19=1}
pw=$10
ph=$11
if {$8||$9} if {$pw<=0||$ph<=0} v + error "Invalid input for pixel scale factor(s)!" fi
r={$pw>$ph?$pw/$ph:$ph/$pw} fi
_CI={$2}
AlpC=$5 AlpD=$6 SF=$7
pal $1
if $9 r[0] {$r*100}%,{$r*100}%,1,4,$8 fi
if $8 r[0] {100/$10}%,{100/$11}%,1,4,$8 fi
split_opacity[0]
l[^1] if $4 to_rgb transfer_rgb.. . fi if {$_CI==0} if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm.
elif {$_CI==1} to_rgba ${_iw},${_ih},1,4 noise. {$SF*75} to_graya. blend[^1] difference,1 to_rgb if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm.
elif {$_CI==2} pal 0 [0] index. ..,1,1 rm.. +blend[^1] interpolation,{$5/20} rm[0,2] rv if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm.
else if {$CI>2} if {($_CI-3)==0} +f[0] "x%2*255" else +f[0] "y%2*255" fi fi blend[^1] multiply,{$SF/4} if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm. fi
endl
if {$5<2} rm. if $8 r {100*$10}%,{100*$11}%,1,3,1 fi else
l[1] ${AlpC},1,1,1 f. "x" n. 0,255 if {$12>0&&$5>2} l[0] ahre_bw $18,${AlpC},$14,$15,$16,${AlpD},$19 endl index.. .,0,1 else index.. .,${AlpD},1 fi rm. endl a c if $8 r {100*$10}%,{100*$11}%,1,4,1 fi fi
#@cli pal_l :
#@cli : Convert palettes to layers
pal_l :
repeat $! l[$>]
_iw={w}
if {h=1} repeat {${_iw}-1} [0] done repeat ${_iw} crop[$>] $>,0,$>,0 done else v + error "This is not a palette!" fi endl done
#@cli ahre_rgb: (eq. to auto_hardware_restriction_emulation_RGB)
ahre_rgb : auto_hardware_restriction_emulation_RGB $*
#@cli auto_hardware_restriction_emulation_RGB : _precision_factor>1,_tile_size_width>0,_tile_size_height>0,_colors_per_tiles>0,dithering[%]>=1,mapping_method={0=median-cut | 1=median-cut and k-means}
#@cli : Emulates hardware restriction automatically being based on the image using spectrum of 3.
auto_hardware_restriction_emulation_RGB :
repeat $! l[$>] remove_opacity to_rgba repeat $1 [0] done l[$1] +colormap $1,0,0 at[0] "s c f "ia" a c",$2,$3,,,,,3 index.. .,0,1 pal_l. r[1-{$1}] {w#0},{h#0},1,4,1 l[0] repeat {$1-1} [0] done endl repeat $1 l[$>,{$>+$1}] f[0] "i#0==i#1?255:0" endl done k[0-{$1-1}] to_gray endl to_rgb[0-{$1-1}] repeat $1 a[$>,$1] c done repeat $1 l[$>] +solidify 0,0,0,0,0 blend normal endl done ac "autoindex $4,$5,$6",rgb blend alpha to_rgb endl done
#@cli ahre_bw: (eq. to auto_hardware_restriction_emulation_BW)
ahre_bw: auto_hardware_restriction_emulation_BW $*
#@cli auto_hardware_restriction_emulation_BW : _precision_factor>1,_tile_size_width>0,_tile_size_height>0,_shades_per_tiles>0,dithering[%]>=1,mapping_method={0=median-cut | 1=median-cut and k-means}
#@cli : Emulates hardware restriction automatically being based on the image using spectrum of 1.
auto_hardware_restriction_emulation_BW : repeat $! l[$>]
to_gray _l={im} _h={iM} $1,1,1,1 f. "x" n. 0,255 +at.. "f "ia"",$3,$4,,,,,3 index. ..,0,1 rv[^0] pal_l. r[^0-1] {w#0},{h#0},1,1,1 repeat $1 l[1,{$>+2}] f[1] "i#0==i#1?255:0" endl done rm[1] repeat $1 +a[0,{$>+1}] c done rm[0-5] repeat $1 l[$>] +solidify 0,0,0,0,0 blend normal endl done ac "autoindex $5,$6,$7",rgb blend alpha to_gray n ${_l},${_h} $2,1,1,1 f. "x" n. 0,255 index.. .,0,1 rm. to_gray endl done
#@cli sol : eq. to '_solarize'.
sol :
_solarize
#@cli _solarize :
#@cli : Solarize values. If values are greater than .5 (0-1 range assumed), then the values becomes inverted. Finally, it is normalized. Note that this doesn't work on -1,1 though.
_solarize :
+negate
blend darken mul 2
#@cli modo :
#@cli : (eq. to 'modular_operation').
#@cli : $ modo 1,255,{128/255},1
modo : modular_operation $*
#@cli modular_operation : 0>=operation<=5,chan_v>0, 0<value[%]<=1,two_layers={0=Do not use layer as blending mode | two_layers=Use Layers as blending mode}
#@cli : Default value : 'two_layers=0'
modular_operation :
skip {$4=0}
if {$4==0} repeat $! l[$>] split_opacity _modular_formula $1,$2,$3,0 a c -endl done rv
elif {$4==1} repeat {int($!/2)} l[{$>*2},{$>*2+1}] _modular_blending_pre $1,$2,$3 endl done fi
_modular_blending_pre :
+rv
repeat {int($!/2)} l[{$>*2},{$>*2+1}] modf $1,$2,$3,1 endl done rm[1,3] rv
#@cli modf:
#@cli : (eq. to '_modular_formula').
#@cli : $ modf 3,255,{128/255},0 ,
modf : _modular_formula $*
#@cli _modular_formula : 0<=operation<=5,chan_v>0, 0<value[%]<=1,two_layers={0=Do not use layer as blending mode | two_layers=Use Layers as blending mode}
#@cli : Default value : 'two_layers=0'
_modular_formula :
skip ${4=0}
if {$1==0} f "eps=10^-8;img=i#0;vp=$4==1?i#1/$2:$3;mv=($2*vp)+eps;f=img-mv*floor(img/mv);f>$2*vp?$2*vp:f"
elif {$1==1} f "eps=10^-8;img=i#0;vp=$4==1?i#1/$2:$3;mv=($2*vp)+eps;nf=img-mv*floor(img/mv);minm=$2*vp;e=ceil((i#0/minm))%2>0?$2:0;cinv=i#0>0?e:$2;cinv>0?nf:mv-nf"
elif {$1==2} f "eps=10^-8;img=i#0;vp=$4==1?i#1/$2:$3;ivp=1/vp;simg=ivp*img;maxm=$2+eps;f=simg-maxm*floor(simg/maxm)"
elif {$1==3} f "eps=10^-8;img=i#0;vp=$4==1?i#1/$2:$3;ivp=1/vp;simg=ivp*img;maxm=$2+eps;f=simg-maxm*floor(simg/maxm);minm=$2*vp;e=ceil((i#0/minm))%2>0?$2:0;cinv=i#0>0?e:$2;cinv>0?f:$2-f"
elif {$1==4} f "eps=10^-8;img=i#0;vp=$4==1?i#1/$2:$3;vpi=vp*$2;fimg=img+vpi;maxm=$2+eps;fimg-maxm*floor(fimg/maxm)"
elif {$1==5} f "eps=10^-8;img=i#0;vp=$4==1?i#1/$2:$3;vpi=vp*$2;fimg=img+vpi;maxm=$2+eps;f=fimg-maxm*floor(fimg/maxm);cinv=fimg>maxm?$2:0;cinv>0?maxm-f:f" fi
#@cli em:
#@cli : (eq. to 'emboss_image')
#@cli : $ em 90,0,1
em : emboss_image $*
#@cli emboss_image : 0<=_angle<=360, 0<=_depth, _smoothness>=0,
#@cli : Default values: 'depth=1','smoothness=0'
#@cli : $ emboss_image 90,0,1 ,
emboss_image: -skip ${2=1},${3=0}
l[0]
luminance
fx_gradient2rgb $3,0,100,0,0
[0]
repeat 2 l[$>] rgb2hsv s c l[0] + {$1+($>*180)} % 360 endl a c hsv2rgb to_rgb s c rm[1,2] endl done
l[0] n 128,255 endl l[1] negate n 0,128 endl
+fill_color[0] 128,128,128,255 rv blend grainmerge - 128 mul $2 + 128 cut 0,255
endl
#@cli rep_bchstatfunc: (eq. to rep_by_channel_statistical_function)
rep_bchstatfunc : rep_by_channel_statistical_function $*
#@cli rep_by_channel_statistical_function: _variable,_resize_bool={ 0=Do not resize | 1= Resize to 1x1 }
#@cli : Creates 1x1 image based on defined variables that depends on image value (minimum, maximum, average, variance, sum, product and median)
#@cli : Default value: 'resize_bool=0'
rep_by_channel_statistical_function:
v - _gmic_s="$?" v +
_$0 $"*"
_rep_by_channel_statistical_function:
skip ${2=1}
v - mvcma="$1"
if {isnum("$1")} if {isint("$1")} mvcma=${arg\ 1+$1,min,max,avg,var,sum,pro,med} fi fi
repeat $! l[$>] v - _rep_bchstatfunc_$mvcma $2 endl done
_rep_bchstatfunc_im : _rep_bchstatfunc_min $1
_rep_bchstatfunc_minimum : _rep_bchstatfunc_min $1
_rep_bchstatfunc_min : s c f "im" a c if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_iM : _rep_bchstatfunc_max $1
_rep_bchstatfunc_maximum : _rep_bchstatfunc_max $1
_rep_bchstatfunc_max : s c f "iM" a c if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_ia : _rep_bchstatfunc_avg $1
_rep_bchstatfunc_average : _rep_bchstatfunc_avg $1
_rep_bchstatfunc_avg : s c f "ia" a c if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_iv : _rep_bchstatfunc_var $1
_rep_bchstatfunc_variance : _rep_bchstatfunc_var $1
_rep_bchstatfunc_var : s c f "iv" a c if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_is : _rep_bchstatfunc_sum $1
_rep_bchstatfunc_total : _rep_bchstatfunc_sum $1
_rep_bchstatfunc_sum : s c f "is" a c if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_ip : _rep_bchstatfunc_pro $1
_rep_bchstatfunc_product : _rep_bchstatfunc_pro $1
_rep_bchstatfunc_pro : s c f "ip" a c if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_ic : _rep_bchstatfunc_med $1
_rep_bchstatfunc_median : _rep_bchstatfunc_med $1
_rep_bchstatfunc_med : s c f "ic" a c if $1 r 1,1,1,{s},0 fi
#@cli rep_lbchstatfunc_to_pal: (eq. to rep_layers_by_channel_statistical_function_to_palette)
rep_lbchstatfunc_to_pal: rep_layers_by_channel_statistical_function_to_palette $*
#@cli rep_layers_by_channel_statistical_function_to_palette: _variable
#@cli: Converts layers to palette using statistical function by channels per layers into 1x1 tile, then append them.
rep_layers_by_channel_statistical_function_to_palette: rep_bchstatfunc $1 a x to_rgb
#@cli rep_mosaic_gen : _tile_width>=0,_tile_height>=0,_dithering<=1,1<=_interpolation<=6,_autocrop-by-median_bool={ 0=Do not autocrop by median | 1=Autocrop by median },_out_original_dimension={ 0=Do not output original dimension | 1= Output Original Dimension },use_folder={ 0=Do not use folder | 1=Use folder },folder_location="location_in_computer"
#@cli : Generates mosaic using multiple pictures using indexing methodology, and uses average to determine the mapping based on colors. Tile_Width and Tile_Height cannot be both zero!
#@cli : Default value: 'tile_height=0', 'interpolation=5', 'autocrop-by-median=0','out_original_dimension=1','use_folder=0','folder_location="N/A"'
#@cli : $ rep_mosaic_gen 10,10,.75,6,1,0 ,
rep_mosaic_gen:
if {$4<1} Interpolation cannot be less than 1 fi
skip ${2=0},${4=5},${5=0},${6=1},${7=0},${8=""}
in_a={int($1)}
in_b={int($2)}
in_c={$in_a*$in_b}
v={$in_a+$in_b}
iw={w#0}
ih={h#0}
vw={$in_c==0?floor(w>h?$v:w/h*$v):$in_a}
vh={$in_c==0?floor(h>w?$v:h/w*$v):$in_b}
mini_width={ceil(w/$vw)}
mini_height={ceil(h/$vh)}
full_width={$mini_width*$vw}
full_height={$mini_height*$vh}

if $7 rm[^0] input_glob "$8" fi
fim_number={$!-1}

to_a
if $5 repeat {$!-1} l[{$>+1}] autocrop {ic} endl done fi
rep_aspect_crop_2d[^0] {$vw},{$vh}
r[^0] $iw,$ih,1,4,$5
+rep_lbchstatfunc_to_pal[^0] ia
l[^0,{$!-1}]
r $vw,$vh,1,4,$4
endl
r[0] $mini_width,$mini_height,1,4,$4
split_opacity[0]
index[0] .,$3,1
repeat 2 l[$>] r $full_width,$full_height,1,{s},1 endl done
r[2-{$!-2}] $full_width,$full_height,1,4,0,2
pal_l.
r[{$!-$fim_number}-{$!-1}] $full_width,$full_height,1,3,1
split_opacity
repeat {$fim_number} l[0,{$!-$fim_number+$>}] +eq rm.. n. 0,255 endl done
repeat {$fim_number} l[{($>*2)+3},{$!-$fim_number+$>}] +blend multiply rv[0,2] rm. to_gray[0] endl done
rm[{$!-$fim_number}-{$!-1}]
repeat {$fim_number} a[{$>+2},{$>+3}] c done
blend[^0-1] alpha
rv[0,2] rm.
split_opacity[0]
blend[^0] multiply
a c
if $6 r {$iw},{$ih},1,4,0 fi
#@cli rep_aspect_crop_2d: _width_ratio>=1,_height_ratio>=1,-1<=_shift_factor[%]<=1,_interpolation={ 0=nearest | 1=linear }
#@cli : Crop images based on specified aspect ratio.
#@cli : Default value: 'shift_factor=0'
rep_aspect_crop_2d:
skip ${3=0}
repeat $! l[$>]
A=$1
B=$2
shift_factor=$3
if {$A==$B} if {w>h} r {h},100%,1,100%,0,0,{.5+$shift_factor/2},.5 else r 100%,{w},1,100%,0,0,0.5,{.5+$shift_factor/2} fi else
if {($A/$B)>(w/h)} r 100%,{$B/$A*(w/h)*100}%,1,100%,0,0,0.5,{.5+$shift_factor/2} else r {$A/$B/(w/h)*100}%,100%,1,100%,0,0,{.5+$shift_factor/2},0.5 fi fi
endl done
#@cli rep_reversespiralbwcoordinatemap:
#@cli : Creates a coordinate map which contains values that can be converted into coordinate for reverse spiral transformation
rep_reversespiralbwcoordinatemap:
if {w#0*h#0>16777216} v + error "Dynamic Array Limit has been reached! Width and Height multiplied should be less than 16777216 or 4096 squared!" fi
channels 0
repeat 3 1 done
f... "w#0"
f.. "h#0"
eval ${-math_lib}"
width=iM#1;
height=iM#2;
nw=width-1;
nh=height;
sv=0;
while(nh>-1,
for(k=0,k<=nw,k++,
dar_insert(#3,sv);
sv++;
);
sv--;
nh--;
for(k=0,k<=nh-1,k++,
sv+=width;
dar_insert(#3,sv);
);
nw--;
sv--;
for(k=0,k<=nw,k++,
dar_insert(#3,sv);
sv--;
);
nh--;
sv++;
for(k=0,k<=nh-1,k++,
sv-=width;
dar_insert(#3,sv);
);
nw--;
sv++;
);
"

f[0] "i(#3,0,(x+(y*w)))"
k[0]
#@cli rep_spiral_trb: (eq. to 'rep_spiral_transform_basic')
rep_spiral_trb: rep_spiral_transform_basic $*
#@cli rep_spiral_transform_basic: _direction_bool { 0 = reverse_spiral_transform | 1 = spiral_transform }
#@cli : Transform image based on spiral matrix coordinate
rep_spiral_transform_basic:
repeat $! l[$>] is={s-1}
if $1
+spiralbw
repeat $is . done
a[^0] c
f[0] "i(i#1%w,floor(i#1/w))"
k..
else
+rep_reversespiralbwcoordinatemap
repeat $is . done
a[^0] c
f[0] "i(int(i#1)%w,floor(int(i#1)/w))"
k..
fi
endl done
#@cli rep_nebulous: main_surf_xy_factor>0,main_surf_x_factor>0,main_surf_y_fact>0,-100<=x_center[%]<=100,-100<=y_center[%]<=100,0<=_fxyangle<=360,_wave,0<=_lighting_angle<=360,_disturbance>=0,_distx,_disty,0<=_distangle<=360,_disturbance_mode={ 0= do_not_scale | 1=scale_by_axisfact },_color={ 0=gray | 1=color },0<=_alpha_base<=2,_subpixelevel,0<=_subpixelprocessingmethod<=4
#@cli : Creates a nebulous texture inspired by its PDN equivalent. 
rep_nebulous:
if $1==0||$2==0||$3==0 v + error "Variable 1 to 3 cannot be zero!" fi
if $9<0 v + error "Disturbance factor cannot be less than 0!" fi
iw={w}
ih={h}
if !$14 channels 0
else to_rgb fi
if $15 r $iw,$ih,1,{s+1} fi
if $16>1
if $iw>$ih r {$iw*$16},{$ih*$16},1,{s}
else r {$iw*$16},{$ih*$16},1,{s} fi fi
f "
sd=w/h;
shx=($4*w)/2;
shy=($5*h)/2;
ang=pi*$6/180;
ix=(((x+shx)/w-.5)*1.5*($1*10))/(h>w?1/sd:1);
iy=(((y+shy)/h-.5)*1.5*($1*10))/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
IX*=$2*4;
IY*=$3*4;
distlvl=$9*$1;
dist=pi/(distlvl/100);
disth=$11;
distv=$12;
dang=pi*$13/180;
dix=(x/w-.5)*2/(h>w?1/sd:1);
diy=(y/h-.5)*2/(w>h?sd:1);
DIX=dix*cos(dang)-diy*sin(dang);
DIY=dix*sin(dang)+diy*cos(dang);
cx=DIX*($10?$2:1);
cy=DIY*($10?$3:1);
IX+=distlvl>0?(disth*(sin(((cx+cy)/2)/dist)-cos(((cy-cx)/2)/dist)));
IY+=distlvl>0?(-distv*(sin(((cx+cy)/2)/dist)+cos(((cy-cx)/2)/dist)));
k=pi+((-pi+(pi*$7))*10)/10;
ld=($8-$6)*pi/180;
t=atan2(IY,IX);
r=sqrt(IX*IX+IY*IY);
r/=100;
ti=sin(t)*cos(r)*k+r+ang+ld;
g=(sin(ti)+sin(pi/2+ti)+sin(pi+ti));
cg=[sin(pi+ti),sin(pi/2+ti),sin(ti)];
ft=!$14?g:cg;
alp=$15?($15>2?($15==3?g:g*-1):($15==2?(g*-1<0?-1:1):(g<0?-1:1)));
$15?(!$14?[g,alp]:[sin(pi+ti),sin(pi/2+ti),sin(ti),alp]):ft;
"
if $16>1 r $iw,$ih,1,{s},{$17+2} fi
#@cli rep_sptbwgp: (eq. to rep_shift_pixel_to_boundary_with_group_pixels)
rep_sptbwgp: rep_shift_pixel_to_boundary_with_group_pixels $*
#@cli rep_shift_pixel_to_boundary_with_group_pixels: 0<=_position<=1, _axis={ 0=Horizontal | 1=Vertical }, 0<=influence_factor<=1, 0<=_threshold<=1
#@cli : Shifts pixels to boundary by percentage using grouped pixels. position less than .5 means shift will be negative, and position greater than .5 means shift will be positive.
rep_shift_pixel_to_boundary_with_group_pixels:
repeat $! l[$>]
iw={w}
ih={h}
is={s}
ws=$1
axis=$2
threshold_var=$4
influence_var=$3
shift_var={($ws+1)/2}
dir={$axis?($ws>=0?1:-1):($ws<0?1:-1)}
s c
l. alpha_max={iM} 
alpha_middle={iM/2} 
endl
f. $threshold_var>0?($threshold_var==1?(i<(1-10^-8)*$alpha_max?0:i):(i<$threshold_var*$alpha_max?0:i)):i
a c 
+channels {$is-1}
f. i==0?0:$alpha_max
if $axis
+shift. 0,$dir negate.
else
+shift. $dir,0 negate.
fi
+add[-1,-2]
/. 2 rm.. rv[^0] a[^0] c
l.
if $axis
if $ws>-1||$ws<1
if $ws>=0 $iw,1,100%,2,[$alpha_max*(1-abs($ws)),$alpha_max] a y else $iw,1,100%,2,[$alpha_max*(1-abs($ws)),$alpha_max] rv a y fi
fi
else
if $ws>-1||$ws<1
if $ws>=0 1,$ih,100%,2,[$alpha_max*(1-abs($ws)),$alpha_max] rv a x else 1,$ih,100%,2,[$alpha_max*(1-abs($ws)),$alpha_max] a x fi
fi
fi
+select_color 0,$alpha_middle,0
f.. "
const step = max(1,0%*min(w,h));
const angle = ($2*90)*pi/180;
const dx = step*cos(angle);
const dy = step*sin(angle);
if (!i(#-1),I,
ixf = xf = x; iyf = yf = y; lf = 0;
while (i(#-1,ixf=round(xf),iyf=round(yf)), ++lf; xf-=dx; yf-=dy);
ixb = xb = x; iyb = yb = y; lb = 0;
while (i(#-1,ixb=round(xb),iyb=round(yb)), ++lb; xb+=dx; yb+=dy);
(lb*lb*I(ixf,iyf) + lf*lf*I(ixb,iyb))/(lb^2+lf^2);
)"
channels 0
f.. "i#0==i#1?1:i"
rm.
f $influence_var>0?($influence_var==1?(i<(1-10^-8)*$alpha_max?0:i):(i<($influence_var*$alpha_max)?0:i)):i
f i!=0?i+$alpha_max
if $axis
if $ws>-1||$ws<1
if $ws>=0 r $iw,$ih,100%,100%,0,0,.5,0 else r $iw,$ih,100%,100%,0,0,.5,1 fi
fi
else
if $ws>-1&&$ws<1
if $ws>=0 r $iw,$ih,100%,100%,0,0,1,.5 else  r $iw,$ih,100%,100%,0,0,0,.5  fi
fi
fi
endl
s c
l[-2,-1] f.. "i==0?i#1:i" endl
rm.
a c
if $axis>0
s x
repeat $! l[$>] r 1,{h+1},100%,100%,0,0,.5,1 autocrop_components ,,,, a y r 1,$ih,100%,100%,0,0,.5,{1-$shift_var} endl done
a x
else
s y
repeat $! l[$>] r {w+1},1,100%,100%,0,0,1,.5 autocrop_components ,,,, a x r $iw,1,100%,100%,0,0,$shift_var,.5 endl done
a y
f "s==2?[i0,i1<0?0:i1]:(s==3?[i0,i1,i2<0?0:i2]:s==4?[i0,i1,i2,i3<0?0:i3]:s==5?[i0,i1,i2,i3,i4<0?0:i4])"
fi
s c
f. i>$alpha_max?0:i
a c
endl done
#@cli rep_sinowaterdist: (eq. to rep_sinusoidal_water_distortion)
rep_sinowaterdist: rep_sinusoidal_water_distortion $*
#@cli rep_sinusoidal_distortion: _xbalance>0,_ybalance>0,_scale>=0,_interpolation,_boundary_condition
#@cli : Shift by sinusoidal distortion formula.
rep_sinusoidal_water_distortion:
skip ${4=2},${5=1}
f
"
balanceY=y*sin(180)/$3*10;
balanceX=x*cos(180)/$3*10;
vx=x+cos(balanceY)*$1;
vy=y+sin(balanceX)*$2;
i(vx,vy,z,c,$4,($5?3:2));
"
#@cli rep_binaltquad: (eq. to rep_binary_alterating_quad_texture)
rep_binaltquad: rep_binary_alterating_quad_texture $*
#@cli rep_binary_alterating_quad_texture: _style={ 0 = Horizontal , 1 = Diagonal , 2 = Simple },_variable_1>=0,_variable_2>=0,_variable_3>=0,0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted },_modnum>0
#@cli : Generates a texture full of alternating quadrilateral shapes using binary logic. Converted, and extended from Asmageddon Quaddro Bumperoo/Inverto Paint.NET source code.
rep_binary_alterating_quad_texture:
skip ${4=128},${5=2},${6=0},${7=0},${8=0},${9=256},${10=255},${11=1}
channels 0 
style=$1
var_1=$2
var_2=$3
var_3=$4
operand={$1!=2?$5:2}
angle=$6
x_dir=$7
y_dir=$8
modnum=$9
normalize=$10
allow_normal=$11
f ang=pi*($angle/180);sd=w/h;ix=((x/w)-.5)/(h>w?1/sd:1);iy=((y/h)-.5)/(w>h?sd:1);IX=ix*cos(ang)-iy*sin(ang);IY=ix*sin(ang)+iy*cos(ang);ix=IX;iy=IY;ix+=.5/(h>w?1/sd:1);iy+=.5/(w>h?sd:1);ix=(w>h?ix*w:ix*h);iy=(w>h?iy*w:iy*h);ix=round(ix)+1;iy=round(iy)+1;$style==2?((!$x_dir?xor(ix,$var_1):xor(w-ix,$var_1))+(!$y_dir?xor(iy,$var_2):xor(h-iy,$var_2)))%$modnum:(int(((($style==1?($operand?($operand==1?(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))):($operand?($operand==1?(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))))/(int($operand!=2?$var_3:-$var_3)*2))-int(($style==1?($operand?($operand==1?(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))):($operand?($operand==1?(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))))/(int($operand!=2?$var_3:-$var_3)*2)))*($style==1?($operand?($operand==1?(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))):($operand?($operand==1?(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2))))))<int($operand!=2?$var_3:-$var_3)?($style==1?($operand?($operand==1?(abs($modnum)-1)-(((($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))%$modnum):($operand?($operand==1?(abs($modnum)-1)-(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))%$modnum)):($style==1?($operand?($operand==1?(abs($modnum)-1)-(((-($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))%$modnum):($operand?($operand==1?(abs($modnum)-1)-(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))%$modnum)))
if $allow_normal n 0,$normalize fi
#@cli rep_binaltquadc: (eq. to rep_binary_alterating_quad_c)
rep_binaltquadc: rep_binary_alterating_quad_c $*
#@cli rep_binary_alterating_quad_c: 0<=_colorspace<=13,_contain_alpha= { 0=No Alpha | 1=Alpha Included },_8bitmode= { 0=Not 8-Bit Value | 1=8-Bit Value } \ 0<=_channel_order<=5,0<=_channel_order<=5,0<=_channel_order<=5,0<=_channel_order<=5,0<=_channel_order<=5, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }
#@cli : Generates a texture full of alternating quadrilateral shapes using binary logic. Converted, and extended from Asmageddon Quaddro Bumperoo/Inverto Paint.NET source code.
rep_binary_alterating_quad_c:
repeat $! l[$>]
cs_mode=$1
cmyk_mode={$cs_mode==3?4:3}
contain_alpha={$2?1:0}
bitmode=$3
tch={$cmyk_mode+$contain_alpha}

skip ${7=0},${8=0},${9=0},${10=0},${11=0},${12=0},${13=0},${14=0},${15=0},${16=0},${17=0},${18=0},${19=0},${20=0},${21=0},${22=0},${23=0},${24=0},${25=0},${26=0},${27=0},${28=0},${29=0},${30=0},${31=0},${32=0},${33=0},${34=0},${35=0},${36=0},${37=0},${38=0},${39=0},${40=0},${41=0},${42=0},${43=0},${44=0},${45=0},${46=0},${47=0},${48=0},${49=0}

channels 0
r 100%,100%,100%,$tch

if {$tch==3} ($4,$5,$6)
elif {$tch==4} ($4,$5,$6,$7)
elif {$tch==5} ($4,$5,$6,$7,$8)
fi 

tc={w#1} s. x remove_duplicates tw={$!-1} if $tw<$tc v + error "Invalid Channel Order!" v - fi 
a[^0] x rv
($*)
if ($cs_mode==3||(($cs_mode>8&&$cs_mode<11)||$cs_mode<3))||$bitmode (256,256,256,256,255)
else
    if $cs_mode>3&&$cs_mode<7 (361,101,101,256)
    elif $cs_mode==7 (101,201,201,256)
    elif $cs_mode==8 (101,129,{ceil((pi)*200)},256)
    elif $cs_mode==11 (301,301,301,256)
    elif $cs_mode==12 (256,301,301,256)
    elif $cs_mode==13 (301,301,301,256)
    fi
fi
fact=9
repeat $tch
sh[1] {i(#0,$>,0)}
rep_binaltquad. {i(#2,8+$fact*$>,0)},{i(#2,9+$fact*$>,0)},{i(#2,10+$fact*$>,0)},{i(#2,11+$fact*$>,0)},{i(#2,12+$fact*$>,0)},{i(#2,13+$fact*$>,0)},{i(#2,14+$fact*$>,0)},{i(#2,15+$fact*$>,0)},{i(#3,$>,0)},{i(#3,$>,0)-1},{i(#2,16+$fact*$>,0)}
rm.
done
k[1]
if $cs_mode==3
    if $contain_alpha
    s c
    a[0-{$!-2}] c
    cmyk2rgb..
    *.. {255/254}
    a c
    else
    cmyk2rgb
    * {255/254}
    fi
else
    if ($cs_mode>8&&$cs_mode<11)||$cs_mode<3
        if $cs_mode==1 ac "ryb2rgb",rgb
        elif $cs_mode==2 ac "cmy2rgb",rgb
        elif $cs_mode==9 ac "ycbcr2rgb",rgb
        elif $cs_mode==10 ac "ycbcrglic2rgb",rgb
        fi
        cut 0,255
    else
        if $bitmode
            if $cs_mode==1 ac "ryb2rgb",rgb
            elif $cs_mode==4 ac "hsi82rgb",rgb
            elif $cs_mode==5 ac "hsv82rgb",rgb
            elif $cs_mode==6 ac "hsl82rgb",rgb
            elif $cs_mode==7 ac "lab82rgb",rgb
            elif $cs_mode==8 ac "lch82rgb",rgb
            elif $cs_mode==11 ac "yiq82rgb",rgb
            elif $cs_mode==12 ac "yuv82rgb",rgb
            elif $cs_mode==13 ac "xyz82rgb",rgb
            fi
            cut 0,255
        else
            if $cs_mode>3&&$cs_mode<7 
                f s<4?[i0,i1/100,i2/100,i3]:[i0,i1/100,i2/100]
                if $cs_mode==4 hsi2rgb
                elif $cs_mode==5 hsv2rgb
                elif $cs_mode==6 hsl2rgb
                fi
                cut 0,255
            elif $cs_mode==7
                f s<4?[i0,i1-100,i2-100,i3]:[i0,i1-100,i2-100]
                lab2rgb
            elif $cs_mode==8
                f s<4?[i0,i1,((i2-314.5)*(pi/3.145)/100),i3]:[i0,i1,((i2-314.5)*(pi/3.145)/100)]
                sh 0,2
                lch2rgb.
                rm.
            elif $cs_mode==11
            f s<4?[i0,i1-150,i2-150,i3]:[i0,i1-150,i2-150]
            yiq2rgb
            elif $cs_mode==12
            f s<4?[i0/255,(i1-150)/150,(i2-150)/150,i3]:[i0/255,(i1-150)/150,(i2-150)/150]
            yuv2rgb
            elif $cs_mode==13
            f s<4?[i0/300,i1/300,i2/300,i3]:[i0/300,i1/300,i2/300]
            xyz2rgb
            fi
        fi
    fi
fi
endl done
#@cli rep_strbul: (eq. to rep_strange_bulger)
rep_strbul: rep_strange_bulger $*
#@cli rep_strange_bulger : 0<=_angle<=360,_axis={ 0 = X-Axis | 1 = Y-Axis },_interpolation,_boundary_condition
#@cli : Performs a bulge effect found in Strange Bulger Series made by Asmageddon for Paint.NET.
rep_strange_bulger:
f "
Ang=$1;
BulgeAng=Ang*(pi/180);
cX=w/2;
cY=h/2;
vx=$2?x:cX-x;
vy=$2?cY-y:y;
vx=(vx^2)/cX;
vy=(vy^2)/cY;
vx=(x+(x-vx)*cos(BulgeAng)+(y-vy)*sin(BulgeAng));
vy=(y+(x-vx)*sin(BulgeAng)+(y-vy)*cos(BulgeAng));
i(vx,vy,z,c,$3,($4?3:2));
"
#@cli rep_strbulkal: (eq. to rep_strange_bulge_kaleidoscope)
rep_strbulkal:rep_strange_bulge_kaleidoscope $*
#@cli rep_strange_bulge_kaleidoscope:0<=_bulge_ang<=360,_axis_of_bulge= { 0=horizontal | 1=vertical },_scale>0,-1<_offset_main_x<=1,-1<_offset_main_y<=1,-1<_offset_kaleido_x<=1,-1<_offset_kaleido_y,0<=Surface_Ang<=360,_mirror_placement= { 0=inside-out | 1=outside-in },_boundary_condition= { 0=Periodic | 1=Mirror },1<=_interpolation<=5,_dimension_reference>0
#@cli:_dimension_reference refers to the base dimension used for calculation of bulging, it uses the biggest dimension as a reference for scaling. The PDN version of Strange Bulger Kaleidoscope does not have a dimension reference which means that bulges are dependent on the image size. This is to ensure that preview stays consistent with the end result. What you see is what you get as _dimension_reference variable is a internal dimension processing variable.
rep_strange_bulge_kaleidoscope:
skip ${4=0},${5=0},${6=0},${7=0},${8=0},${9=0},${10=0},${11=3},${12=1024}
if $3<10^-8 v + error "Scale cannot be 0 or less than 0!" v - fi
if $12==0 v + error "dimension_reference cannot be 0!" v - fi

shift {50*$4}%,{50*$5}%,0,0,3,1

f "
BulgeAng=pi*((h>w?360-$1:$1)/180);
ang=pi*($8/180);
sd=w/h;
ox=$6;
oy=$7*-1;
ox/=h>w?1/sd:1;
oy/=w>h?sd:1;
OX=ox*cos(ang)-oy*sin(ang);
OY=ox*sin(ang)+oy*cos(ang);
ox=OX;
oy=OY;
ed=abs(int($12));
ix=((x/w)-.5)/(h>w?1/sd:1);
iy=((y/h)-.5)/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
ix=IX;
iy=IY;
ix+=.5/(h>w?1/sd:1);
iy+=.5/(w>h?sd:1);
id=w>h?ed/w:ed/h;
iw=w*id;
ih=h*id;
ix*=ed;
iy*=ed;
cx=iw/2;
cy=ih/2;
xx=sqrt(abs(ix-cx-ox*(cx>cy?cx:cy)));
yy=sqrt(abs(iy-cy-oy*(cx>cy?cx:cy)));
xx*=$3*ed;
yy*=$3*ed;
xx/=100;
yy/=100;
vx=(w>h?$2:!$2)?xx:cx-xx;
vy=(w>h?$2:!$2)?cy-yy:yy;
vx=vx^2/cx;
vy=vy^2/cy;
vx=(xx+(xx-vx)*cos(BulgeAng)+(yy-vy)*sin(BulgeAng));
vy=(yy+(xx-vx)*sin(BulgeAng)+(yy-vy)*cos(BulgeAng));
vx*=w/ed;
vy*=h/ed;
i(vx,vy,z,c,$11,($10?3:2));
"
if $9 shift 50%,50%,0,0,3,1 fi
#@cli rep_logpindis: (eq. to rep_logarithmic_pinching_distortion)
rep_logpindis: rep_logarithmic_pinching_distortion $*
#@cli rep_logarithmic_pinching_distortion: _distortion_main>=0,-1<=_preshift_x<=1,-1<=_preshift_y<=1,-1<=_effposition_x<=1,-1<=_effposition_y<=1,_prescale_x,_prescale_y,_afterscale_x,_afterscale_y,0<=_angle<=360,_mirror_placement= { 0=outside-in | 1=inside-out },_lx_axis= { 0=different axis | 1=same axis},_ly_axis= { 0=different axis | 1=same axis},ix_dir={ 0=negative | 1=positive },iy_dir={ 0=negative | 1=positive },_boundary= { 0=Periodic | 1=Mirror },1<=_interpolation<=5,_dimension_ref>0
rep_logarithmic_pinching_distortion:
skip ${2=0},${3=0},${4=0},${5=0},${6=1},${7=1},${8=1},${9=1},${10=0},${11=0},${12=1},${13=0},${14=1},${15=0},${16=0},${17=5},${18=1024}
if $6==0||$7==0||$8==0||$9==0 v + error "Scale cannot be 0!" v - fi
if $17<1 v + error "interpolation cannot be less than 1" v - fi

shift {50*$2}%,{50*$3}%,0,0,3,1
f "
sd=w/h;
ang=pi*($10/180);
ox=$4*-1;
oy=$5;
ox/=h>w?1/sd:1;
oy/=w>h?sd:1;
OX=ox*cos(ang)-oy*sin(ang);
OY=ox*sin(ang)+oy*cos(ang);
ox=OX;
oy=OY;
ix=((x/w)-.5)/(h>w?1/sd:1);
iy=((y/h)-.5)/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
ix=IX;
iy=IY;
ix=abs(ix+ox/2)*$6;
iy=abs(iy+oy/2)*$7;
ed=int(abs($18));
ed/=2;
ix*=ed;
iy*=ed;
lx=ix==0||iy==0?log(10^-8)*$1:log($12?iy^2:ix*iy)*$1;
ly=iy==0||iy==0?log(10^-8)*$1:log($13?ix^2:ix*iy)*$1;
dx=($14?1:-1);
dy=($15?1:-1);
ix-=lx*dx;
iy-=ly*dy;
ix*=w/ed;
iy*=h/ed;
ix*=$8;
iy*=$9;
i(ix,iy,z,c,$17,($16?3:2));
"
if $11 shift 50%,50%,0,0,3,1 fi
#@cli rep_sqrlogpindis: (eq. to rep_square_root_logarithmic_pinching_distortion)
rep_sqrlogpindis: rep_square_root_logarithmic_pinching_distortion $*
#@cli rep_square_root_logarithmic_pinching_distortion: _distortion_main>=0,-1<=_preshift_x<=1,-1<=_preshift_y<=1,-1<=_effposition_x<=1,-1<=_effposition_y<=1,_prescale_x,_prescale_y,_afterscale_x,_afterscale_y,0<=_angle<=360,_mirror_placement= { 0=outside-in | 1=inside-out },_lx_axis= { 0=different axis | 1=same axis},_ly_axis= { 0=different axis | 1=same axis},ix_dir={ 0=negative | 1=positive },iy_dir={ 0=negative | 1=positive },_boundary= { 0=Periodic | 1=Mirror },1<=_interpolation<=5,_dimension_ref>0
rep_square_root_logarithmic_pinching_distortion:
skip ${2=0},${3=0},${4=0},${5=0},${6=1},${7=1},${8=1},${9=1},${10=0},${11=0},${12=1},${13=0},${14=1},${15=0},${16=0},${17=5},${18=1024}
if $6==0||$7==0||$8==0||$9==0 v + error "Scale cannot be 0!" v - fi
if $17<1 v + error "interpolation cannot be less than 1" v - fi

shift {50*$2}%,{50*$3}%,0,0,3,1

f "ed=int(abs($18));
sd=w/h;
ang=pi*($10/180);
ox=$4;
oy=$5*-1;
ox/=h>w?1/sd:1;
oy/=w>h?sd:1;
OX=ox*cos(ang)-oy*sin(ang);
OY=ox*sin(ang)+oy*cos(ang);
ox=OX;
oy=OY;
ix=((x/w)-.5)/(h>w?1/sd:1);
iy=((y/h)-.5)/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
ix=IX;
iy=IY;
ix+=.5/(h>w?1/sd:1);
iy+=.5/(w>h?sd:1);
iw=w/(h>w||w==h?1/sd:1);
ih=h/(w>h||w==h?1:1/sd);
id=ed/w;
iw*=id;
ih*=id;
cx=iw/2;
cy=ih/2;
ix*=1;
iy*=1;
xx=sqrt(abs(ix*ed-cx-cx*ox))*$6;
yy=sqrt(abs(iy*ed-cy-cx*oy))*$7;
vx=xx*100;
vy=yy*100;
lx=xx==0||yy==0?log(10^-8)*$1:log($12?yy^2:xx*yy)*$1;
ly=xx==0||yy==0?log(10^-8)*$1:log($13?xx^2:xx*yy)*$1;
vx+=($14?-1:1)*lx;
vy+=($15?-1:1)*ly;
vx*=w/ed;
vy*=h/ed;
vx*=$8;
vy*=$9;
i(vx,vy,z,c,$17,($16?3:2));
"

if $11 shift 50%,50%,0,0,3,1 fi
#@gui _<b>Testing</b>
#@gui <i>Reptorian</i>

#@gui Modulos Operations : fx_modulo, fx_modulo_preview(0)
#@gui : note = note("This filters applies modulo operation after arithmetic operation. Future version of this filter might be able to be used on different color space and channels.")
#@gui : sep = separator()
#@gui : Multiply = float(1,0,32)
#@gui : Addition = int(0,0,255)
#@gui : sep = separator(), note = note("<small>Author : <i>Reptorian</i>.      Latest update : <i>2018/08/18</i>.</small>")
fx_modulo:
repeat $! l[$>] split_opacity l[0]
mul $1 add $2 mod 256
endl a c endl done
fx_modulo_preview :
gui_split_preview "fx_modulo $*"

#@gui Channel Overblur-Overline-Blur-Sharpen : fx_OOBS, _fx_OOBS_preview(0)
#@gui : sep = separator()
#@gui : 1. Color Space = choice("RGB&#47;sRGB","HSV&#47;HSV8","HSL&#47;HSL8","HSI&#47;HSI8","LCH&#47;LCH8","Lab&#47;Lab8","YCbCr&#47;YCbCrGLIC","YIQ&#47;YIQ8","YUV&#47;YUV8","XYZ&#47;XYZ8")
#@gui : 2. Alt Choice = bool(0)
#@gui : sep = separator()
#@gui : note = note("Configuration for OOBS filter")
#@gui : 3. Use Master Editor(Manipulate Multiple Channels at Once?) = bool(1)
#@gui : 4. Edit Channel #1? = bool(1)
#@gui : 5. Edit Channel #2? = bool(1)
#@gui : 6. Edit Channel #3? = bool(1)
#@gui : 7. Edit Alpha Channel? = bool(0)
#@gui : sep = separator()
#@gui : note = note("<b>Master Editor</b>")
#@gui : 8. Overblur/Overline/Sharpen/Blur = choice ("Overblur","Overline","Blur","Sharpen")
#@gui : 9. Effect Factor = float (1,.1,100)
#@gui : 10. Multiplication Factor = float (1,.1,10)
#@gui : 11. Blend Operation = choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : 12. Blending Opacity = float (100,.01,100)
#@gui : sep = separator(), note = note("<u>Individual Channels</u>"), sep = separator()
#@gui : note = note("<b>Channel #1</b>")
#@gui : 13. Overblur/Overline/Sharpen/Blur = choice ("Overblur","Overline","Blur","Sharpen")
#@gui : 14. Effect Factor = float (1,.1,10)
#@gui : 15. Multiplication Factor = float (1,.1,10)
#@gui : 16. Blend Operation = choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : 17. Blending Opacity = float (100,.01,100)
#@gui : sep = separator()
#@gui : note = note("<b>Channel #2</b>")
#@gui : 18. Overblur/Overline/Sharpen/Blur = choice ("Overblur","Overline","Blur","Sharpen")
#@gui : 19. Effect Factor = float (1,.1,10)
#@gui : 20. Multiplication Factor = float (1,.1,10)
#@gui : 21. Blend Operation = choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : 22. Blending Opacity = float (100,.01,100)
#@gui : sep = separator()
#@gui : note = note("<b>Channel #3</b>")
#@gui : 23. Overblur/Overline/Sharpen/Blur = choice ("Overblur","Overline","Blur","Sharpen")
#@gui : 24. Effect Factor = float (1,.1,10)
#@gui : 25. Multiplication Factor = float (1,.1,10)
#@gui : 26. Blend Operation = choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : 27. Blending Opacity = float (100,.01,100)
#@gui : sep = separator()
#@gui : note = note("<b>Alpha Channel</b>")
#@gui : 28. Overblur/Overline/Sharpen/Blur = choice ("Overblur","Overline","Blur","Sharpen")
#@gui : 29. Effect Factor = float (1,.1,10)
#@gui : 30. Multiplication Factor = float (1,.1,10)
#@gui : 31. Blend Operation = choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : 32. Blending Opacity = float (100,.01,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2019/01/7</i>.</small>")
fx_OOBS:
-m "MergeChoice : $""=_mode" -MergeChoice "add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor","edges","error"
split_opacity
local[0]
if {$2==0}
if ($1==1} rgb2hsv
elif ($1==2} rgb2hsl
elif ($1==3} rgb2hsi
elif ($1==4} rgb2lch
elif ($1==5} rgb2lab
elif ($1==6} rgb2ycbcr
elif ($1==7} rgb2yiq
elif ($1==8} rgb2yuv
elif ($1==9} rgb2xyz
fi
elif {$2==1}
if {$1==0} rgb2srgb
elif {$1==1} rgb2hsv8
elif {$1==2} rgb2hsl8
elif {$1==3} rgb2hsi8
elif {$1==4} rgb2lch8
elif {$1==5} rgb2lab8
elif {$1==6} rgb2ycbcrglic
elif {$1==7} rgb2yiq8
elif {$1==8} rgb2yuv8
elif {$1==9} rgb2xyz8
fi fi
s c
if {$3==1}
if {$4==1} local[0] +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 endl fi
if {$5==1} local[1] +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 endl fi
if {$6==1} local[2] +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 endl fi
elif {$3==0}
if {$4==1} local[0] +oobs_edit[0] $13,$14,$15 -blend[0,1] ${_mode{$16+1}},$17/100 endl fi
if {$5==1} local[1] +oobs_edit[0] $18,$19,$20 -blend[0,1] ${_mode{$21+1}},$22/100 endl fi
if {$6==1} local[2] +oobs_edit[0] $23,$24,$25 -blend[0,1] ${_mode{$26+1}},$27/100 endl fi
fi
a c
if {$2==0}
if ($1==1} hsv2rgb
elif ($1==2} hsl2rgb
elif ($1==3} hsi2rgb
elif ($1==4} lch2rgb
elif ($1==5} lab2rgb
elif ($1==6} ycbcr2rgb
elif ($1==7} yiq2rgb
elif ($1==8} yuv2rgb
elif ($1==9} xyz2rgb
fi
elif {$2==1}
if {$1==0} srgb2rgb
elif {$1==1} hsv82rgb
elif {$1==2} hsl82rgb
elif {$1==3} hsi82rgb
elif {$1==4} lch82rgb
elif {$1==5} lab82rgb
elif {$1==6} ycbcrglic2rgb
elif {$1==7} yiq82rgb
elif {$1==8} yuv82rgb
elif {$1==9} xyz82rgb
fi fi
endl
local[1]
if {$3==1} if {$7==1} +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 fi
elif {$3==0} if {$7==1} +oobs_edit[0] $28,$29,$30 -blend[0,1] ${_mode{$31+1}},$32/100 fi
fi
endl
a c
oobs_edit :
if {$1==0} -overblur_overline[0] 0,$2,$3 fi
if {$1==1} -overblur_overline[0] 1,$2,$3 fi
if {$1==2} -blur[0] {$2*$3} fi
if {$1==3} -sharpen[0] {$2*$3} fi
overblur_overline :
if {$1==0} +blur[0] $2
elif {$1==1} +sharpen[0] $2
fi
+blend[0,1] difference
mul[2] $3
remove[1]
-blend[0,1] add
_fx_OOBS_preview :
gui_split_preview "fx_OOBS ${1--2}",$-1
#@gui Vibrato: fx_vibrato, _fx_vibrato_preview(0)
#@gui : note = note("This is the advanced version of the Vibrato filter. If you do want to manipulate multiple channels at once, use <u>Vibrato - Basic</u> filter. <i>Note: Disable channel mulplication for non-transparent images.</i> \n\n")
#@gui : note = note("This filter is the one of the G'MIC version of <b>MadJik's</b> <i>Paint.NET plugin</i>")
#@gui : sep = separator()
#@gui : Colour Space = choice("RGB", "CMY", "HSI", "HSL", "HSV", "LAB", "LCH", "YCbCr", "YCbCr-Glic", "YUV", "YIQ", "XYZ", "Bayer")
#@gui : sep = separator()
#@gui : Manipulate Multiple Channels at Once? = bool(1)
#@gui : Process Channel 1? = bool(1)
#@gui : Process Channel 2? = bool(1)
#@gui : Process Channel 3? = bool(1)
#@gui : Process Alpha Channel? = bool(1)
#@gui : Inherit Alpha? = bool(1)
#@gui : X-Orientation = bool(1)
#@gui : Y-Orientation = bool(1)
#@gui : U- Factor = float(.85,.1,15)
#@gui : V- Factor = float(.85,.1,15)
#@gui : X-Scale Factor = float(1,.1,15)
#@gui : Y-Scale Factor = float(1,.1,15)
#@gui : XY-Scale Factor = float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift = float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift = float(0,-200,200)
#@gui : Elevation = float(.7,-100,100)
#@gui : Multiply Blending = bool(0)
#@gui : Invert Vibrato = bool(0)
#@gui : Vibrato Blending Factor = float (100,0,100)
#@gui : Channel Influence Factor = float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor = float(1,1,32)
#@gui : sep = separator()
#@gui : note = note("- <b>Channel #1</b> - ")
#@gui : Process Channel? = bool(1)
#@gui : X-Orientation = bool(1)
#@gui : Y-Orientation = bool(1)
#@gui : U-Factor = float(.85,.1,15)
#@gui : V-Factor = float(.85,.1,15)
#@gui : X-Scale Factor = float(1,.1,15)
#@gui : Y-Scale Factor = float(1,.1,15)
#@gui : XY-Scale Factor = float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift = float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift = float(0,-200,200)
#@gui : Elevation = float(.7,-100,100)
#@gui : Multiply Blending = bool(0)
#@gui : Invert Vibrato = bool(0)
#@gui : Vibrato Blending Factor = float (100,0,100)
#@gui : Channel Influence Factor = float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor = float(1,1,32)
#@gui : sep = separator()
#@gui : note = note("- <b>Channel #2</b> - ")
#@gui : Process Channel? = bool(1)
#@gui : X-Orientation = bool(1)
#@gui : Y-Orientation = bool(1)
#@gui : U-Factor = float(.85,.1,15)
#@gui : V-Factor = float(.85,.1,15)
#@gui : X-Scale Factor = float(1,.1,15)
#@gui : Y-Scale Factor = float(1,.1,15)
#@gui : XY-Scale Factor = float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift = float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift = float(0,-200,200)
#@gui : Elevation = float(.7,-100,100)
#@gui : Multiply Blending = bool(0)
#@gui : Invert Vibrato = bool(0)
#@gui : Vibrato Blending Factor = float (100,0,100)
#@gui : Channel Influence Factor = float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor = float(1,1,32)
#@gui : sep = separator()
#@gui : note = note("- <b>Channel #3</b> - ")
#@gui : Process Channel? = bool(1)
#@gui : X-Orientation = bool(1)
#@gui : Y-Orientation = bool(1)
#@gui : U-Factor = float(.85,.1,15)
#@gui : V-Factor = float(.85,.1,15)
#@gui : X-Scale Factor = float(1,.1,15)
#@gui : Y-Scale Factor = float(1,.1,15)
#@gui : XY-Scale Factor = float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift = float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift = float(0,-200,200)
#@gui : Elevation = float(.7,-100,100)
#@gui : Multiply Blending = bool(0)
#@gui : Invert Vibrato = bool(0)
#@gui : Vibrato Blending Factor = float (100,0,100)
#@gui : Channel Influence Factor = float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor = float(1,1,32)
#@gui : sep = separator()
#@gui : note = note("- <b>Alpha Channel #1</b> - ")
#@gui : Process Channel? = bool(0)
#@gui : X-Orientation = bool(1)
#@gui : Y-Orientation = bool(1)
#@gui : U-Factor = float(.85,.1,15)
#@gui : V-Factor = float(.85,.1,15)
#@gui : X-Scale Factor = float(1,.1,15)
#@gui : Y-Scale Factor = float(1,.1,15)
#@gui : XY-Scale Factor = float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift = float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift = float(0,-200,200)
#@gui : Elevation = float(.7,-100,100)
#@gui : Multiply Blending = bool(1)
#@gui : Invert Vibrato = bool(0)
#@gui : Vibrato Blending Factor = float (100,0,100)
#@gui : Channel Influence Factor = float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor = float(1,1,32)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2018/12/19</i>.</small>")

fx_vibrato:
split_opacity
local[0]
if {$1==1} rgb2cmy
elif {$1==2} rgb2hsi8
elif {$1==3} rgb2hsl8
elif {$1==4} rgb2hsv8
elif {$1==5} rgb2lab8
elif {$1==6} rgb2lch8
elif {$1==7} rgb2ycbcr
elif {$1==8} rgb2ycbcrglic
elif {$1==9} rgb2yuv8
elif {$1==10} rgb2yiq8
elif {$1==11} rgb2xyz8
elif {$1==12} rgb2bayer 0
fi

s c

if {$2==1}
if {$3==1} -vibrato[0] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22 fi
if {$4==1} -vibrato[1] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22 fi
if {$5==1} -vibrato[2] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22 fi
elif {$2==0}
if {$23==1} -vibrato[0] $24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38 fi
if {$39==1} -vibrato[1] $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54 fi
if {$55==1} -vibrato[2] $56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70 fi
fi
a c

if {$1==1} cmy2rgb
elif {$1==2} hsi82rgb
elif {$1==3} hsl82rgb
elif {$1==4} hsv82rgb
elif {$1==5} lab82rgb
elif {$1==6} lch82rgb
elif {$1==7} ycbcr2rgb
elif {$1==8} ycbcrglic2rgb
elif {$1==9} yuv82rgb
elif {$1==10} yiq82rgb
elif {$1==11} xyz82rgb
elif {$1==12} bayer2rgb 0,0,0
fi
endl
if {$2==1}
if {$6==1} -vibrato[1] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$7,$19,$20,$21,$22 fi
elif {$2==0}
if {$71==1} -vibrato[1] $72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86 fi
fi
a c

vibrato:
repeat $! l[$>]
n 0,255
f "
q=($8/100)*w;
l=($9/100)*h;
X=(($1?w-x+q:x+q)/w-.5) * 2 * 1/$5 * 1/$7;
Y=(($2?h-y+l:y+l)/h-.5) * 2 * 1/$6 * 1/$7;
U=sqrt($3);
V=sqrt($4);
Z=((X-Y) * (X-U) * (X+U) * (Y-V) * (Y+V))+ $10;
C=(Z+((1-i/255)/(($3>1?$3:1/$3)*($4>1?$4:1/$4)))*$14)*(Z+((1-i/255)/(($3>1?$3:1/$3)*($4>1?$4:1/$4)))*$14);
F=abs(C)>1?C-int(C):C;
A=$12?F:1-F;
B=$11?(i*A):A*200;
E=$13/100*B+(1-$13/100)*i;
" n 0,255 mul $15 mod 256
endl done

_fx_vibrato_preview :
gui_split_preview "fx_vibrato ${1--2}",$-1

#@gui Construction Material Texture : _cons_turb, _cons_turb_preview(0)
#@gui : note = note("Construction Material Texture filter is based off the following tutorial by <b>theonlychad</b> for Paint.NET software: <a href="https://forums.getpaint.net/topic/16075-concrete-texture-tutorial/">Concrete Texture Tutorial</a>.\n")
#@gui : sep = separator(), note = note("<b>Turbulance Texture</b>")
#@gui : 1-3. Background Color = color(0,0,0)
#@gui : 4. Radius = float(88,1,1024)
#@gui : 5. Octaves = int(8,1,12)
#@gui : 6. Damping per Octave = float(2.5,1,10)
#@gui : 7. Mode = choice(2,"Turbulence","Turbulence 2","Fractal Noise","Fractured Clouds","Stardust","Pea Soup")
#@gui : 8-10. Color Balance = color(128,128,128)
#@gui : sep = separator(), note = note("<b>Noise Processing</b>")
#@gui : 11. Amplitude = float(20,0,200)
#@gui : 12. Noise Type = choice(3,"Gaussian","Uniform","Salt and Pepper","Poisson")
#@gui : sep = separator(), 13. Channel(s) = choice(0,"RGB [All]","RGB [Red]","RGB [Green]","RGB [Blue]","Linear RGB [All]","Linear RGB [Red]","Linear RGB [Green]","Linear RGB [Blue]","YCbCr [Luminance]","YCbCr [Blue-Red Chrominances]","YCbCr [Blue Chrominance]","YCbCr [Red Chrominance]","YCbCr [Green Chrominance]","Lab [Lightness]","Lab [ab-Chrominances]","Lab [a-Chrominance]","Lab [b-Chrominance]","Lch [ch-Chrominances]","Lch [c-Chrominance]","Lch [h-Chrominance]","HSV [Hue]","HSV [Saturation]","HSV [Value]","HSI [Intensity]","HSL [Lightness]","CMYK [Cyan]","CMYK [Magenta]","CMYK [Yellow]","CMYK [Key]","YIQ [Luma]","YIQ [Chromas]")
#@gui : 14. Value Action = choice(1,"None","Cut","Normalize")
#@gui : sep = separator(), note = note("<b>Grayscale Processing</b>")
#@gui : 15. Colour Space = choice("RGB","sRGB")
#@gui : 15. Channel 1 = float(1,0,3)
#@gui : 16. Channel 2 = float(1,0,3)
#@gui : 17. Channel 3 = float(1,0,3)
#@gui : 18. Normalise = bool(1)
#@gui : 19. Desaturation (%) = float (100,0,100)
#@gui : sep = separator(), note = note("<b>Self-Image Processing</b>")
#@gui : 21. Self-Blending = choice(20,"add","burn","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","linearburn","linearlight","luminance","multiply","negation","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","vividlight")
#@gui : 22. Self-Blending Opacity (%) = float (100,0,100)
#@gui : 23. Self-Blending V. Original Blending = choice(15,"add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor")
#@gui : 24. Self-Blend V. Original Opacity (%) = float (100,0,100)
#@gui : sep = separator(), note = note("<b>Value Processing</b>")
#@gui : 25. Value Action = choice(2,"None","Cut","Normalize")
#@gui : 26. Number #1 = float(0,0,255)
#@gui : 27. Number #2 = float(188,0,255)
#@gui : 28. Equalize? = bool(0)
#@gui : 29. Negate? = bool(0)
#@gui : sep = separator(), note = note("<b>Warp by Intensity</b>")
#@gui : 30. X-Factor = float(0.19,-6,6)
#@gui : 31. Y-Factor = float(0.52,-6,6)
#@gui : sep = separator()
#@gui : 32. X-Offset = float(128,0,255)
#@gui : 34. Y-Offset = float(128,0,255)
#@gui : sep = separator()
#@gui : 34. Correlated Channels = bool(0)
#@gui : 35. Interpolation = choice(1,"Nearest Neighbor","Linear")
#@gui : 36. Boundary = choice(2,"Transparent","Nearest","Periodic","Mirror")
#@gui : sep = separator(), 37. Channel(s) = choice("All","RGBA [All]","RGB [All]","RGB [Red]","RGB [Green]","RGB [Blue]","RGBA [Alpha]","Linear RGB [All]","Linear RGB [Red]","Linear RGB [Green]","Linear RGB [Blue]","YCbCr [Luminance]","YCbCr [Blue-Red Chrominances]","YCbCr [Blue Chrominance]","YCbCr [Red Chrominance]","YCbCr [Green Chrominance]","Lab [Lightness]","Lab [ab-Chrominances]","Lab [a-Chrominance]","Lab [b-Chrominance]","Lch [ch-Chrominances]","Lch [c-Chrominance]","Lch [h-Chrominance]","HSV [Hue]","HSV [Saturation]","HSV [Value]","HSI [Intensity]","HSL [Lightness]","CMYK [Cyan]","CMYK [Magenta]","CMYK [Yellow]","CMYK [Key]","YIQ [Luma]","YIQ [Chromas]")
#@gui : sep = separator(), note = note("<b>Style Processing</b>")
#@gui : 38. Blur Original = float(0,0,16)
#@gui : sep = separator(), note = note("<b>Butterworth Bandpass Processing</b>")
#@gui : 39. Activate Butterworth Bandpass Processing = bool(0)
#@gui : 40. Create Copy? = bool(0)
#@gui : 41. LP Frequency Power = float(3,0,16)
#@gui : 42. LP Order Cube Root = float(2,0,4)
#@gui : 43. HP Frequency Power = float(4,0,16)
#@gui : 44. HP Order Cube Root = float(2,0,4)
#@gui : 45. Colour Space = choice("RGB","sRGB","HSV8","HSV","HSL8","HSL","HSI8","HSI","LCH8","LCH","Lab8","Lab","YCbCr","YCbCrGLIC","YCbCrJPEG","YIQ8","YIQ","YUV8","YUV","HCY","XYZ8","XYZ","CMY","CMYK","Bayer")
#@gui : 46. Absolute = bool(1)
#@gui : 47. Makeup Gain = bool(1)
#@gui : sep = separator(), note = note("<b>Relief Processing</b>")
#@gui : 48. Activate Relief Processing = bool(1)
#@gui : 49. Angle = float(0,0,360)
#@gui : 50. Depth (%) = float(100,0,200)
#@gui : 51. Smoothness = float(0,0,10)
#@gui : 52. Blending Mode = choice(0,"Grain Extract","Grain Merge")
#@gui : 53. Blending Opacity (%) = float(100,0,100)
#@gui : sep = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/1/27</i>.</small>")
_cons_turb :
repeat $! l[$>] cons_turb $* endl done
cons_turb :
-m "MergeChoice : $""=_mode" -MergeChoice "add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor","edges","error"
skip {$23==0},{$25==0},{$26==0},{$29==0},{$48==0}
fill_color ${1-3}
turbulence ${4-6},0,$7
balance_gamma ${8-10}
remove_opacity
if  {$13<=4} ac "_fx_noise $11,$12",{$13+2},$14
else ac "_fx_noise $11,$12",{$13+3},$14 fi
remove_opacity
+jr_desaturate ${15-19}
blend normal,$20/100
+cons_self_blend $21,$22
blend ${_mode{$23+1}},$24/100
if {$25==1} cut $26,$27
elif {$25==2} n $26,$27 fi
if {$28==1} ac "equalize",rgb fi
if {$29==1} negate fi
fx_make_seamless 256
fx_warp_by_intensity ${30-37}
if {$39==1} if {$40==0} blur $38 fx_butterworth_bp ${41-45},0,${46-47} if {$48==1} +emboss_image $49,{$50/100},$51 fi else +fx_butterworth_bp ${41-45},0,${46-47} blur[0] $38 if {$48==1} emboss_image[1] $49,{$50/100},$51  fi fi
elif {$39==0} blur $38 if {$48==1} +emboss_image $49,{$50/100},$51  fi fi
if {$48==1} if $52 blend grainmerge,$53/100 else blend grainextract,$53/100 fi fi
cons_self_blend :
-m "MergeChoice : $""=_mode" -MergeChoice "add","burn","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","linearburn","linearlight","luminance","multiply","negation","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","vividlight","edges","error"
[0]
blend ${_mode{$1+1}},$2/100
_cons_turb_preview :
gui_split_preview "_cons_turb $*",${-3--1}
#@gui Emboss-Relief : fx_emboss_relief, fx_emboss_relief_preview(0)
#@gui : sep = separator(), Enable Extreme Emboss or Relief? = bool(0), sep = separator()
#@gui : Angle = float(0,0,360)
#@gui : Depth (%) = float(100,0,500)
#@gui : Depth (%) = float(500,500,5000)
#@gui : Smoothness = float(0,0,10)
#@gui : Invert Embossing? = bool(0)
#@gui : Preserve Alpha? = bool(1)
#@gui : sep = separator(), note = note("Relief Section")
#@gui : Apply Relief? = bool(1)
#@gui : Blending Opacity (%) = float(100,0,100)
#@gui : sep = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<small>Author: Reptorian, Samj.      Latest Update: <i>2019/3/24</i>.</small>")
fx_emboss_relief : to_a repeat $! l[$>] split_opacity if $8 +em[0] {$6?$2+180:$2},{$1?$4/100:$3/100},$5 blend[^1] grainmerge,{$9/100} else em[0] {$6?$2+180:$2},{$1?$4/100:$3/100},$5 fi if $7 a c else k[0] fi endl done
fx_emboss_relief_preview :
gui_split_preview "fx_emboss_relief $*",${-3--1}
u "{$1}"\
"{$2}"\
"{$3}_"{$1==1?0:2}\
"{$4}_"{$1==1?2:0}\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}"\
"{$9}_"{$8==1?2:1}\
"{$10}{$11,$12}"
#@gui Premade Palette : _palgen, _palgen_preview(0)
#@gui : note = note("This filter creates palettes. Credits are given below. "), sep = separator()
#@gui : Palette = choice(10,"BW-2","RGB-3","B-RGB-4","BW-RGB-5","CMY-3","CMYK-4","W-CMYK-5","RGBCMY-6","1-Bit RGB-8","Aurora-256","Playpal-249","Andrew Kensler - 16","Andrew Kensler - 32","Andrew Kensler - 54","AAP-12","AAP-16","AAP-64","AAP-128","DB8","DB16","DB32","DB-ISO22","Endesga-8","Endesga-16","Endesga-32","Endesga-36","Endesga-64","XAIUE-22","P-DX-15","Cabana-64","Fantasy - 16","Fantasy - 24","Tranquil Fantasy - 23","Tranquility Plus Fantasy - 39","Faraway-48","Fleja Master - 33","Koni-32","Linear Basic - 31","Arcade-29","ARQ-16","BLK-36","CD-BAC-16","CG Arne-16","CPC BOY-32","DimWiddy-23","||||-22","FTZ Ethereal - 16","GZXP-11","Island-16","Journey-64","Nature's Embrace-55","Nauris-16","Pear-36","Pineapple-32","Rosy-42","Softy-15","SPEC-12","Starmancer - 52","Superb-8","Sweetie - 16","Taffy-16","Todayland-25","Zughy - 32","ENOS-16","Equpix-15","Night-16","Simple JPC-16","Acid-15","Battery-24","Crimso-11","DRZ-A-15","Eggy-15","Jewel-15","Polar-11","BoomBoom - 7","Generic-8","Matriax8c","N1 TH - 26","Autum-15","Y-Autum-15","Jerry Pie-22","Naji-16","Blessing - 5","Fairy Tales-8","Fuzz-4","Pastel - 15","TUI-15","Cave-8","Psygnosia-16","Marshmellow-32","Rabbit-7","Finlal-11","ykb-22","Graveyard - 21","Steam Lords - 16","AAP-Radiant-16","Daruda-22","Rust-6","XAIUE-Radiant-22","Firestorm-9","Supernova-7","NYX8","OIL-6","Fornax Void I-256","Fornax Void II-128","Pixelwave-12","MoonLit-39","Autochrome - 3","Autochrome - 5","GB - Default #1 - 4","GB - Default #2 - 4","GB - Black Zero - 4","GB - Easy - 4","GB - Arne - 4","GB - PJ - 4","GB - Kirokaze - 4","GB - Cyber - 4","GB - Grapefruit - 4","GB - Forest - 4","GB - Ice Cream - 4","GB - RB - 4","GB - Chocolate - 4","Arne-4","Halloween Pumpkin - 4","Amiga 2600 NTSC-256","Amiga 2600 PAL-104","Amiga 2600 SECAM-8","Amiga 7800 MESS-256","Amiga 7800-256","Amstrad CPC - 27","Apple II-15","Color/Graphics Adapter - 16","Color/Graphics Adapter Mode 0 Low-4","Color/Graphics Adapter Mode 0 High-4","Color/Graphics Adapter Mode 1 Low-4","Color/Graphics Adapter Mode 1 High-4","Color/Graphics Adapter Mode 2 Low-4","Color/Graphics Adapter Mode 2 High-4","Commodore 64 [Pepto] - 16","Commodore 64 [Colodore] - 16","Commodore Vic-20 - 16","Colecovision-15","Japanese MSX - 16","Mac II - 16","NES-55","PICO-8","Risc OS-16","SAM Coupe-128","Thomson MO5-16","VGA-244","ZX Spectrum - 15","GNOME-32","Electronic Crayon - 22","CHIP16","MSX-15","Deluxe Paint - 244","LMS-16","XP - 28","Vista - 28")
#@gui : X-Position = choice(1,"Left","Middle","Right")
#@gui : Y-Position = choice(1,"Top","Middle","Bottom")
#@gui : Palette Width = int(1,1,32)
#@gui : Palette Scaling = int(1,1,25)
#@gui : Flip Palette Rows = bool(0)
#@gui : Palette Rotation = choice(0,"0","90","270)
#@gui : Mirror X-Axis Palette = bool(0)
#@gui : Mirror Y-Axis Palette = bool(0)
#@gui : Blend Palette to Image(s)? = bool(1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<b>Palette CLI Information</b>\n\n <i>Main Source of Palettes - </i><a href=\"https://lospec.com/palette-list\"> LoSpec Palette List</a>\n\nPalette Number -- pal number_id = pal name_id -- Full Palette Name by Author[if mentioned]\n\n1 -- pal 0 = pal bw -- Black & White\n2 -- pal 1 = pal rgb -- Red-Green-Blue\n3 -- pal 2 = pal b_rgb -- Black w/ Red-Green-Blue\n4 -- pal 3 = pal bw_rgb -- Black & White w/ Red-Green-Blue \n5 -- pal 4 = pal cmy -- Cyan-Magenta-Yellow\n6 -- pal 5 = pal cmyk -- Cyan-Magenta-Yellow-Black\n7 -- pal 6 = pal wcmyk -- White-Cyan-Magenta-Black\n8 -- pal 7 = pal rgbcmy -- Red-Green-Blue w/ Cyan-Magenta-Yellow\n9 -- pal 8 = pal 1bitrgb -- 1 BPC RGB\n10 -- pal 9 = pal aurora -- Aurora by GrafxKid\n11 -- pal 10 = pal playpal -- PLAYPAL by id Tech 1/DOOM Engine\n12 -- pal 11 = pal kens16 -- Andrew Kensler 16 by Andrew Kensler\n13 -- pal 12 = pal kens32 -- Andrew Kensler 32 by Andrew Kensler\n14 -- pal 13 = pal kens54 -- Andrew Kensler 54 by Andrew Kensler\n15 -- pal 14 = pal aap12 -- AAP-Micro 12 by Adigun Polack\n16 -- pal 15 = pal aap16 -- AAP-16 by Adigun Polack\n17 -- pal 16 = pal aap64 -- AAP-64 by Adigun Polack\n18 -- pal 17 = pal aap128 -- AAP-SPLENDOR128 by Adigun Polack\n19 -- pal 18 = pal db8 -- DB8 by DawnBringer\n20 -- pal 19 = pal db16 -- DB16 by DawnBringer\n21 -- pal 20 = pal db32 -- DB32 by DawnBringer\n22 -- pal 21 = pal db_iso22 -- DB-ISO22 by DawnBringer\n23 -- pal 22 = pal edg8 -- Endesga-8 by Endesga\n24 -- pal 23 = pal edg16 -- Endesga-16 by Endesga\n25 -- pal 24 = pal edg32 -- Endesga-32 by Endesga\n26 -- pal 25 = pal edg36 -- Endesga-36 by Endesga\n27 -- pal 26 = pal edg64 -- Endesga-64 by Endesga\n28 -- pal 27 = pal xaiue -- XAIUE-22 by xaiue\n29 -- pal 28 = pal 15pdx -- 15P DX by GrafxKid\n30 -- pal 29 = pal cabana64 -- Cabana-64 by Crabby\n31 -- pal 30 = pal fant16 -- Fantasy 16 by Brettybooop\n32 -- pal 31 = pal fant24 -- Fantasy 24 by Gabriel C.\n33 -- pal 32 = pal tf23 -- Tranquil Fantasy 23 by windfall.apples\n34 -- pal 33 = pal tfp39 -- Tranquility Plus 39 by windfall.apples\n35 -- pal 34 = pal faraway48 -- Faraway 48 by Igor Ferreira.\n36 -- pal 35 = pal fleja_m -- Fleja Master Palette by Fleja\n37 -- pal 36 = pal koni32 -- Koni32 by Konic\n38 -- pal 37 = pal linearbasic -- Linear Color Palette Basic by GrafxKid\n39 -- pal 38 = pal arcade29 -- Arcade Standard 29 by GrafxKid\n40 -- pal 39 = pal arq16 -- ARQ16 by Endesga\n41 -- pal 40 = pal blk36 -- BLK 36 by BlackedIRL.\n42 -- pal 41 = pal cdbac -- CD-BAC by DimWiddy\n43 -- pal 42 = pal cgarne -- CG Arne by Arne Niklas Jansson\n44 -- pal 43 = pal cpcboy -- CPC Boy by Arne Niklas Jansson\n45 -- pal 44 = pal dimwid23 -- DimWiddy 22 by DimWiddy\n46 -- pal 45 = pal 4l -- |||| 22 by ||||\n47 -- pal 46 = pal fzteth16 -- FZT Ethereal 16 by Fusionnist\n48 -- pal 47 = pal gzxp -- GZXP by GrafxKid\n49 -- pal 48 = pal island16 -- Island Joy 16 by Kerrie Lake\n50 -- pal 49 = pal journey -- Journey by PineTreePizza\n51 -- pal 50 = pal nature55 -- Nature's Embrace 55 by GrafxKid\n52 -- pal 51 = pal nauris16 -- NA16 by Nauris\n53 -- pal 52 = pal pear36 -- Pear 36 by PineTreeApple\n54 -- pal 53 = pal pineapple32 -- Pineapple 32 by PineTreeApple\n55 -- pal 54 = pal rosy42 -- Rosy 42 by PineTreeApple\n56 -- pal 55 = pal sft15 -- Softy 15 by Eggy\n57 -- pal 56 = pal spec12 -- SPEC12 by Smalls\n58 -- pal 57 = pal starmancer -- Starmancer by Unknown\n59 -- pal 58 = pal sup8 -- Superb 8 by BigPotato\n60 -- pal 59 = pal sweetie16 -- Sweetie 16 by GrafxKid\n61 -- pal 60 = pal taffy16 -- Taffy 16 by PineTreePizza\n62 -- pal 61 = pal todayland -- Todayland Palette V2 by GrafxKid\n63 -- pal 62 = pal zu32 -- Zughy 32 by Zughy\n64 -- pal 63 = pal enos16 -- ENOS16 by Endesga\n65 -- pal 64 = pal equpix15 -- Equpix 15 by Night\n66 -- pal 65 = pal night16 -- Night 16 by Night\n67 -- pal 66 = pal simjpc16 -- SimpleJPC-16 by Adigun Polack\n68 -- pal 67 = pal acid15 -- Acid 15 by pyrometal\n69 -- pal 68 = pal battery24 -- Battery 24 by Battery Jellyfish\n70 -- pal 69 = pal crimso11 -- Crimso 11 by Crimso\n71 -- pal 70 = pal drz15 -- DRZ15A by Drazille\n72 -- pal 71 = pal eggy15 -- Eggy 15 by Eggy\n73 -- pal 72 = pal jewel -- Jewel by AprilSundae\n74 -- pal 73 = pal polar11 -- Polar11 by Smalls\n75 -- pal 74 = pal boomboom -- BoomBoom by Salman_Shh\n76 -- pal 75 = pal g8 -- Generic-8 by GrafxKid\n77 -- pal 76 = pal matriax8c -- Matriax8c by Davit Masia\n78 -- pal 77 = pal nt1h -- NT1H by NatTorpedia\n79 -- pal 78 = pal au15 -- Autum 15 by jok\n80 -- pal 79 = pal au15y -- Autum 15 [Yellow] -- by jok\n81 -- pal 80 = pal jerrypie22 -- JerryPie 22 by JerryPie\n82 -- pal 81 = pal naji16 -- Naji 16 by Naji\n83 -- pal 82 = pal blessing -- Blessing by Maruki\n84 -- pal 83 = pal fairy -- Fairy Tales by lollige\n85 -- pal 84 = pal fuzz4 -- Fuzzy Four by P-Tux7\n86 -- pal 85 = pal pastel -- Oh Hell, Pastel 15 by StarlitSunset\n87 -- pal 86 = pal tui15 -- TUI-15 by Jeremy\n88 -- pal 87 = pal cave -- Cave by PineTreePizza\n89 -- pal 88 = pal psygnosia -- Psygnosia by Arne Niklas Jansson\n90 -- pal 89 = pal marshmellow32 -- MarshMellow 32 by FormalPrejudice\n91 -- pal 90 = pal rabbit7 -- Rabbit 7 by GrafxKid\n92 -- pal 91 = pal finlal11 -- Finlal 11 by Finlal\n93 -- pal 92 = pal ykb22 -- YKB-22 by yahkehbu\n94 -- pal 93 = pal graveyard -- Graveyard-21 by AprilSundae\n95 -- pal 94 = pal steamlords -- Steam Lords - 16 by Slynyrd\n96 -- pal 95 = pal aaprad -- AAP-RadiantXV by Adigun Polack\n97 -- pal 96 = pal daruda -- Daruda 22 by daruda\n98 -- pal 97 = pal rust6 -- Rust-6 by BluePhoenix\n99 -- pal 98 = pal xaiue_rad -- XAIUE-Radiant by xaiue\n100 -- pal 99 = pal firestorm -- Firestorm by theartistjulian\n101 -- pal 100 = pal supernova7 -- SuperNova 7 by Blue Phoenix\n102 -- pal 101 = pal nyx8 -- NYX8 by Javier Guerrero\n103 -- pal 102 = pal oil6 -- OIL 6 by GrafxKid\n104 -- pal 103 = pal fornaxvoidi -- Fornax Void I by Fornax Void\n105 -- pal 104 = pal fornaxvoidii -- Fornax Void II by Fornax Void\n106 -- pal 105 = pal pixelwave -- Pixelwave by Reptorian\n107 -- pal 106 = pal moon39 -- Moonlit-39 by theartistjulian\n108 -- pal 107 = pal autochrome3 -- Autochrome 3 by Reptorian \n109 -- pal 108 = pal autochrome5 -- Autochrome 5 by Reptorian \n110 -- pal 109 = pal gb_d_1 -- GB Default #1\n111 -- pal 110 = pal gb_d_2 -- GB Default #2\n112 -- pal 111 = pal gb_bz -- GB Blackzone\n113 -- pal 112 = pal gb_easy -- GB Easy by GrafxKid\n114 -- pal 113 = pal gb_arne -- GB Arne by Arne\n115 -- pal 114 = pal gb_pj -- PJ by N/A\n116 -- pal 115 = pal gb_kirokaze -- GB Kirokaze by Kirokaze\n117 -- pal 116 = pal gb_cyber -- GB Cyber\n118 -- pal 117 = pal gb_grapefruit -- GB Grapefruit by GrafxKid\n119 -- pal 118 = pal gb_forest -- GB Forest\n120 -- pal 119 = pal gb_ice_cream -- GB Ice Cream by Kerrie Lake\n121 -- pal 120 = pal gb_rb -- GB Red_Blue\n122 -- pal 121 = pal gb_choco -- GB Chocolate by GrafxKid\n123 -- pal 122 = pal arne4 -- ARNE4 by Arne\n124 -- pal 123 = pal hal4 -- HallowPumpkin by WildLeoKnight\n125 -- pal 124 = pal amiga2600ntsc -- Amiga 2600 NTSC\n126 -- pal 125 = pal amiga2600pal -- Amiga 2600 PAL\n127 -- pal 126 = pal amiga2600secam -- Amiga 2600 SECAM\n128 -- pal 127 = pal amiga7800mess -- Amiga 7800 M.E.S.S by Nabuko78\n129 -- pal 128 = pal amiga7800 -- Amiga 7800\n130 -- pal 129 = pal amstrad_cpc -- Amstrad CPC\n131 -- pal 130 = pal apple2 -- Apple II\n132 -- pal 131 = pal cga -- CGA\n133 -- pal 132 = pal cga00 -- CGA Mode 0 [Low]\n134 -- pal 133 = pal cga01 -- CGA Mode 0 [High]\n135 -- pal 134 = pal cga10 -- CGA Mode 1 [Low]\n136 -- pal 135 = pal cga11 -- CGA Mode 1 [High]\n137 -- pal 136 = pal cga20 -- CGA Mode 2 [Low]\n138 -- pal 137 = pal cga21 -- CGA Mode 2 [High]\n139 -- pal 138 = pal c64_pepto -- Commodore 64 [Pepto Interpretation]\n140 -- pal 139 = pal c64_colodore -- Commodore 64 [Colodore Interpretation]\n141 -- pal 140 = pal com_vic_20 -- Commodore VIC-20\n142 -- pal 141 = pal colecovision -- Colecovision\n143 -- pal 142 = pal jmp -- Japanese Machine Palette by Arne Niklas Jansson\n144 -- pal 143 = pal mac2 -- Macintosh II\n145 -- pal 144 = pal nes -- NES\n146 -- pal 145 = pal pico_8 -- PICO-8\n147 -- pal 146 = pal risc -- RISC OS\n148 -- pal 147 = pal samcoupe -- SAM Coupe\n149 -- pal 148 = pal mo5 -- Thomson MO5\n150 -- pal 149 = pal vga -- VGA\n151 -- pal 150 = pal zx -- ZX Spectrum\n152 -- pal 151 = pal gnome32 -- GNOME 32\n153 -- pal 152 = pal elc22 -- Electric Crayon 22\n154 -- pal 153 = pal chip16 -- Chip16\n155 -- pal 154 = pal msx -- MSX\n156 -- pal 155 = pal deluxepaint -- Deluxe Paint\n157 -- pal 156 = pal lms -- Legacy Paint\n158 -- pal 157 = pal msxp -- XP Paint\n159 -- pal 158 = pal vis -- Vista Paint\n")
#@gui : sep = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2019/5/18</i>.</small>")
_palgen: palgen $1,{$2-1},{($3-1)*-1},{$4},{$5+1},${6-10}
palgen:
repeat $! l[$>]
pal_width={$4>0?round($4):1}
pal_height={ceil(256/$pal_width)}
pos_x=$2
pos_y=$3
pal $1
to_rgba
$pal_width,$pal_height,100%,100%,i(#1,(x+(y*w)),0)
autocrop.
if $6 f. y%2==1?i(w-x-1,y):i fi
if $7 rotate. {(round($7)%4)*90} fi
if $8 mirror. x fi
if $9 mirror. y fi
if $5>1 r2dx. {$5*100}%,1 fi
rm..
r. {w#0},{h#0},100%,100%,0,0,{($pos_x+1)/2},{1-($pos_y+1)/2}
if $10 blend alpha else rm.. fi
endl done
_palgen_preview:
_palgen $*
#@gui Transfer Colors [Reduced Colors] : tcrc, tcrc_preview(0)
#@gui : note = note("<b>- Notes -</b> \n\nThis filter is used to stimulate pixel art or can be used for testing palettes. If you picked Auto for method of color transfer, that means palettes are automatically generated from images, and depending on your input layer choices, the top could be the reference image or the target image.\n\nWhen using pre-made palettes, the order of layers don't really matter unless you picked image as a reference for palette.In the case that you picked a image as a reference, you must make sure that the image in question is only 1px vertically, and the width is no more than 256 colors."), sep=separator()
#@gui : note = note("<b>Color-mapping Preliminary Setup</b>")
#@gui : 1. Method of Color Transfer = choice(0,"Auto","Palette")
#@gui : 2. Palette to Use = choice(10,"By Layer","BW-2","RGB-3","B-RGB-4","BW-RGB-5","CMY-3","CMYK-4","W-CMYK-5","RGBCMY-6","1-Bit RGB-8","Aurora-256","Playpal-249","Andrew Kensler - 16","Andrew Kensler - 32","Andrew Kensler - 54","AAP-12","AAP-16","AAP-64","AAP-128","DB8","DB16","DB32","DB-ISO22","Endesga-8","Endesga-16","Endesga-32","Endesga-36","Endesga-64","XAIUE-22","P-DX-15","Cabana-64","Fantasy - 16","Fantasy - 24","Tranquil Fantasy - 23","Tranquility Plus Fantasy - 39","Faraway-48","Fleja Master - 33","Koni-32","Linear Basic - 31","Arcade-29","ARQ-16","BLK-36","CD-BAC-16","CG Arne-16","CPC BOY-32","DimWiddy-23","||||-22","FTZ Ethereal - 16","GZXP-11","Island-16","Journey-64","Nature's Embrace-55","Nauris-16","Pear-36","Pineapple-32","Rosy-42","Softy-15","SPEC-12","Starmancer - 52","Superb-8","Sweetie - 16","Taffy-16","Todayland-25","Zughy - 32","ENOS-16","Equpix-15","Night-16","Simple JPC-16","Acid-15","Battery-24","Crimso-11","DRZ-A-15","Eggy-15","Jewel-15","Polar-11","BoomBoom - 7","Generic-8","Matriax8c","N1 TH - 26","Autum-15","Y-Autum-15","Jerry Pie-22","Naji-16","Blessing - 5","Fairy Tales-8","Fuzz-4","Pastel - 15","TUI-15","Cave-8","Psygnosia-16","Marshmellow-32","Rabbit-7","Finlal-11","ykb-22","Graveyard - 21","Steam Lords - 16","AAP-Radiant-16","Daruda-22","Rust-6","XAIUE-Radiant-22","Firestorm-9","Supernova-7","NYX8","OIL-6","Fornax Void I-256","Fornax Void II-128","Pixelwave-12","MoonLit-39","Autochrome - 3","Autochrome - 5","GB - Default #1 - 4","GB - Default #2 - 4","GB - Black Zero - 4","GB - Easy - 4","GB - Arne - 4","GB - PJ - 4","GB - Kirokaze - 4","GB - Cyber - 4","GB - Grapefruit - 4","GB - Forest - 4","GB - Ice Cream - 4","GB - RB - 4","GB - Chocolate - 4","Arne-4","Halloween Pumpkin - 4","Amiga 2600 NTSC-256","Amiga 2600 PAL-104","Amiga 2600 SECAM-8","Amiga 7800 MESS-256","Amiga 7800-256","Amstrad CPC - 27","Apple II-15","Color/Graphics Adapter - 16","Color/Graphics Adapter Mode 0 Low-4","Color/Graphics Adapter Mode 0 High-4","Color/Graphics Adapter Mode 1 Low-4","Color/Graphics Adapter Mode 1 High-4","Color/Graphics Adapter Mode 2 Low-4","Color/Graphics Adapter Mode 2 High-4","Commodore 64 [Pepto] - 16","Commodore 64 [Colodore] - 16","Commodore Vic-20 - 16","Colecovision-15","Japanese MSX - 16","Mac II - 16","NES-55","PICO-8","Risc OS-16","SAM Coupe-128","Thomson MO5-16","VGA-244","ZX Spectrum - 15","GNOME-32","Electronic Crayon - 22","CHIP16","MSX-15","Deluxe Paint - 244","LMS-16","XP - 28","Vista - 28")
#@gui : 3. Layer to Use = choice(0,"Top Layer","Bottom Layer")
#@gui : 4. Indexing Style = choice(0,"Regular [No Special Effect]","Noise","Luminance-Indexing","Vertical","Horizontal")
#@gui : 5. Color Count = int(16,2,256)
#@gui : 6.Color Dithering (%) = float(50,0,100)
#@gui : 7.Transfer Color to Target Image? = bool(0)
#@gui : 8. Alpha Count = int(2,1,256)
#@gui : 9. Alpha Dithering (%) = float(50,0,100)
#@gui : 10. Special Effect (%) = float(50,0,100)
#@gui : sep = separator(), note = note("<b>Pixel Ratio and Interpolation</b")
#@gui : 11. Initial Rescale Method = choice(0,"Disabled","Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : 12. Upscale? = bool(0)
#@gui : 13. Pixel Width = int(2,1,16)
#@gui : 14. Pixel Height = int(2,1,16)
#@gui : sep = separator(), note = note("<b>Hardware Restriction Stimulation</b>\nWarning: This is computationally intensive!")
#@gui : 15. Hardware Stimulation? = bool(0)
#@gui : 16. Hardware Stimulation Precision Factor = int(2,2,32)
#@gui : sep = separator(), note = note("<i>Preliminary Processing Area for Hardware Stimulation</i>")
#@gui : 17. Hardware Restriction Data Size = choice(2,"By Width","By Height","Specified Width and Height")
#@gui : 18. Row/Column Thickness  = int(1,1,16)
#@gui : 19. Tile Width = int(16,2,16)
#@gui : 20. Tile Height = int(16,2,16)
#@gui : sep = separator()note = note("<i>Color Restrictions Information</i>")
#@gui : 21. Hardware Color Restriction = int(2,2,16)
#@gui : 22. Hardware Color Mapping = choice(1,"Median Cut","Median Cut and K-Means")
#@gui : 23. Alpha Precision = int(2,2,32)
#@gui : 24. Alpha Mapping = choice(1,"Median Cut","Median Cut and K-Means")
#@gui : sep = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/5/18</i>.</small>")
tcrc: if {$1==0} if {$3==1} rv fi repeat {$!-1} l[0,{$>+1}] +colormap.. $5,1,1 to_rgb. pal_t[^0] -1,$4,{$6/100},0,$8,{$9/100},{$10/100},$11,$12,$13,$14,$15,$16,{$17==2?$19:($17==0?$18:{w})},{$17==2?$20:($17==0?{h}:$18)},$21,$22,$23,$24 rv endl done if {$!>2} rv[{$!-1},1] fi if {$3==1} rv fi else if {$2!=0} repeat $! l[$>]  pal_t {$2-1},$4,{$6/100},$7,$8,{$9/100},{$10/100},$11,$12,$13,$14,$15,$16,{$17==2?$19:($17==0?$18:{w})},{$17==2?$20:($17==0?{h}:$18)},$21,$22,$23,$24 endl done else if {$3==1} rv fi repeat {$!-1} l[0,{$>+1}] [0] pal_t[^0] -1,$4,{$6/100},$7,$8,{$9/100},{$10/100},$11,$12,$13,$14,$15,$16,{$17==2?$19:($17==0?$18:{w})},{$17==2?$20:($17==0?{h}:$18)},$21,$22,$23,$24 endl done if {$3!=1} rv fi fi fi
tcrc_preview:
tcrc $*
gui_split_preview "tcrc $*",${-3--1}
u "{$1}"\
"{$2}_"{$1==1?2:0}\
"{$3}_"{$1==0||($1==1&&$2==0)?2:1}\
"{$4}"\
"{$5}_"{$1==1?0:2}\
"{$6}"\
"{$7}_"{$1==1?2:0}\
"{$8}{$9}"\
"{$10}_"{$4==0?1:2}\
"{$11}"\
"{$12}_"{$11==0?0:2}\
"{$13}_"{$11==0?0:2}\
"{$14}_"{$11==0?0:2}\
"{$15}"\
"{$16}_"{$15==0?0:2}\
"{$17}_"{$15==0?0:2}\
"{$18}_"{$15==0?0:($17==2?0:2)}\
"{$19}_"{$15==0?0:($17==2?2:0)}\
"{$20}_"{$15==0?0:($17==2?2:0)}\
"{$21}_"{$15==0?0:2}\
"{$22}_"{$15==0?0:2}\
"{$23}_"{$15==0?0:2}\
"{$24}_"{$15==0?0:2}\
"{$25}{$26,$27}"

#@gui Goofy Resampling: goof_res,goof_res_preview(0)
#@gui : note = note("This filter is inspired by a method to divide images with a pasta maker, and alternate the strips of a picture which was cut using a pasta maker."),sep = separator()
#@gui : Amount of Cut-Out = int(8,4,64)
#@gui : Line Cutout Direction = choice(0,"Horizontal","Vertical")
#@gui : End Connectin Direction = choice(0,"Horizontal","Vertical")
#@gui : Reverse Ordering? = bool(0)
#@gui : sep = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2019/2/22</i>.</small>")
goof_res: repeat $! l[$>] if $2 s x,$1 repeat {$1/2-1} a[0,{$>+2}] x done a[^0] x if $4 rv fi if $3 a y else a x fi else  $2 s y,$1 repeat {$1/2-1} a[0,{$>+2}] y done a[^0] y if $4 rv fi if $3 a y else a x fi fi endl done
goof_res_preview: goof_res $*

#@gui Color Modulo Texture : colmt,colmt_preview(0)
#@gui : note = note("This filter is inspired by <i><a href="https://forums.getpaint.net/topic/7186-madjik-all-plugins-last-updated-2018-04-07/">MadJik's<small><small>.</small></small></a></i> PDN plugin named <i>Color Modulo</i>. This version offers more features than the original plugin for Paint.NET such as channel swapping, color space, and finally, modulo forms."), sep = separator()
#@gui : Color Space = choice(0,"RGB8","CMY8","CMYK8","HSI8","HSL8","HSV8","LAB8","LCH8","YIQ8","YUV8","XYZ8")
#@gui : sep = separator(), note = note("<b>Main Section</b>")
#@gui : Interpolation = choice(2,"None","Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : Interpolation Factor = int(5,1,5)
#@gui : Reverse Diagonal = bool(0)
#@gui : Maximum Channel Value = float(255,2,255)
#@gui : Channel #1 Modulo Method = choice(0,"Modulo","Modulo - Continuous","Divisive Modulo","Divisive Modulo - Continuous")
#@gui : End Value = float(255,2,512)
#@gui : Negate Channel = bool(0)
#@gui : Channel #2 Modulo Method = choice(0,"Modulo","Modulo - Continuous","Divisive Modulo","Divisive Modulo - Continuous")
#@gui : End Value = float(255,2,512)
#@gui : Negate Channel = bool(0)
#@gui : Channel #3 Modulo Method = choice(0,"Modulo","Modulo - Continuous","Divisive Modulo","Divisive Modulo - Continuous")
#@gui : End Value = float(255,2,512)
#@gui : Negate Channel = bool(0)
#@gui : Channel #4 Modulo Method = choice(0,"Modulo","Modulo - Continuous","Divisive Modulo","Divisive Modulo - Continuous")
#@gui : End Value = float(255,2,512)
#@gui : Negate Channel = bool(0)
#@gui : sep = separator(), note = note("<i>Channel Order</i>\n\nPick numbers to order the channels")
#@gui : First Channel = choice(0,"Channel 1","Channel 2","Channel 3","Channel 4")
#@gui : Second Channel = choice(1,"Channel 1","Channel 2","Channel 3","Channel 4")
#@gui : Third Channel = choice(2,"Channel 1","Channel 2","Channel 3","Channel 4")
#@gui : Fourth Channel = choice(3,"Channel 1","Channel 2","Channel 3","Channel 4")
#@gui : Alpha Channel = bool(1)
#@gui : note = note("<small>If CMYK is chosen as color space, then there is no alpha channel.</small>")
colmt: repeat $! l[$>]
modulo_texture_pre ${2-21}
if {$1==0} a[0-2] c
elif {$1==1} a[0-2] c cmy2rgb..
elif {$1==2} a c cmyk2rgb
elif {$1==3} a[0-2] c hsi82rgb..
elif {$1==4} a[0-2] c hsl82rgb..
elif {$1==5} a[0-2] c hsv82rgb..
elif {$1==6} a[0-2] c lab82rgb..
elif {$1==7} a[0-2] c lch82rgb..
elif {$1==8} a[0-2] c yiq82rgb..
elif {$1==9} a[0-2] c yuv82rgb..
elif {$1==10} a[0-2] c xyz82rgb..
fi
if {$1!=2} if $22 a c else k.. fi fi
endl done
colmt_preview:
colmt $*
modulo_texture_pre:
to_gray repeat 3 [0] done
lcmod_a=$17
lcmod_b=$18
lcmod_c=$19
lcmod_d=$20
mul 0 +[0] $lcmod_a +[1] $lcmod_b +[2] $lcmod_c +[3] $lcmod_d
remove_duplicates
if {$!<4} v + error "Invalid numbers!" fi
if {$2<1} v + error "Input 2 cannot be less than 1!" fi
if {$2!={floor($2)}} v + error "Input 2 must be a integer!" fi
f "0"
if $1 r2dx {$2*100}%,1,1 fi
f[0] "x/$2" modf[0] $5,$4,{$6/$4} if $7 negate[0] fi
f[1] "y/$2"  modf[1] $8,$4,{$9/$4} if $10 negate[1] fi
f[2] "(!$3?x+y:abs(x-y))/$2"  modf[2] $11,$4,{$12/$4} if $13 negate[2] fi
f[3] "(!$3?abs(x-y):x+y)/$2"  modf[3] $14,$4,{$15/$4} if $16 negate[3] fi
r2dx[0,1] {(1/$2)*100}%,4,1
if $1 r2dx[2,3] {(1/$2)*100}%,$1,1 fi
[$lcmod_a] [$lcmod_b] [$lcmod_c] [$lcmod_d] rm[0-3]
#@gui Picture Mosaic : fx_rep_pmos,_fx_rep_pmos_preview(0)
#@gui : note = note("<b>- Information -</b>\n\n<b>Do not be alarmed when multiple command prompt shows up when using folder input as it is a normal process!</b>\n\nThis filter is used for generation of mosaic pictures. Also, the mosaic cli command cannot support a number of images that is less than 3, so this gui filter will automatically use folder input option instead. So, you need at least 2 images inside a folder for the mosaic filter to work when using folder input. For more information, see below.\n\n<b>-Software Usage -</b>\n\n<b>For Krita, and GIMP: </b> Set to input layers to <b>All</b> assuming 3 or more layers are in your file to create mosaic using the top image as a mosaic target.If you are using folder input instead, it is recommended to set layer input to <b>Active</b>.\n\n<b>For Paint.NET: </b> Using 3 or more layer is unsupported due to the Paint.NET plugin restriction, so you can only use folder input. This is a workaround as G'MIC itself supports more than 2 layers.\n\nRight now because of certain issues, split_preview is not functional as of now."), sep = separator()
#@gui : note = note("<b>- Folder Input -<b>")
#@gui : Folder Input Instead? = bool(0)
#@gui : Mosaic Tile Pictures = folder()
#@gui : sep = separator()
#@gui : note = note("<b>- Mosaic Generation Options -</b>\n\n<small><i>Note: When tile_height is equal to 0, it will automatically create the tile ratio based on which side is smaller.</i></small>")
#@gui : Target Layer = choice(0,"Top Layer","Bottom Layer")
#@gui : Tile Width = int(15,2,50)
#@gui : Tile Height = int(0,0,50)
#@gui : Dithering (%) = float(50,0,100)
#@gui : Scaling Interpolation = choice(0,"Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : Autocrop-By-Median = bool(0)
#@gui : Preserve Original Dimension = bool(0)
#@gui : sep = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/3/31</i>.</small>")
fx_rep_pmos: if {$!>2&&$1==0} rep_mosaic_gen $4,$5,{$6/100},{$7+1},$8,$9 elif {$!>2&&$1==1} repeat $! l[$>] rep_mosaic_gen $4,$5,{$6/100},{$7+1},$8,$9,1,$2 rv endl done else rep_mosaic_gen $4,$5,{$6/100},{$7+1},$8,$9,1,$2 fi
_fx_rep_pmos_preview:
image={$!}
fx_rep_pmos $*
u "{$1}_"{$image>2?2:0}\
"{$2}_"{$image>2&&$1==0?0:2}\
"{$3}_"{$image>2&&$1==0?2:0}\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}"\
"{$9}"\
"{$10}{$11,$12}"
#@gui Non-Convolution Edge Extraction : fx_ncee, fx_ncee_preview(0)
#@gui : note = note("Based off PS Embossing filtering. The way it works is that you duplicate once and then shift with wrap-around using original image data using an angle and offset. Then finally, you invert one of the layer, and average those values. In this filter, you have several options when it comes to alpha and how the image wrap-around. Also, CMYK mode may be fixed later as I'm trying to avoid the problem with Alpha mode and CMYK mode.")
#@gui : sep = separator()
#@gui : 1. Colour Space = choice(0,"RGB8","RYB8","CMY8","CMYK8","HSI8","HSL8","HSV8","LAB8","LCH8","YIQ8","YUV8","XYZ8")
#@gui : sep = separator()
#@gui : 2. Angle = float(0,0,360)
#@gui : 3. Offset = float(1,.5,256)
#@gui : 4. Contrast Factor [%] = float(100,0,500)
#@gui : 5. Wraparound Mode = choice(2,"Dirichlet","Neumann","Periodic","Mirror")
#@gui : 6. Interpolation = bool(0)
#@gui : sep = separator(), note = note("Alpha Processing")
#@gui : 7. Alpha Mode = choice(0,"Preserve Original Alpha","Multiply Alphas")
#@gui : sep = separator(), note = note("Blending Processing\n\n<i>If you're looking for normal blending mode, you do not need to touch this and if you did, set mode to alpha and opacity to 100.</i>")
#@gui : 8. Blending Mode = choice(1,"add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor")
#@gui : 9. Blending Opacity = float(100,0,100)
#@gui : sep = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep = separator(), note = note("<small>Author: Reptorian      Latest Update: <i>2019/4/25</i>.</small>")
fx_ncee:
repeat $! l[$>] rep_ncee $3,$2,$5,$6,{$4/100},$7,$1,$8,{$9/100} endl done
fx_ncee_preview:
gui_split_preview "fx_ncee $*",${-3--1}
#@gui Fragment Blur: rep_frblur,rep_frblur_preview(0)
#@gui : note = note("Inspired by the Paint.NET Fragment Blur filter, this implementation improves upon it by adding color space options, preservation of original image as a option, boundary condition option, and interpolation option."), sep = separator()
#@gui : Color Space = choice(0,"RGB","RYB","CMYK","HSI","HSL","HSV","LAB","LCH")
#@gui : Superimpose with Original? = bool(0)
#@gui : Additional Duplicates Count = int(10,2,200)
#@gui : Distance (%) = float(50,0,100)
#@gui : Angle = float(0,0,360)
#@gui : Boundary = choice(2,"Neumann","Periodic","Mirror")
#@gui : Shift Linear Interpolation? = bool(0)
#@gui :  sep = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2019/4/26</i>.</small>")
rep_frblur_preview:
rep_frblur $*
#@gui Spiral Matrix Transform : fx_spiralmatrixtransform,fx_spiralmatrixtransform_preview(0)
#@gui : note = note("Transform image using numbers generated on a spiral matrix.\n\nAs of current version, it only goes clockwise-direction, and reverse based on clock-wise direction.\n\n<b>Warning: </b><i>Preview is not accurate, and reverse spiral transform will work assuming you didn't edit the image after using 'Spiral Transform'.</i>"),sep = separator()
#@gui : Direction = choice(0,"Spiral Transform","Reverse Spiral Transform")
#@gui :  sep  = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/5/1</i>.</small>")
fx_spiralmatrixtransform: rep_spiral_trb !$1
fx_spiralmatrixtransform_preview:
gui_split_preview "fx_spiralmatrixtransform $*",${-3--1}
#@gui Nebulous : fx_rep_nebulous,fx_rep_nebulous_preview
#@gui : note = note("Based off <a href="https://forums.getpaint.net/topic/111774-nebulous-texture-update-ymd20170922/?tab=comments#comment-535865">MadJik's PDN Nebulous plugin</a>. This G'MIC version allows you to manipulate the result by angle within the main surface and the distortion surface, and allows you to shift the positioning of the Nebulous surface. Furthermore, the G'MIC version of Nebulous doesn't use integer on the output of surface."), sep = separator()
#@gui : note = note("<b>Surface Theme</b>"), Colour Space Mode = choice (0,"RGB8","RYB8","HSI8","HSL8","HSV8","LAB8","LCH8","YIQ8","YUV8","XYZ8"), sep = separator()
#@gui : note = note("<b>Surface Generation</b>")
#@gui : XY-Factor = float(4,.1,1000)
#@gui : X-Factor = float(10,.01,1000)
#@gui : Y-Factor = float(10,.01,1000)
#@gui : X-Shift (%) = float(0,-10,10)
#@gui : Y-Shift (%) = float(0,-10,10)
#@gui : Angle of Main Nebulous Surface = float(0,-180,180)
#@gui : Wave(s) = float(1,-25,25)
#@gui : Lighting Angle = float(0,-180,180)
#@gui : Surface Disturbance = float(0,0,2000)
#@gui : Surface Disturbance Multiplier = float(1,1,500)
#@gui : Disturbance Scale-By-Factor=bool(0)
#@gui : Disturbance X = float(0,0,1000)
#@gui : Disturbance Y = float(0,0,1000)
#@gui : Angle of Disturbance Surface = float(0,-180,180)
#@gui : Output Color? = bool(1)
#@gui : Alpha Mode = choice(0,"None","Hard Light","Hard Dark","Smooth Light","Smooth Dark")
#@gui : sep = separator()
#@gui : note = note("<b>Subpixel Processing</b>\n\n You do not need to touch this unless you want higher amount of precision, but the difference is small. If you are using a very small surface or hard alpha mode, then it makes sense to touch subpixel processing variables.")
#@gui : Subpixel Level = int(1,0,3)
#@gui : Subpixel Interpolation = choice(3,"Average","Linear","Grid","Bicubic","Lanczos")
#@gui : sep = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2019/5/11</i>.</small>")
fx_rep_nebulous:
repeat $! l[$>]
rep_nebulous ${2-9},{$10*$11},${12-17},{$18+1},$19 + 1 * 127.5
if $17&&$1&&$16
split_opacity
if {$1==1} ryb2rgb..
elif {$1==2} hsi82rgb..
elif {$1==3} hsl82rgb..
elif {$1==4} hsv82rgb..
elif {$1==5} lab82rgb..
elif {$1==6} lch82rgb..
elif {$1==7} yiq82rgb..
elif {$1==8} yuv82rgb..
elif {$1==9} xyz82rgb..
fi
a c
elif $1&&$16
if {$1==1} ryb2rgb
elif {$1==2} hsi82rgb
elif {$1==3} hsl82rgb
elif {$1==4} hsv82rgb
elif {$1==5} lab82rgb
elif {$1==6} lch82rgb
elif {$1==7} yiq82rgb
elif {$1==8} yuv82rgb
elif {$1==9} xyz82rgb
fi
fi
endl done
fx_rep_nebulous_preview:
fx_rep_nebulous $*
#@gui Grouped Pixel Axis-Based Shift: fx_rep_sptbwgp,fx_rep_sptbwgp_preview
#@gui : note = note("Based off MadJik's Paint.NET Gravity Plugin. New feature are shift position, and influence factor."), sep = separator()
#@gui : Shift Position (%) = float(0,-100,100)
#@gui : Influence Factor = float(0,0,100)
#@gui : Threshold (%) = float(0,0,100)
#@gui : Axis = choice(0,"Horizontal","Vertical")
#@gui :  sep  = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/5/14</i>.</small>")
fx_rep_sptbwgp:
to_rgba
rep_sptbwgp {$1/100},$4,{$2/100},{$3/100}
fx_rep_sptbwgp_preview:
gui_split_preview "fx_rep_sptbwgp $*",${-3--1}
#@gui Binary Alternating Quaddro Texture [Basic] : rep_binary_quaddro_basic_gui, rep_binary_quaddro_basic_gui_preview(0)
#@gui : note=note("This filter is a extended version of a filter found in<a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using a source code, and then extended. It is a mixture of two texture filters."),sep=separator()
#@gui : note=note("<b>Channel Processing</b>"),Texture Output=choice(0,"Grayscale","Hue","Degradation Mode"),sep=separator()
#@gui : note=note("<b>Main Texture Processing</b>")
#@gui : Style=choice(0,"Cracking Alternating Texture","Alternating Glasses","Simple")
#@gui : Variable#1=int(8,-512,512)
#@gui : Variable#2=int(8,-512,512)
#@gui : Variable#3=int(128,-200,200)
#@gui : Operand=choice(2,"AND","OR","XOR")
#@gui : Angle=float(0,-180,180)
#@gui : X-Flip=bool(0)
#@gui : Y-Flip=bool(0)
#@gui : Number Modulo=int(256,256,2048)
#@gui : Internal Normalize=int(255,255,2048)
#@gui : Internal Normalization = bool(1)
#@gui : Number Modulo=int(361,256,2048)
#@gui : Internal Normalize=int(361,360,2048)
#@gui : sep  = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2018/12/19</i>.</small>")
rep_binary_quaddro_basic_gui:
if $1==0
rep_binaltquad ${2-12} % 256
elif $1==1
repeat $! l[$>] rep_binaltquad ${2-9},${13-14},1 % 361 +f 1 . a c hsv2rgb endl done
elif $1==2
repeat $! l[$>] +rep_binaltquad ${2-9},{w*h-1},{w*h-1} f.. I[i#1] k.. endl done
fi
rep_binary_quaddro_basic_gui_preview:
rep_binary_quaddro_basic_gui $*
u "{$1}"\
"{$2}"\
"{$3}"\
"{$4}"\
"{$5}_"{$2!=2?2:0}\
"{$6}_"{$2!=2?2:0}\
"{$7}"\
"{$8}"\
"{$9}"\
"{$10}_"{$1==0?2:0}\
"{$11}_"{$1==0?2:0}\
"{$12}_"{$1==0?2:0}\
"{$13}_"{$1==1?2:0}\
"{$14}_"{$1==1?2:0}
#@gui Binary Alternating Quaddro Texture [MultiChannel]:rep_binary_quaddro_mc_gui, rep_binary_quaddro_mc_gui_preview(0)
#@gui : note = note("This filter is a extended version of a filter found in<a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using a source code, and then extended. It is a mixture of two texture filters."),sep=separator()
#@gui : note = note("<b>Configuration</b>")
#@gui : 1.Color Space = choice(0,"RGB","RYB","CMY","CMYK","HSI","HSV","HSL","LAB","LCH","YCbCr","YCbCrGLIC","YIQ","YUV","XYZ")
#@gui : 2.Contain Alpha? = bool(0)
#@gui : 3.8-Bit Mode? = bool(0)
#@gui : sep = separator()
#@gui : note = note("<b>Channel Order</b>")
#@gui : 4.Channel #1 = choice(0,"0","1","2")
#@gui : 5.Channel #2 = choice(1,"0","1","2")
#@gui : 6.Channel #3 = choice(2,"0","1","2")
#@gui : 7.Channel #1 = choice(0,"0","1","2","3")
#@gui : 8.Channel #2 = choice(1,"0","1","2","3")
#@gui : 9.Channel #3 = choice(2,"0","1","2","3")
#@gui : 10.Channel #4 = choice(3,"0","1","2","3")
#@gui : 11.Channel #1 = choice(0,"0","1","2","3","4")
#@gui : 12.Channel #2 = choice(1,"0","1","2","3","4")
#@gui : 13.Channel #3 = choice(2,"0","1","2","3","4")
#@gui : 14.Channel #4 = choice(3,"0","1","2","3","4")
#@gui : 15.Channel #5 = choice(4,"0","1","2","3","4")
#@gui : sep = separator()
#@gui : note = note("<b>Main Texture Processing</b>")
#@gui : note = note("<i>Channel #1</i>")
#@gui : 16.Style = choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : 17.Variable#1 = int(8,-512,512)
#@gui : 18.Variable#2 = int(8,-512,512)
#@gui : 19.Variable#3 = int(128,-200,200)
#@gui : 20.Operand = choice(2,"AND","OR","XOR")
#@gui : 21.Angle = float(0,-180,180)
#@gui : 22.X-Flip = bool(0)
#@gui : 23.Y-Flip = bool(0)
#@gui : 24.Normalize = bool(1)
#@gui : sep=separator()
#@gui : note = note("<i>Channel #2</i>")
#@gui : 25.Style = choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : 26.Variable#1 = int(8,-512,512)
#@gui : 27.Variable#2 = int(8,-512,512)
#@gui : 28.Variable#3 = int(128,-200,200)
#@gui : 29.Operand = choice(2,"AND","OR","XOR")
#@gui : 30.Angle = float(0,-180,180)
#@gui : 31.X-Flip = bool(0)
#@gui : 32.Y-Flip = bool(0)
#@gui : 33.Normalize = bool(1)
#@gui : sep = separator()
#@gui : note = note("<i>Channel #3</i>")
#@gui : 34.Style = choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : 35.Variable#1 = int(8,-512,512)
#@gui : 36.Variable#2 = int(8,-512,512)
#@gui : 37.Variable#3 = int(128,-200,200)
#@gui : 38.Operand = choice(2,"AND","OR","XOR")
#@gui : 39.Angle = float(0,-180,180)
#@gui : 40.X-Flip = bool(0)
#@gui : 41.Y-Flip = bool(0)
#@gui : 42.Normalize = bool(1)
#@gui : sep = separator()
#@gui : note = note("<i>Channel #4</i>")
#@gui : 43.Style = choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : 44.Variable#1 = int(8,-512,512)
#@gui : 45.Variable#2 = int(8,-512,512)
#@gui : 46.Variable#3 = int(128,-200,200)
#@gui : 47.Operand = choice(2,"AND","OR","XOR")
#@gui : 48.Angle = float(0,-180,180)
#@gui : 49.X-Flip = bool(0)
#@gui : 50.Y-Flip = bool(0)
#@gui : 51.Normalize = bool(1)
#@gui : sep = separator()
#@gui : note = note("<i>Channel #5</i>")
#@gui : 52.Style = choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : 53.Variable#1 = int(8,-512,512)
#@gui : 54.Variable#2 = int(8,-512,512)
#@gui : 55.Variable#3 = int(128,-200,200)
#@gui : 56.Operand = choice(2,"AND","OR","XOR")
#@gui : 57.Angle = float(0,-180,180)
#@gui : 58.X-Flip = bool(0)
#@gui : 59.Y-Flip = bool(0)
#@gui : 60.Normalize = bool(1)
#@gui:sep = separator(), note = note("<small>Author : <i>Reptorian</i>      Latest update: <i>2018/12/19</i>.</small>")
rep_binary_quaddro_mc_gui:
cs_mode=$1
cmyk_mode={$cs_mode==3?4:3}
contain_alpha={$2?1:0}
tch={$cmyk_mode+$contain_alpha}
if $tch==3 rep_binary_alterating_quad_c $1,$2,$3,$4,$5,$6,${14-42}
elif $tch==4 rep_binary_alterating_quad_c $1,$2,$3,$7,$8,$9,$10,${15-51}
else rep_binary_alterating_quad_c $1,$2,$3,$11,$12,$13,$14,$15,${16-60}
fi
rep_binary_quaddro_mc_gui_preview:
cs_mode=$1
cmyk_mode={$1==3?4:3}
contain_alpha={$2?1:0}
tch={$cmyk_mode+$contain_alpha}
rep_binary_quaddro_mc_gui $*
u "{$1}"\
"{$2}"\
"{$3}_"{(($cs_mode>8&&$cs_mode<11)||$cs_mode<=3)?0:2}\
"{$4}_"{$tch==3?2:0}\
"{$5}_"{$tch==3?2:0}\
"{$6}_"{$tch==3?2:0}\
"{$7}_"{$tch==4?2:0}\
"{$8}_"{$tch==4?2:0}\
"{$9}_"{$tch==4?2:0}\
"{$10}_"{$tch==4?2:0}\
"{$11}_"{$tch==5?2:0}\
"{$12}_"{$tch==5?2:0}\
"{$13}_"{$tch==5?2:0}\
"{$14}_"{$tch==5?2:0}\
"{$15}_"{$tch==5?2:0}\
"{$16}"\
"{$17}"\
"{$18}"\
"{$19}_"{$16!=2?2:0}\
"{$20}_"{$16!=2?2:0}\
"{$21}"\
"{$22}"\
"{$23}"\
"{$24}"\
"{$25}"\
"{$26}"\
"{$27}"\
"{$28}_"{$24!=2?2:0}\
"{$29}_"{$24!=2?2:0}\
"{$30}"\
"{$31}"\
"{$32}"\
"{$33}"\
"{$34}"\
"{$35}"\
"{$36}"\
"{$37}_"{$34!=2?2:0}\
"{$38}_"{$34!=2?2:0}\
"{$39}"\
"{$40}"\
"{$41}"\
"{$42}"\
"{$43}_"{$tch>=4?2:0}\
"{$44}_"{$tch>=4?2:0}\
"{$45}_"{$tch>=4?2:0}\
"{$46}_"{$tch>=4?($43!=2?2:0):0}\
"{$47}_"{$tch>=4?($43!=2?2:0):0}\
"{$48}_"{$tch>=4?2:0}\
"{$49}_"{$tch>=4?2:0}\
"{$50}_"{$tch>=4?2:0}\
"{$51}_"{$tch>=4?2:0}\
"{$52}_"{$tch>=5?2:0}\
"{$53}_"{$tch>=5?2:0}\
"{$54}_"{$tch>=5?2:0}\
"{$55}_"{$tch>=5?($43!=2?2:0):0}\
"{$56}_"{$tch>=5?($43!=2?2:0):0}\
"{$57}_"{$tch>=5?2:0}\
"{$58}_"{$tch>=5?2:0}\
"{$59}_"{$tch>=5?2:0}\
"{$60}_"{$tch>=5?2:0}
#@gui Sinusoidal Water Distortion : rep_sinowaterdist_gui,rep_sinowaterdist_gui_preview(0)
#@gui : X-Balance = float(0,-100,100)
#@gui : Y-Balance = float(0,-100,100)
#@gui : Scale = float(.5,.1,100)
#@gui : Interpolation = choice(0,"Nearest","Linear","Bicubic")
#@gui : Boundary Condition = choice(0,"Periodic","Mirror")
#@gui :  sep  = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/6/4</i>.</small>")
rep_sinowaterdist_gui:
rep_sinowaterdist $1,$2,{($3/100)*(w>h?w:h)},$4,$5
rep_sinowaterdist_gui_preview:
gui_split_preview "rep_sinowaterdist_gui $*",${-3--1}
#@gui Strange Bulger : rep_strbul,rep_strbul_preview(0)
#@gui : Angle = float(0,-180,180)
#@gui : Axis = choice(0,"X-Axis","Y-Axis")
#@gui : Interpolation = choice(0,"Nearest","Linear","Bicubic")
#@gui : Boundary Condition = choice(0,"Periodic","Mirror")
#@gui :  sep  = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/6/4</i>.</small>")
rep_strbul_preview:
gui_split_preview "rep_strbul $*",${-3--1}
#@gui Strange Bulger Kaleidoscope: rep_strbulkal_gui, rep_strbulkal_gui_preview(0)
#@gui : note = note("This filter is a extended version of the filters named 'Strange Bulger A', and 'Strange Bulger B' found in<a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using source code for Asmageddon's tool, and then extended."),sep=separator()
#@gui : Bulge Angle = float(0,-180,180)
#@gui : Axis of Bulge = choice(0,"X-Axis","Y-Axis")
#@gui : Scale = float(1,.1,10)
#@gui : Preliminary Surface Shift = point(50,50,0,1,128,128,128,255)
#@gui : Distortion Surface Position = point(50,50,0,1,255,255,255,255)
#@gui : Distortion Surface Angle = float(0,0,360)
#@gui : Placement = choice(0,"Inside-Out","Outside-In")
#@gui : Boundary Condition = choice(0,"Periodic","Mirror")
#@gui : Interpolation = choice(2,"Nearest","Linear","Bicubic")
#@gui : Base Reference Dimension = int(1024,10,4096)
#@gui :  sep  = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/6/4</i>.</small>")
rep_strbulkal_gui:
rep_strbulkal ${1-3},{(($4/100)-.5)*2},{(($5/100)-.5)*-2},{(($6/100)-.5)*2},{(($7/100)-.5)*-2},${8-12}
rep_strbulkal_gui_preview:
gui_split_preview "rep_strbulkal_gui $*",${-3--1}
#@gui Logarithmic Distortion: rep_logpindis_gui, rep_logpindis_gui_preview(0)
#@gui : Distortion Factor = float(1,.1,1000)
#@gui : Preliminary Surface Shift = point(50,50,0,1,128,128,128,255)
#@gui : Distortion Surface Position = point(50,50,0,1,255,255,255,255)
#@gui : Preliminary X-Axis Scaling = float(1,.1,10)
#@gui : Preliminary Y-Axis Scaling = float(1,.1,10)
#@gui : Effect X-Axis Scaling = float(1,.1,10)
#@gui : Effect Y-Axis Scaling = float(1,.1,10)
#@gui : Distortion Surface Angle = float(0,0,360)
#@gui : Placement = choice(0,"Inside-Out","Outside-In")
#@gui : Logarithmic Distortion Axis Combination for X-Axis = choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion Axis combination for y-Axis = choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion X-Axis Direction = choice(0,"Negative","Positive")
#@gui : Logarithmic Distortion Y-Axis Direction = choice(0,"Negative","Positive")
#@gui : Boundary Condition = choice(0,"Periodic","Mirror")
#@gui : Interpolation = choice(2,"Nearest","Linear","Bicubic")
#@gui : Base Reference Dimension = int(1024,10,4096)
#@gui :  sep  = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/6/4</i>.</small>")
rep_logpindis_gui:
rep_logpindis $1,{(($2/100)-.5)*2},{(($3/100)-.5)*-2},{(($4/100)-.5)*2},{(($5/100)-.5)*-2},${6-18}
rep_logpindis_gui_preview:
gui_split_preview "rep_logpindis_gui $*",${-3--1}
#@gui Squareroot - Logarithmic Distortion: rep_sqrlogpindis_gui, rep_sqrlogpindis_gui_preview(0)
#@gui : Distortion Factor = float(1,.1,1000)
#@gui : Preliminary Surface Shift = point(50,50,0,1,128,128,128,255)
#@gui : Distortion Surface Position = point(50,50,0,1,255,255,255,255)
#@gui : Preliminary X-Axis Scaling = float(1,.1,10)
#@gui : Preliminary Y-Axis Scaling = float(1,.1,10)
#@gui : Effect X-Axis Scaling = float(1,.1,10)
#@gui : Effect Y-Axis Scaling = float(1,.1,10)
#@gui : Distortion Surface Angle = float(0,0,360)
#@gui : Placement = choice(0,"Inside-Out","Outside-In")
#@gui : Logarithmic Distortion Axis Combination for X-Axis = choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion Axis combination for y-Axis = choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion X-Axis Direction = choice(0,"Negative","Positive")
#@gui : Logarithmic Distortion Y-Axis Direction = choice(0,"Negative","Positive")
#@gui : Boundary Condition = choice(0,"Periodic","Mirror")
#@gui : Interpolation = choice(2,"Nearest","Linear","Bicubic")
#@gui : Base Reference Dimension = int(1024,10,4096)
#@gui :  sep  = separator(), Preview Type = choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note = note("<small>Author: Reptorian.      Latest Update: <i>2019/6/4</i>.</small>")
rep_sqrlogpindis_gui:
rep_sqrlogpindis $1,{(($2/100)-.5)*2},{(($3/100)-.5)*-2},{(($4/100)-.5)*2},{(($5/100)-.5)*-2},${6-18}
rep_sqrlogpindis_gui_preview:
gui_split_preview "rep_sqrlogpindis_gui $*",${-3--1}
######################

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
