#@gmic
#----------------------------------------------------------------------
#
#  File        : garry_osgood.gmic
#                ( G'MIC commands file )
#
#  Description : G'MIC custom commands and G'MIC-QT Filters which
#                support G'MIC tutorials that I write from time to
#                time. A prefix 'gtutor_' distinguishes these items.
#
#
#  Copyright   : Garry R. Osgood
#
#  License     : CeCILL v2.0
#                ( http://cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#
### === Version 23 Tue May 14 07:15:14 2024 UTC ==================== ###
#@gui __
#@gui <b>Testing</b>
#@gui <i>Gmic Tutorials</i>
#@gui Blur by Color : gtutor_blur_img, gtutor_blur_img_preview
#@gui : Range     = choice(3,"XL","VL","L","N","M","VM","XM")
#@gui : Amplitude = float(0.5,0,1)
#@gui : sep  = separator(), note = note("<small>Author: <i>Garry R. Osgood.</i> Latest update: <i>2014/08/30</i>.</small>")
#@gui : note = link("Blur by color instructions and tutorial.","https://gmic.eu/oldtutorial/blur-by-color-filter.shtml")
gtutor_blur_img :
  l[-2,-1]
    if s>3
      remove_opacity.
    fi
    range={700*$1+700}
    rgb2hsl.
    s. c #[-4]target [-3]H [-2]S [-1]L
    *. $2
    rv[-2,-1]
    negate.
    *. ..
    rv[-3,-1]
    /. 360
    *. {2*pi}
    +sin.
    cos..
    a[-4,-3] c
    a[-2,-1] c
    eigen2tensor[-2,-1]
    repeat 3
      smooth.. .,$range
    done
    rm.
  done

gtutor_blur_img_preview :
  gtutor_blur_img ${^0}

#@cli colorwheel : _size>0,_cclock={ 0 | 1 },_angle
#@cli : Generates a square colorwheel in clockface orientation, with zero
#@cli : degrees on top, corresponding to red, and colors transitioning
#@cli : clockwise through green (120 degrees) and blue (240 degrees). size:
#@cli : colorwheel edges, in pixels.  cclock, boolean, if true generates a
#@cli : counterclockwise colorwheel, and angle, degrees, rotates the wheel
#@cli : clockwise (negative: counterclockwise) from its reference orientation.
#@cli : Default values: _size=512, _cclock=0, _angle=0
colorwheel : check ${1=512}>=1 skip ${2=0},${3=0}
  e[^-1] "Input colorwheel $1 pixels square; cclockwise=$2; oriented $3 degrees"
  $1,$1,1,1,'x=x-w/2;y=y-h/2;((1-2*!!$2)*(atan2(y,x)*180/pi+90-$3))%360'
  100%,100%,1,2,1 a[-2,-1] c hsv2rgb. => [colorwheel]

#@gui __
#@gui <b>Patterns</b>
#@gui Hedcut : hedcut, gtutor_hedcut_preview(0)
#@gui : note = note("<b>Photometric:</b>")
#@gui : Contrast = float(0.5,0,1)
#@gui : Luminance Level = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<b>Pattern:</b>")
#@gui : Smoothing = float(0.5,0,1)
#@gui : Size  = float(0.0,0,1)
#@gui : Step = float(0.5,0,1)
#@gui : note = note("<b>Choice:</b>")
#@gui : Quality =  bool(0)
#@gui : Force Gray = bool(1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>Garry R. Osgood</i>. Latest update: <i>2015/03/05</i>.</small>")
#@gui : url = link("Hedcut instructions and tutorial","https://gmic.eu/oldtutorial/hedcut-filter.shtml")
gtutor_hedcut_preview :
  gui_split_preview "hedcut ${^0}",$-1

#@cli hedcut : _contrast=0.5, _lumlevel=0.5, _patsmooth=0.5, _patsize=0.0, _patstep=0.5, _patquality=0 (low=0,high=1), _forcegray=1 (no=0,yes=1)
#@cli : Make a hedcut with a faux intaglio etch pattern. Unless noted, all
#@cli : arguments are floats that range from 0.0 to 1.0. contrast: larger
#@cli : values increase contrast. lumlevel: larger values increases
#@cli : brightness. patsmooth: larger values forces pattern to follow
#@cli : geometry; lower induces turbulence. patsize: larger values increases
#@cli : pattern size. patstep: values alter pattern geometry. Adjust to
#@cli : taste. patquality: Boolean flag. 1=True/On/Yes. Renders oversize for
#@cli : quality.  Longer rendering time and more memory will be required (2
#@cli : GiB minimum for 3000x3000).  forcegray: Boolean
#@cli : flag. 1=True/On/Yes. RGB input will be forced to single channel
#@cli : grayscale before processing and returned to RGB after. Output: image
#@cli : in 0-255 range. Channels match input.
hedcut : check "${1=0.5}<=1 && $1>=0 && ${2=0.5}<=1 && $2>=0 && ${3=0.5}<=1 && $3>=0 && ${4=0.0}<=1 && $4>=0 && ${5=0.5}<=1 && $5>=0 && isbool(${6=0}) && isbool(${7=1})"
  e[^-1] "Applying faux intaglio etch to selected images. Contrast: "{$1}". Lumenance Level: "$2". Pattern smoothing: "$3". Pattern size: "$4". Pattern stepping: "$5". Quality (low=0,1=high): "$6". Force gray (0=no,1=yes):"$7"."
  con={(9.0^$1)}
  llv={round(20000*(0.5-$2))/100}
  smt={(round((100*(10^$3)/2))/100)+4*$4}
  psz={0.0001*(1+99*(1-$4))}
  del={$psz+round(1000*(10^(-$4-2)))/1000}
  stp={round(2+10*$5)}
  qfc={$6}
  gry={$7}
  tol=30
  spn=0
  repeat $!
    l[$>]
      remove_opacity.
      if $gry
         luminance.
      fi
      s. c
      repeat $!
        l[$>]
          if $qfc
            +rs. 400%,,5
          else
               .
          fi
          spn={(iM-im)/2}
          mv. 0
          _multigrad. $stp,$tol,$smt
          bandpass. {$psz},{$del}
          orientation.
          if $qfc
            r. ..,..,.,.,5,1
            b. {$con},1,1
          else
            b. {$con/4},1,1
          fi
          n[-2,-1] {-$spn},{$spn}
          +. ..
          n. -{(iM-im)/2},{(iM-im)/2}
          rm..
          threshold. {$llv}
          if $qfc
            rs. 25%,,5
          fi
          n. 0,255
        done
      done
      a c
      if $gry
        to_rgb
      fi
    done
  done

#@cli _multigrad : _stepsize=5 _tolerance=10 _smooth=5
_multigrad : skip ${1=50},${2=10},${3=5}
  smt=$3
  stp=$1
  tol=$2
  repeat $!
    l[$>]
      b {$smt}
      normalize_local 3,32,4%,2%,1,0,255
      gradient_norm.
      ld={log(iM)}
      +. 1e-10
      log.
      /. {$ld}
      cut. 0,1
      +ge. $tol%
      if round($smt)
        erode_circ. {round(1.5*$smt)}
        dilate_circ. {round(1.5*$smt)}
      fi
      negate..
      n.. 0,1
      +distance. 1,..,0
      rm...
      round. 2
      mod. {1+$stp}
      threshold 90%
      +[-2,-1]
      *. -1
      +. 1
    done
  done

#@cli tiletex : _texscale=8 autoangle=-1 _keepimag=0
#@cli : Renders a tilable texture on selected images, taking polar formatted
#@cli : (magnitude, phase angle) seed values from pairs of selected,
#@cli : alternating "Magnitude" and "Angle" images or, if these are constant
#@cli : black, then from internally generated random values. Unless
#@cli : 'autoangle' is positive, input images must form "Magnitude" and
#@cli : "Angle" pairs and each pair must have an equal number of
#@cli : channels. Produces "real" and "imaginary" output images (But note
#@cli : _keepimag, below). 'texscale' sets the size of a square window around
#@cli : the spectral origin where random seeds are set. Larger 'texscales'
#@cli : settings admit higher frequency coefficients, giving rise to finer
#@cli : output details. 'texscale' ranges from 1 upward and defaults to 8. It
#@cli : is ignored if the user has preset coefficients within the input
#@cli : images. Setting 'autoangle' to a positive value in the range [0, 255]
#@cli : eliminates the need for providing "Angle" input images. The provided
#@cli : argument is applied as a default phase angle to all "Magnitude" data
#@cli : and input images are taken to be "Magnitude" data only. 'keepimag' is
#@cli : a trivalued flag: 0, 1 or 2. '0' requests both "Real" and "Imaginary"
#@cli : output pairs and is the default. '1' requests the "Real" output image
#@cli : only; '2' requests the "Imaginary" output image only.
#@cli : Output images are unnormalized and range from negative to positive
#@cli : values, Normalize data accordingly for use with bitmap editors.
tiletex : check "${1=8}>0 && isnum(${2=-1.0}) && ${3=0}>=0 && ${3}<3"
  if $2>=0
    addenda2="Common default angle: $2."
  else
    addenda2="Explicit angles from provided images."
  fi
  addenda3="Real and imaginary"
  if $3!=0
    if $3==1
      addenda3="Real"
    else
      addenda3="Imaginary"
    fi
  fi
  e[^-1] "Rendering tilable texture on $? at window size $1 "$addenda2". "$addenda3" output to be provided."
  rsz={$1}
  impla={2*pi*$2/255.0}
  all={$3}
  iszed=1
  ccc={0,s}
  badccc="Selected images have different number of channels. Have you accidently included alpha channels in some (but not all) images?"
  repeat $!
    if {$>,round(ia)!=0" || "round(iM-im)!=0}
      iszed=0
      break
    fi
  done
  if $iszed # Case 0: All images black. Generate random values
    repeat $!
      l[$<]
        if {$<,$ccc!=s}
          error $badccc
        fi
        .
        a[-2,-1] c
        {2*$rsz+1},{2*$rsz+1},1,{s},(2*u-1)*{wh}
        image.. .,{({-2,w}-w)/2},{({-2,h}-h)/2},0,0,1
        rm.
      done
    done
  else # Case 1: Coefficients in polar format have been set in at least one selected image
    if $impla<0 # Case 1.1: $impla not set (still negative guardian value). Images must be <radius>, <angle> image pairs
      if $!%2!=0
        error "Selected images contain data, but selection count is odd. Cannot determine angles for some coefficients. Consider setting an implied angle or providing an even number of images."
      fi
      repeat $!/2
        l[{2*$<},{2*$<+1}]
          if $ccc!={$<,s}" || "$ccc!={{$<+1},s}
            error $badccc
          fi
          s[-2,-1] c
          repeat $!/2
            l[{$>},{$!/2+$>}]
              /[0,1] 255
              *[1] {2*pi}
              polar2complex[0,1]
            done
          done
          a[0--1] c
        done
      done
    else # Case 1.2: Odd numbered selection permitted when $impla is not negative. Furnishes constant angle field
      repeat $!
        l[$<]
          if $ccc!={$<,s}
            error $badccc
          fi
          [0]
          s[-2,-1] c
          repeat $!/2
            l[{$>},{$!/2+$>}]
              /[0,1] 255
              *[0] {cos($impla)}
              *[1] {sin($impla)}
            done
          done
          a[0--1] c
        done
      done
    fi
  fi
  repeat $!
    l[$<]
      shift. {-round(w/2)},{-round(h/2)},0,0,2
      s. c,2
      ifft[-2,-1]
      if $all!=0
        if $all==1
          rm.
        else
          rm..
        fi
      fi
    done
  done

#@gui __
#@gui <b>Rendering</b>
#@gui Rectangular Tiling : fx_rec_tileit, gtutor_rectangular_tiling_preview
#@gui : documentation  = note("Generate a mosaic from an image. Works best with line art cartoons with flat color.")
#@gui : sep                 = separator()
#@gui : Tile Size           = float(1.0,0.05,5.0)
#@gui : Disrupt Orientation = float(5.0,0.0,10.0)
#@gui : Spread Tiles Apart  = float(1.5,0.25,5.0)
#@gui : Fill Holes          = bool(1)
#@gui : Color Count         = int(4,2,32)
#@gui : Flat Color          = bool(0)
#@gui : Light Angle         = float(45.0,-180,180)
#@gui : Soften Lighting     = float(0.5,0.0,5.0)
#@gui : sep            = separator()
#@gui : note           = note(<small>Author: <i>Garry R. Osgood</i>. Latest Update: <i>2023/07/01</i></small>)
#@gui : url            = link("Technical Notes",https://gmic.eu/tutorial/tiled_art.html)

gtutor_rectangular_tiling_preview :
    gui_split_preview "gtutor_tileit ${2},${1},${3},${8},${4},${7},${5},${6}",0
    is_fc={2*(1-$6)}
    u "{$1}{$2}{$3}{$4}{$5}{$6}"\
      "{$7}_"$is_fc\
      "{$8}_"$is_fc

fx_rec_tileit:
    gtutor_tileit ${2},${1},${3},${8},${4},${7},${5},${6}

#@cli gtutor_tileit : 0<=_disrupt<=10,0.05<_tsize,0.25<=_spread,0<=_soft,_fillholes:True,-180<=_lightangle<=180,2<=_ccount<=32,_fcolor:False
#@cli : Generate a mosaic from an image. Works best with line art cartoons with flat color.
#@cli : disrupt=5      Rotates, scales and displaces tiles. Suggest 0-10.
#@cli : tsize=1.0      Tile size relative to image. 1.0 → tile diagonal is 2.5% of the image diagonal.
#@cli : spread=1.5     Increasing promotes dropped tiles, gaps at junctions and runs. Suggest 0-3.
#@cli : soft=0.5       Soften and dull shadows and highlights. Suggest 0-5.
#@cli : fillholes=1    True:  Fill gaps and holes. No alpha channel.
#@cli :                False: Leave gaps and holes. Image has alpha channel.
#@cli : lightangle=45° Degrees: -180° – 180°. Lighting angle.
#@cli :                45°: Light appears to stream from viewer's upper left.
#@cli : ccount=4       Set number of dominant colors, taken from those most frequently occuring in source.
#@cli : fcolor=0       True:  Flat color tiling without lighting and shading.
#@cli :                False: Do tile lighting and shading.
gtutor_tileit : -check "${1=5}>=0 && $1<=10 && ${2=1.0}>=0.05 && ${3=1.5}>=0.25 && ${4=0.5}>=0 && isbool(${5=1}) && ${6=45}>=-180 && ${6}<=180 && ${7=4}>=2 && ${7}<=32 && isbool(${8=0})"
-echo[^-1] "Applying faux tiling to selected images. Disruption: "${1}". Tile size: "${2}". Tile spread: "${3}". Highlight softening: "${4}". Holes: "${arg\ 1+!$5,filling,leaving}". Light angle: "${6}"°. Color count: "${7}", and "${arg\ 1+!$8,unshaded,shaded}" color."
# Parameters

disrupt=$1
tsize=$2*0.025*sqrt(w^2+h^2)
spread=$3
soft=$4
fillholes=$5
lightangle=$6
ccount=$7
fcolor=$8

-repeat $!
   -local[$>]
      # Color quantization + black
      -remove_opacity.
      +colormap. ${ccount},1,2
      -index.. .,0,1
      -round 1
      1
      -append[-2,-1] x
      -name. pallette
      -move[pallette] 0
      -name. qcolor
      +luminance[qcolor]
      -name. qlumin
      -normalize[qlumin] 0.6,1

      # Outline qcolor
      -input 100%,100%,1,1,'I(#-2,x,y)==I(#-3,0,0)?1:0'
      -fill. ">abs(
                   i-j(1,1,0,0,0,1)
                  )>iv?
                 1:
                 abs(
                       i-j(1,0,0,0,0,1)
                    )>iv?
                    1:0"
      -name[-1] outline

      # Cost: perturbs distance to outline measure, a basis of tile irregularity
      -input 100%,100%,1,1
      -name[-1] cost
      -plasma[cost] 4,4,{ceil($disrupt)}
      -normalize[cost] 0,{$disrupt/4.0}

      # Distance to outline + distance perturbation
      +distance[outline] 1,[cost],1
      -name. distvar
      +distance[outline] 1
      +add[-1,-2]
      -remove[-3,-2]

      # True distance: basis for marking off distance by tile height
      [-1]
      -name[-1] truedistance

      # Orient: source of tile rotation
      -name[-2] orienter

      # Make Warper: distorts tiles
      -gradient[cost] xy
      -append[-4,-3] c
      -blur[-3] 1,1,1
      -normalize... {-1.5*$disrupt},{1.5*$disrupt}
      -name... warper

      #  Measure out and scribe tile center-to-center lines
      -round[truedistance] {$spread*$tsize}
      -fill[truedistance] ">
                          abs(i-j(1,1,0,0,0,1))>"{0.5*$spread*$tsize}"?
                          1:
                            abs(i-j(1,0,0,0,0,1))>"{0.5*$spread*$tsize}"?
                            1:0
                          "

      # Compute orientation field
      -gradient[orienter] xy
      -append[-3,-2] c
      -orientation[orienter]

      # Plotting field:
      [-1],[-1],1,4,'[-1,-1,-1,0]'
      -name. plottingfield

      # Draw tiles on a plotting field:
      # (1) xfrm: encodes tile translations and rotations
      # for tile corner points. (2) tl, tr, bl, br:
      # tile corners, expressed in homogeneous
      # coordinates.
      -fill[plottingfield] ">if(
                                 0<i#-2 && I#-1==[-1,-1,-1,0],
                                 xfrm=eye(3);
                                 xfrm[0]=I#-3[1];
                                 xfrm[1]=I#-3[0];
                                 xfrm[2]=x;
                                 xfrm[3]=-I#-3[0];
                                 xfrm[4]=I#-3[1];
                                 xfrm[5]=y;
                                 tl=xfrm*[-"$tsize", "$tsize"/2.0,1];
                                 tr=xfrm*[ "$tsize", "$tsize"/2.0,1];
                                 bl=xfrm*[-"$tsize",-"$tsize"/2.0,1];
                                 br=xfrm*[ "$tsize",-"$tsize"/2.0,1];
                                 polygon(#-1,5,
                                         [tl[0],tl[1]],
                                         [tr[0],tr[1]],
                                         [br[0],br[1]],
                                         [bl[0],bl[1]],
                                         [tl[0],tl[1]],
                                         1,[[I#-7]*i#-6,255]);
                                 polygon(#-1,-5,
                                         [tl[0],tl[1]],
                                         [tr[0],tr[1]],
                                         [br[0],br[1]],
                                         [bl[0],bl[1]],
                                         [tl[0],tl[1]],
                                         1,0xffffffff,[0,0,0,255]);
                               I,I)"

      -cut[plottingfield] 0,255

      # Make isovalue targets for lighting height map
      100%,100%,1,1,'I#-1==[0,0,0,255]?1:0'
      -name. heightmap

      # Distort artwork
      -warp[plottingfield,heightmap] [warper],1,2,2

      # Clean up
      -remove[-3--6]
      -split_opacity[plottingfield]
      -index[plottingfield] [pallette],0,1
      -remove[pallette]
      -fill.. 'i>=127?255:0'
      -fill. 'i>0.05?1:0'
      -fill. 'i#-2==0?0:i'

      -if $fcolor # Do light and shade?
         -if $fillholes
            # Fill holes in the plotting field
            -fill[plottingfield] 'i#-2==0?I#-5*i#-4:I'
	    -remove[-2]
	 -else
 	    -append[-3,-2] c
  	 -fi
         -keep[plottingfield]
      -else
         # Distance from edges: proxy for
         # tile height. Shape height with
         # power function
         -distance[heightmap] 1
         -normalize[heightmap] 0,1
         -pow. 0.25
         -blur. 0.875,1,1
         -normalize[heightmap] 0,1

         -if {$fillholes==0}
            # Poke holes in the height map
            -fill[heightmap] 'i#-2==0?0:i'
         -else
            # Fill holes in the plotting field
            -fill[plottingfield] 'i#-2==0?I#-5*i#-4:I'
         -fi
         -remove[qcolor,qlumin]

         # Cheap Fingerpaint Lighting
         # Derive shadow, hightlight, color

         -normalize[plottingfield] 0,1

         # Light
         +gradient[heightmap] xy
         -append[-2,-1] c
         ({cos($lightangle*pi/180)}^{sin($lightangle*pi/180)})
         -resize. [-2],[-2],[-1],[-1],1
         +mul[-2,-1]
         -compose_channels. add
         -name. light
         -cut. {ia},{iM}
         -normalize. 0,1
         -pow. 0.5
         if $soft>0
            -blur. {$soft},1,1
         fi

         # Shadow
         -mul.. -1
         -mul[-3,-2]
         -compose_channels.. add
         -name.. shadow
         -cut.. {ia#-2},{iM#-2}
         -normalize.. 0,1
         -oneminus..
         -pow.. 2

         # Composite
         -mul[plottingfield,shadow]
         -mul[light] '{iM#0}'
         -add[plottingfield,light]
         -normalize[plottingfield] 0,255
         -if {$fillholes==0}
            -append[-3,-2] c
         -else
            -remove..
         -fi
         -keep[0]
      -fi # else doing light and shade
   -done
-done
# American Bank Note Scroll Works
# ---------------------------------------------------------------------------

#@cli gtutor_abn : (x,y,f)×4_spinner_tip_coordinates/rotation_rates,line_width,(r,g,b)_color,opacity,flat-full%,tilt°
#@cli : Given tip positions and rotation rates of up to four
#@cli : chain-linked compasses ('spinners'), arbitrarily named
#@cli : 'red', 'green', 'blue' and 'gray', draw the path of the tip
#@cli : of the last compass, accounting for tip locations and
#@cli : rotation rates of that and all predecessors. Line width, RGB
#@cli : color and opacity set the visual attributes of the
#@cli : path. 'flat-full' sets the elliptical shape of the drawing
#@cli : tip, with smaller implying greater eccentricity: '0%' is
#@cli : flat; '100%' is round. Tilt° specifies tip rotation from the
#@cli : horizontal, '0°' to '90°', aligning the tip vertically.
#@cli : $ 1024,1024,1,3 gtutor_abn. 60,50,1,70,50,4,nan,nan,1,nan,nan,1,10,255,60,15,255,100,25,30 #red rose

#@gui __
#@gui <b>Rendering</b>
#@gui ABN Filigrees : gtutor_abn, gtutor_abn_preview(0)
#@gui : note              = note(<b><span color="#FF9600">The American Bank Note Co. Filigree Machine</span></b>)
#@gui : Red Spinner  (%)  = point(60,40,0,0,255,100,25,127,1%)_2
#@gui : Red Frequency     = int(1,-50,50)_2
#@gui : Green Spinner (%) = point(50,50,-1,0,185,255,25,127,1%)_2
#@gui : Green Frequency   = int(1,-50,50)_2
#@gui : Blue Spinner (%)  = point(50,50,-1,0,25,185,255,127,1%)_2
#@gui : Blue Frequency    = int(1,-50,50)_2
#@gui : Gray Spinner  (%) = point(50,50,-1,0,200,200,200,127,1%)_2
#@gui : Gray Frequency    = int(1,-50,50)_2
#@gui : sep               = separator()
#@gui : note              = note(<b><span color="#FF9600">Pen Settings:</span></b>)
#@gui : Relative Width    = float(5,1,100)_2
#@gui : Color             = color(255,255,255,255)_2
#@gui : Opacity           = float(100,0,100)_2
#@gui : Shape (Flat-Full) = float(100,0,100)_2
#@gui : Tilt°             = float(0,0,90)_2
#@gui : sep3              = separator()
#@gui : note = note("<small>Author: <i>Garry R. Osgood</i>.      Latest Update: <i>2024/19/02</i>.</small>")
#@gui : url  = link("Technical Notes",https://gmic.eu/tutorial/wheelies.html)

gtutor_abn:
   xr,yr,fr,xg,yg,fg,xb,yb,fb,xz,yz,fz,pw,pcr,pcg,pcb,pca,pco,ps,pt=$*

   # Preview background color
   -if 0$_is_preview
      -if s>3
         -fill_color 0,0,0,0
      -elif s>4
         -error "Too many channels. Expected no more than four, got "{s}"."
      -else
         -fill_color 0,0,0
      -fi
   -fi

   # Plot vector integrity and range checks
   iw:=min(w,h)
   nl=1
   polyx=50
   polyy=50
   spins=  # List of active red, green, blue and gray spinners

   #Relative image measure => spectral coefficients
   mat=0.02,0,-1,0,-0.02,1,0,0,1
   -if !isnan(sum($xr,$yr))
      txr:=$xr>100?100:($xr<0?0:$xr)
      tyr:=$yr>100?100:($yr<0?0:$yr)
      polyx=$polyx,$txr
      polyy=$polyy,$tyr
      dnr:=([$mat]*[$txr,$tyr,1])[0,2]
      prr:=norm2([$dnr])
      par:=rad2deg(atan2([$dnr][1],[$dnr][0]))
      nl+=1
      spins=$prr,$par,$fr
   -fi
   -if !isnan(sum($xg,$yg))
      txg:=$xg>100?100:($xg<0?0:$xg)
      tyg:=$yg>100?100:($yg<0?0:$yg)
      polyx=$polyx,$txg
      polyy=$polyy,$tyg
      dng:=([$mat]*[$txg,$tyg,1])[0,2]
      prg:=norm2([[$dng][0]-[$dnr][0],[$dng][1]-[$dnr][1]])
      pag:=rad2deg(atan2([$dng][1]-[$dnr][1],[$dng][0]-[$dnr][0]))-$par
      nl+=1
      spins=$spins,$prg,$pag,$fg
   -fi
   -if !isnan(sum($xb,$yb))
      txb={$xb>100?100:($xb<0?0:$xb)}
      tyb={$yb>100?100:($yb<0?0:$yb)}
      polyx=$polyx,$txb
      polyy=$polyy,$tyb
      dnb:=([$mat]*[$txb,$tyb,1])[0,2]
      prb:=norm2([[$dnb][0]-[$dng][0],[$dnb][1]-[$dng][1]])
      pab:=rad2deg(atan2([$dnb][1]-[$dng][1],[$dnb][0]-[$dng][0]))-($par+$pag)
      nl+=1
      spins=$spins,$prb,$pab,$fb
   -fi
   -if !isnan(sum($xz,$yz))
      txz={$xz>100?100:($xz<0?0:$xz)}
      tyz={$yz>100?100:($yz<0?0:$yz)}
      polyx=$polyx,$txz
      polyy=$polyy,$tyz
      dnz:=([$mat]*[$txz,$tyz,1])[0,2]
      prz:=norm2([[$dnz][0]-[$dnb][0],[$dnz][1]-[$dnb][1]])
      paz:=rad2deg(atan2([$dnz][1]-[$dnb][1],[$dnz][0]-[$dnb][0]))-($par+$pag+$pab)
      nl+=1
      spins=$spins,$prz,$paz,$fz
   -fi

   -if $nl<2
      -error "Insufficient control point pairs. Have: "$nl"!"
   -fi

   -if 0$_is_preview

      # Draw coordinate axes, spinner radii and trial
      # arabesque, scaling to preview screen space.

      dnl={2*$nl}
      qnl={4*$nl}
      rpoly:="PX=vector"$nl"("$iw"*["$polyx"]/100);
              PY=vector"$nl"("$iw"*["$polyy"]/100);
              RX=vector"$nl"(reverse(PX));
              RY=vector"$nl"(reverse(PY));
              CX=vector"$dnl"(PX,RX);
              CY=vector"$dnl"(PY,RY);
              C=vector"$qnl"(0);
              fill(
                    C,
                    j,
                    C[j]=(j%2?CY[j>>1]:CX[j>>1])
                  );
              C"
      # Axes…
      -if s>3
         -line {$iw/2},0,{$iw/2},{$iw},0.875,0xfcfcfcfc,180,220,255,255
         -line 0,{$iw/2},{$iw},{$iw/2},0.875,0xfcfcfcfc,180,220,255,255
      -else
         -line {$iw/2},0,{$iw/2},{$iw},0.5,0xf0f0f0f0,180,220,255
         -line 0,{$iw/2},{$iw},{$iw/2},0.5,0xf0f0f0f0,180,220,255
      -fi
      # Spinners…

      -polygon. {2*$nl},$rpoly,1,0xffffffff,200,60,0

      # Derive plot points from spinner positions, lengths, orientations and rates of spin
      -_pvt_mkspectral[0] $iw,$spins
      -split[-1] c
      -ifft[-2,-1]
      -append[-2,-1] c
      -name. temporal
      ss:=specw=$iw/2;ss=eye(3);ss[0]=specw;ss[2]=$iw/2;ss[4]=-specw;ss[5]=$iw/2;ss
      -fill[temporal] ([$ss]*[I(x,y),1])[0,2];

      # Arabesque: Draw with calligraphic pen
      relw:=$pw*$iw/2000   # GUI parameter: 'Relative Width' => $pw
      opac:=$pco/100       # GUI parameter: 'Opacity'        => $pco
      pent:=$pt+90         # GUI parameter: 'Tilt°'          => $pt
      fac:=1-($ps/100)     # GUI parameter: 'Flat=>Full'     => $ps
      -curve[0] [temporal],$relw,$pent,$fac,1,$opac,$pcr,$pcg,$pcb,$pca
      -remove[temporal]

   -else # Plot final output image with calligraphic pen effects

      # Plot internally to 4x: [target]. Later, ¼× arabesque
      # on target and alpha blend that with given image.
      minw:=4*$iw
      -input {$minw},{$minw},1,4,0,0,0,0
      -name. target

      # Get image of spectral coefficients.
      -_pvt_mkspectral[target] {w#$target},$spins

      # Spectral coefficients => temporal plots
      # via inverse fast fourier transform.
      -split[-1] c
      -ifft[-2,-1]
      -append[-2,-1] c
      -name. temporal

      # Complex plane to screenspace transform.
      ss:=specw=$minw/2;ss=eye(3);ss[0]=specw;ss[2]=specw;ss[4]=-specw;ss[5]=specw;ss
      -fill[temporal] ([$ss]*[I(x,y),1])[0,2];

      # Draw with calligraphic pen
      relw:=$pw*$minw/2000 # GUI parameter: 'Relative Width' => $pw
      opac:=$pco/100       # GUI parameter: 'Opacity'        => $pco
      pent:=$pt+90         # GUI parameter: 'Tilt°'          => $pt
      fac:=1-($ps/100)     # GUI parameter: 'Flat=>Full'     => $ps
      -curve[target] [temporal],$relw,$pent,$fac,1,$opac,$pcr,$pcg,$pcb,$pca
      -remove[temporal]

      # Target image: 4× => 1× and alpha blend with given layer.
      -resize[target] {0.25*w#$target},{0.25*h#$target},{d#$target},{s#$target},3
      -resize[target] {w#0},{h#0},{d#0},{s#$target},0
      -if s#0<4
          -to_rgba[0]
          -blend[0] [target],alpha,1
          -to_rgb
      -else
          -blend[0] [target],alpha,1
      -fi
      -remove[target]
   -fi

gtutor_abn_preview:
   _is_preview=1

   # Require a 1:1 aspect preview image
   -remove {s=2*min(${-gui_preview_wh})/2;[s,s]},1,3
   -gtutor_abn $*

#  ----------------------------------------------------------------------
#  Spectral Arabesque Section
#  ----------------------------------------------------------------------

#@cli gtutor_mkspectral :
#@cli: Generate a two channel discrete frequency domain image
#@cli: corresponding to the supplied delta wheelie parameters:
#@cli: +r, ±θ and ±f on the command line, one triplet for each
#@cli: delta wheelie. Use gtutor_specplot to convert this spectral
#@cli: image to a spatial path that can be scaled and plotted by curve.
#@cli: $ gtutor_mkspectral 512,0.5,90,1,0.25,0,-3,0.125,0,-5 gtutor_specplot.
gtutor_mkspectral :
   _pvt_mkspectral $*

_pvt_mkspectral: -check "isint(${1}) && ${1}>0 && !(($#-1)%3)"
   -echo[^-1] "Generate spectral domain image given "{($#-1)/3}" delta wheelies."
   # Expect spectral width followed by data triplets $a1,$a2,$a3…
   dwheelcnt={($#-1)/3}
   specw=$1
   -input 3,1,1,$dwheelcnt,${2--1}
   -name. args
   -store[args] deltawheelies

   #coeffcient image: 'carray'
   -input $specw,1,1,2
   -name. carray
   -store[carray] coefficientarray

   # Find canonical sum by aggregating delta wheelies.
   # Insert terms into spectral image using rotation
   # rate as spectral coordinates.
   # Σf -> $accsf; Σθ → $acca
   -eval "const wc=$dwheelcnt;
          const sw=$specw;
          dw=get('deltawheelies',wc*3);
          ca=get('coefficientarray',sw*2);
          acca=0;
          accsf=0;
          repeat(wc,k,
                 r=dw[3*k];
                 acca+=deg2rad(dw[3*k+1]);
                 accsf+=dw[3*k+2];
                 aidx=accsf%sw;
                 ca[aidx]+=r*cos(acca);
                 ca[sw+aidx]+=r*sin(acca);
                );
          store('coefficientarray',ca,sw,1,1,2)"

   # carray: frequency domain image generated
   # from the given delta wheelie chain.
   -input $coefficientarray
   -name. carray

   # Scale freq. domain by domain length.
   -mul[carray] $specw

#@cli gtutor_specplot :
#@cli: Convert a spectral image produced by gtutor_mkspectal to
#@cli: a temporal plotting image centered on and in the unit square.
#@cli: Scale, shear, rotate and/or translate this plotting image
#@cli: by suitable transforms and plot with the curve command.
#@cli: $ gtutor_mkspectral 128,0.5,0,1,0.5,0,10 gtutor_specplot.
gtutor_specplot :
    -echo[^-1] "Generate an arabesque from selected spectral coefficient image$?"
    # Frequency domain → time domain
    -foreach {
       -split[-1] c
       -ifft[-2,-1]
       -append[-2,-1] c
    }

#@gui __
#@gui <b>Artistic</b>
#@gui Finger Paint : gtutor_fpaint, gtutor_fpaint_preview(0)
#@gui : note = note("<b>Paint Detail</b>")
#@gui : Finger Size = float(0.5,0,1)
#@gui : Keep Detail = float(0.5,0,1)
#@gui : Bristle Size = float(0.0,0,1)
#@gui : Edge Detect Includes Chroma = bool(0)
#@gui : sep = separator()
#@gui : note = note("<b>Render Detail</b>")
#@gui : Light Direction = float(45.0,0,360.0)
#@gui : Shadow = float(0.5,0,1)
#@gui : Highlight = float(0.5,0,1)
#@gui : Specular= float(0.5,0,1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>Garry R. Osgood</i>. Latest update: <i>2015/02/26</i>.</small>")
#@gui : note = link("Finger paint instructions and tutorial.","https://gmic.eu/oldtutorial/the-fingerpainting-filter.shtml")
#@gui : note = link("Fingerpaint theory.","https://gmic.eu/tutorial/fingerpainting.html")

gtutor_fpaint :
  repeat $!
    l[$>]
      hasalpha={s>3}
      if $hasalpha
        split_opacity.
        rv[-2,-1]
      fi
      # Find Finger Strokes
      lh={h}
      +b. {$1/1.25}%
      if $4
        +luminance.
        rgb2hsl..
        s.. c
        rm[-4,-2]
        quantize[-2,-1] {round(5+15*(1-$1))},1,1
        gradient_norm[-2,-1]
        n[-2,-1] 0,255
        +[-2,-1]
      else
        quantize. {round(5+15*(1-$1))},1,1
        gradient_norm.
        n. 0,255
      fi
      threshold. {80-60*$2}%
      dilate_circ. 8
      thinning.
      dilate_circ. 3
      # Smoothing finger strokes
      +diffusiontensors. 0.1,0.85,0.3,{4+8*$1}
      if $2<1
        .
        rs[-3,-1] ,{$lh*(0.25+0.75*$2)},5
        repeat 2
          smooth... .,{400*(1-$2)}
        done
        rm.
        r.. ...,...,..,..,5,0
      fi
      # Modify the diffusion tensor field
      eigen.
      s.. c
      fill_color... {1-0.15*$3}
      fill_color.. {0.15*$3}
      a[-3,-2] c
      eigen2tensor[-2,-1]
      # Emulating Paint
      98%,98%,1,1 noise. {20-10*$3},2 ==. 1
      r. ..,..,.,.,0,0,0.5,0.5,0.5,0.5
      to_rgb.
      *. [-4]
      +ac[-4] "* 0.6","hsl8_s"
      ac.  "* 0.85","hsl8_l"
      # Smooth Over and Under Colors
      repeat 2
        smooth[-2,-1] ...,{100*(6-5*$2)}
      done
      # Lighting
      # Elevation Map
      +luminance..
      n. 0,0.7
      +n[-5] 0,1
      +[-2,-1]
      n. 0,1
      blend[-3,-2] add
      # Generate Direction Field
      gradient.
      a[-2,-1] c
      100%,100%,1,2
      if $6
        # Shadow
        fill_color. {cos(2*((180+$5)%360)*pi/360)},{sin(2*((180+$5)%360)*pi/360)}
        +*[-2,-1]
        compose_channels. +
        cut. {ia},{iM}
        n. 0,1
        to_rgb.
        *. [-7]
        negate.
        n. 0,255
        blend[-4,-1] multiply,$6
      fi
      if $7
        # Highlight
        fill_color. {cos(2*$5*pi/360)},{sin(2*$5*pi/360)}
        +*[-2,-1]
        compose_channels. +
        cut. {ia},{iM}
        n. 0,1
        to_rgb.
        *. [-7]
        n. 0,255
        blend[-4,-1] screen,$7
      fi
      if $8
        # Specular
        fill_color. {cos(2*$5*pi/360)},{sin(2*$5*pi/360)}
        +*[-2,-1]
        compose_channels. +
        cut. {ia},{iM}
        to_rgb.
        n. 0,255
        blend[-4,-1] screen,$8
      fi
      rm[-1,-2,-4,-5,-6]
      ac. "apply_curve 1,0,32,127,180,255,255","hsl8_s"
      apply_gamma. 1.4
      if $hasalpha
        rv[-2,-1]
        a[-2,-1] c
      fi
    done
  done

gtutor_fpaint_preview :
  gui_split_preview "gtutor_fpaint ${^0}",$-1

#@gui __
#@gui <b>Rendering</b>
#@gui Hair Locks : gtutor_hairlock, gtutor_hairlock_preview(0)
#@gui : note = note("<b>Geometry</b>")
#@gui : Spread = float(0.5,0,1)
#@gui : Thickness = float(0.5,0,1)
#@gui : Length = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<b>Color</b>")
#@gui : Color = color(255,255,0,255)
#@gui : Variance = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<b>Lighting</b>")
#@gui : Azimuth = float(45,0,360)
#@gui : Highlight = float(0.5,0,1)
#@gui : Specular = float(0.5,0,1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>Garry R. Osgood</i>. Latest update: <i>2014/12/11</i>.</small>")
#@gui : note = link("Hairlock instructions and tutorial.","https://gmic.eu/oldtutorial/the-hairlock-filter.shtml")
gtutor_hairlock :
  # Harvest color choices from GUI & translate to HSL (Thank you, David T. !)
  ($4^$5^$6)
  rgb2hsl.
  hue={i[0]}
  sat={0.97*i[1]}
  light={i[2]}
  opac={$7/255}
  var={0.1*$8}
  rm.
  # Iterate over selections ....
  repeat $!
    l[$>]
      # Compose Hair Shape Mask and Tensor Field
      +diffusiontensors. 1,0,0.1,{8*$1},0
      diffusiontensors.. 0,1,0.1,{20*$1},0
      eigen[-2,-1]
      rm.
      s. c
      rm.
      *. -1
      +.
      n. 0,1
      mv. 0
      s.. c
      rm...
      *.. -1
      +.. 1
      +*.. 0
      rv[-1,-2]
      a[-3,-2] c
      eigen2tensor[-2,-1]
      # Make Base Noise for Hair Strands
      100%,100%,1,3
      _hcolor. $hue,$sat,$light,$var,{0.05+0.5*$2},0.98,1
      # Thicken Hair
      dilate_circ. {2+2*$2}
      +luminance.
      gt. 0.01
      *[-4,-1]
      n. 0,255
      replace_color. 0,0,0,0,0,$4,$5,$6
      # Smoothing
      rv[-2,-1]
      repeat 3
        smooth[-3,-2] .,{5+595*$3}
      done
      rm.
      #Hilight
      rv[-2,-1]
      sharpen. {1.2*(1-$2)}
      n. 0,1
      +_hlight. $9,$10,1
      *. ...
      +[-3,-1]
      # Specular
      +_hlight. $9,$10,$11
      ...,...,...,...,255,255,255
      image[-4] .,0,0,0,0,1,..
      k[-4,-3]
      n. 0,{51*(1+4*$opac)}
      a[-2,-1] c
      n. 0,255
    done
  done

gtutor_hairlock_preview :
  gui_split_preview "gtutor_hairlock ${^0}",$-1

_hlight : check "${1=45}<=360 && $1>=0 && ${2=0.5}>=0 && ${3=0.5}>=0"
  if $2>0
    rs. 400%,,5
    b. 2,1
    gradient_orientation. 2
    a[-2,-1] c
    ({cos(2*$1*pi/360)}^{sin(2*$1*pi/360)})
    r. ..,..,.,.,1
    *[-2,-1]
    compose_channels. +
    cut. {ia},{iM}
    n. {195*$3-200},0
    exp.
    rs. 25%,,5
    n. 0,{$2}
  else
    fill_color. 0
  fi
  to_rgb.

#@cli _hcolor : h_mean,s_mean,l_mean,var,density,coverage,is_mod
#@cli : Plot in selected images impulses centered around h,s,l means +/- var
#@cli : at relative 0<=density<=1 wrt 1/2 image area: related to density=1
#@cli : coverage: wrt image area, relative coverage 0<=coverage<=1 smaller
#@cli : values give rise to unplotted regions around edges equal 1.0-coverage.
#@cli : is_mod, boolean, if true, wraps negative values around to one.
#@cli : Default values: mean=40,var=0,density=0.5,coverage=1,is_mod=True
_hcolor : skip ${1=40},${2=0.5},${3=0.5},${4=0},${5=0.5},${6=1},${7=1}
  repeat $!
    l[$>]
      pcnt={0.5*w*h*$5}
      {$pcnt},1,1,1,({0,w}*(1-$6)/2)+{0,w}*$6*u
      {$pcnt},1,1,1,({0,h}*(1-$6)/2)+{0,h}*$6*u
      {$pcnt},1,1,1
      ra={$1/360.0}
      if $7
        {$pcnt},{s},1,1,360.0*($ra+$4*(2*g-1))%1
        {$pcnt},{s},1,1,($2+$4*(2*g-1))%1
        {$pcnt},{s},1,1,($3+$4*(2*g-1))%1
      else
        {$pcnt},{s},1,1,360.0*($ra+$4*(2*g-1))
        {$pcnt},{s},1,1,$2+$4*(2*g-1)
        {$pcnt},{s},1,1,$3+$4*(2*g-1)
      fi
      a[^0] y
      pointcloud. 0,{-2,w},{-2,h},1,{-2,s}
      rm..
      hsl2rgb.
    done
  done

#@gui _

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
